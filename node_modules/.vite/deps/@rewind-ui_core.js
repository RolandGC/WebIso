import {
  require_jsx_runtime
} from "./chunk-EYBKDN54.js";
import {
  require_react_dom
} from "./chunk-CLJMWJMN.js";
import {
  __rest
} from "./chunk-EJSEPX5B.js";
import {
  require_react
} from "./chunk-EFTEWGEA.js";
import {
  __esm,
  __export,
  __toCommonJS,
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@emotion/memoize/dist/memoize.browser.esm.js
function memoize(fn) {
  var cache = {};
  return function(arg) {
    if (cache[arg] === void 0) cache[arg] = fn(arg);
    return cache[arg];
  };
}
var memoize_browser_esm_default;
var init_memoize_browser_esm = __esm({
  "node_modules/@emotion/memoize/dist/memoize.browser.esm.js"() {
    memoize_browser_esm_default = memoize;
  }
});

// node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js
var is_prop_valid_browser_esm_exports = {};
__export(is_prop_valid_browser_esm_exports, {
  default: () => is_prop_valid_browser_esm_default
});
var reactPropsRegex, index3, is_prop_valid_browser_esm_default;
var init_is_prop_valid_browser_esm = __esm({
  "node_modules/@emotion/is-prop-valid/dist/is-prop-valid.browser.esm.js"() {
    init_memoize_browser_esm();
    reactPropsRegex = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
    index3 = memoize_browser_esm_default(
      function(prop) {
        return reactPropsRegex.test(prop) || prop.charCodeAt(0) === 111 && prop.charCodeAt(1) === 110 && prop.charCodeAt(2) < 91;
      }
      /* Z+1 */
    );
    is_prop_valid_browser_esm_default = index3;
  }
});

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-element-context.hook.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
function t(t150) {
  const o123 = (0, import_react.createContext)(null);
  return [({ children: e130, value: n94 }) => (0, import_jsx_runtime.jsx)(o123.Provider, Object.assign({ value: n94 }, { children: e130 })), () => {
    const r123 = (0, import_react.useContext)(o123);
    if (null === r123) throw new Error(t150);
    return r123;
  }];
}

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.context.js
var [e2, n2] = t("Accordion compound components cannot be rendered outside the Accordion component");

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionItem/AccordionItem.context.js
var [e3, n3] = t("Accordion Item compound components cannot be rendered outside the Accordion Item component");

// node_modules/@rewind-ui/core/dist/components/Collapse/Collapse.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var import_react2 = __toESM(require_react());
var n4 = (n94) => {
  const r123 = (0, import_react2.useRef)(null), { duration: o123 = 250, isOpen: a74 = false, children: s74 } = n94, l50 = (0, import_react2.useRef)(true);
  return (0, import_react2.useEffect)(() => {
    const t150 = r123.current;
    if (!t150) return;
    if (!t150.animate) return void (t150.style.height = a74 ? "auto" : "0");
    if (l50.current) return t150.style.height = a74 ? "auto" : "0", void (l50.current = false);
    const e130 = t150.getAnimations(), i58 = getComputedStyle(t150).height, n95 = a74 ? `${t150.scrollHeight}px` : "0";
    e130.length > 0 && e130.forEach((t151) => {
      t151.cancel();
    });
    const s75 = { height: [i58, n95] };
    t150.animate(s75, { duration: o123, easing: "ease-in-out" }).onfinish = () => {
      t150.style.overflow = n95, t150.style.height = a74 ? "auto" : "0px";
    };
  }, [o123, a74]), (0, import_jsx_runtime2.jsx)("div", Object.assign({ ref: r123, style: { height: "0px", overflow: "hidden" } }, { children: s74 }));
};
n4.displayName = "Collapse";

// node_modules/@rewind-ui/core/node_modules/class-variance-authority/dist/index.esm.js
var falsyToString = (value) => typeof value === "boolean" ? "".concat(value) : value === 0 ? "0" : value;
var cx = function() {
  for (var _len = arguments.length, classes = new Array(_len), _key = 0; _key < _len; _key++) {
    classes[_key] = arguments[_key];
  }
  return classes.flat(Infinity).filter(Boolean).join(" ");
};
var cva = (base, config) => {
  return (props) => {
    var ref;
    if ((config === null || config === void 0 ? void 0 : config.variants) == null) return cx(base, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
    const { variants, defaultVariants } = config;
    const getVariantClassNames = Object.keys(variants).map((variant) => {
      const variantProp = props === null || props === void 0 ? void 0 : props[variant];
      const defaultVariantProp = defaultVariants === null || defaultVariants === void 0 ? void 0 : defaultVariants[variant];
      if (variantProp === null) return null;
      const variantKey = falsyToString(variantProp) || falsyToString(defaultVariantProp);
      return variants[variant][variantKey];
    });
    const propsWithoutUndefined = props && Object.entries(props).reduce((acc, param) => {
      let [key, value] = param;
      if (value === void 0) {
        return acc;
      }
      acc[key] = value;
      return acc;
    }, {});
    const getCompoundVariantClassNames = config === null || config === void 0 ? void 0 : (ref = config.compoundVariants) === null || ref === void 0 ? void 0 : ref.reduce((acc, param1) => {
      let { class: cvClass, className: cvClassName, ...compoundVariantOptions } = param1;
      return Object.entries(compoundVariantOptions).every((param) => {
        let [key, value] = param;
        return Array.isArray(value) ? value.includes({
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key]) : {
          ...defaultVariants,
          ...propsWithoutUndefined
        }[key] === value;
      }) ? [
        ...acc,
        cvClass,
        cvClassName
      ] : acc;
    }, []);
    return cx(base, getVariantClassNames, getCompoundVariantClassNames, props === null || props === void 0 ? void 0 : props.class, props === null || props === void 0 ? void 0 : props.className);
  };
};

// node_modules/@rewind-ui/core/dist/theme/styles/Accordion.styles.js
var t3 = { base: cva([], { variants: { color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [""], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], slate: ["shadow-slate-600/50 hover:shadow-slate-600/60"], zinc: ["shadow-zinc-600/50 hover:shadow-zinc-600/60"] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"], xl: ["text-xl"] }, tone: { solid: [], light: [], transparent: [] }, bordered: { true: ["border", "border-gray-100"] } } }), body: cva([], { variants: { size: { sm: ["text-sm", "px-4", "py-2"], md: ["text-base", "px-4", "py-3"], lg: ["text-base", "px-4", "py-4"], xl: ["text-lg", "px-4", "py-5"] }, bordered: { true: [], false: [] } } }), header: cva(["cursor-pointer", "flex", "flex-row", "justify-between", "items-center", "transition", "duration-250", "ease-in-out", "w-full", "focus:outline-none"], { variants: { activeColor: { white: ["focus:ring-gray-100"], blue: ["focus:ring-blue-100"], red: ["focus:ring-red-100"], green: ["focus:ring-green-100"], yellow: ["focus:ring-yellow-100"], purple: ["focus:ring-purple-100"], gray: ["focus:ring-gray-100"], dark: ["focus:ring-gray-200"], black: ["focus:ring-gray-300"] }, size: { sm: ["px-4", "py-2"], md: ["px-4", "py-3"], lg: ["px-4", "py-4"], xl: ["px-4", "py-5"] }, state: { active: [], inactive: [] }, tone: { solid: [], light: [] }, radius: { none: ["first:rounded-t-none"], sm: ["first:rounded-t-sm"], base: ["first:rounded-t"], md: ["first:rounded-t-md"], lg: ["first:rounded-t-lg"] }, bordered: { true: ["border-t", "first:border-t-0", "border-gray-100"], false: [] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, compoundVariants: [{ state: "active", bordered: false, className: ["scale-[1.01]"] }, { state: "active", tone: "solid", className: ["antialiased"] }, { bordered: false, radius: "sm", className: "rounded-sm" }, { bordered: false, radius: "base", className: "rounded" }, { bordered: false, radius: "md", className: "rounded-md" }, { bordered: false, radius: "lg", className: "rounded-lg" }, { activeColor: "white", state: "active", tone: "solid", className: ["bg-white", "text-gray-800"] }, { activeColor: "blue", state: "active", tone: "solid", className: ["bg-blue-500", "text-white"] }, { activeColor: "red", state: "active", tone: "solid", className: ["bg-red-500", "text-white"] }, { activeColor: "green", state: "active", tone: "solid", className: ["bg-green-500", "text-white"] }, { activeColor: "yellow", state: "active", tone: "solid", className: ["bg-yellow-500", "text-white"] }, { activeColor: "purple", state: "active", tone: "solid", className: ["bg-purple-500", "text-white"] }, { activeColor: "gray", state: "active", tone: "solid", className: ["bg-gray-200", "text-gray-800"] }, { activeColor: "dark", state: "active", tone: "solid", className: ["bg-gray-700", "text-white"] }, { activeColor: "black", state: "active", tone: "solid", className: ["bg-black", "text-white"] }, { activeColor: "white", state: "active", tone: "light", className: ["bg-white", "text-gray-800"] }, { activeColor: "blue", state: "active", tone: "light", className: ["bg-blue-50", "text-blue-900"] }, { activeColor: "red", state: "active", tone: "light", className: ["bg-red-50", "text-red-800"] }, { activeColor: "green", state: "active", tone: "light", className: ["bg-green-50", "text-green-800"] }, { activeColor: "yellow", state: "active", tone: "light", className: ["bg-yellow-50", "text-yellow-800"] }, { activeColor: "purple", state: "active", tone: "light", className: ["bg-purple-50", "text-purple-800"] }, { activeColor: "gray", state: "active", tone: "light", className: ["bg-gray-50", "text-gray-600"] }, { activeColor: "dark", state: "active", tone: "light", className: ["bg-gray-200", "text-gray-800"] }, { activeColor: "black", state: "active", tone: "light", className: ["bg-gray-400", "text-gray-800"] }] }), icon: cva(["transition", "transform", "duration-250", "ease-in-out"], { variants: { state: { active: "rotate-180", inactive: "" }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-5", "h-5"], xl: ["w-6", "h-6"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Alert.styles.js
var o = cva(["flex", "gap-x-3", "w-full"], { variants: { tone: { solid: ["border", "border-transparent", "antialiased"], light: ["border"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "px-2.5", "py-2"], sm: ["text-sm", "px-3", "py-2.5"], md: ["text-base", "px-4", "py-3"], lg: ["text-lg", "px-5", "py-4"] }, accent: { none: [], top: ["border-t-2"], right: ["border-r-2"], bottom: ["border-b-2"], left: ["border-l-2"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: ["shadow-gray-200/50 hover:shadow-gray-200/60"], blue: ["shadow-blue-500/50", "hover:shadow-blue-500/60"], red: ["shadow-red-500/50 hover:shadow-red-500/60"], green: ["shadow-green-500/50 hover:shadow-green-500/60"], yellow: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"], purple: ["shadow-purple-500/50 hover:shadow-purple-500/60"], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], dark: ["shadow-gray-600/50 hover:shadow-gray-600/60"], black: ["shadow-gray-800/50 hover:shadow-gray-800/60"] } }, compoundVariants: [{ accent: ["top", "right", "bottom", "left"], color: "white", tone: "solid", className: ["border-gray-200"] }, { accent: ["top", "right", "bottom", "left"], color: "blue", tone: "solid", className: ["border-blue-200"] }, { accent: ["top", "right", "bottom", "left"], color: "red", tone: "solid", className: ["border-red-200"] }, { accent: ["top", "right", "bottom", "left"], color: "green", tone: "solid", className: ["border-green-200"] }, { accent: ["top", "right", "bottom", "left"], color: "yellow", tone: "solid", className: ["border-yellow-200"] }, { accent: ["top", "right", "bottom", "left"], color: "purple", tone: "solid", className: ["border-purple-200"] }, { accent: ["top", "right", "bottom", "left"], color: "gray", tone: "solid", className: ["border-gray-100"] }, { accent: ["top", "right", "bottom", "left"], color: "dark", tone: "solid", className: ["border-gray-300"] }, { accent: ["top", "right", "bottom", "left"], color: "black", tone: "solid", className: ["border-gray-400"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "light", color: "blue", className: ["text-blue-700", "bg-blue-100/95", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-700", "bg-red-100/95", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-700", "bg-green-100/95", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-700", "bg-yellow-100/95", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-700", "bg-purple-100/95", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-700", "bg-gray-100/95", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-800", "bg-gray-300/95", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/95", "border-gray-800"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "border-blue-500"] }, { tone: "outline", color: "red", className: ["text-red-500", "border-red-500"] }, { tone: "outline", color: "green", className: ["text-green-500", "border-green-500"] }, { tone: "outline", color: "yellow", className: ["text-yellow-400", "border-yellow-400"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "border-purple-500"] }, { tone: "outline", color: "gray", className: ["text-gray-600", "border-gray-500"] }, { tone: "outline", color: "dark", className: ["text-gray-600", "border-gray-700"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-800"] }] });
var r2 = cva(["flex", "flex-col", "w-full"], { variants: { size: { xs: ["gap-y-1"], sm: ["gap-y-1.5"], md: ["gap-y-1.5"], lg: ["gap-y-2"] } } });
var l = cva(["font-medium", "leading-none"], { variants: { size: { xs: ["text-sm"], sm: ["text-base"], md: ["text-lg"], lg: ["text-xl"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, tone: { solid: [], light: [], outline: [] } }, compoundVariants: [{ tone: "light", color: "blue", className: ["text-blue-800"] }, { tone: "light", color: "red", className: ["text-red-800"] }, { tone: "light", color: "green", className: ["text-green-800"] }, { tone: "light", color: "yellow", className: ["text-yellow-800"] }, { tone: "light", color: "purple", className: ["text-purple-800"] }, { tone: "light", color: "gray", className: ["text-gray-800"] }, { tone: "light", color: "dark", className: ["text-gray-900"] }] });
var t4 = cva([]);
var a = { base: o, infoWrapper: r2, iconWrapper: cva(["self-start"]), dismissIcon: cva(["hover:opacity-75"], { variants: { size: { xs: ["w-4", "h-4"], sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-5", "h-5"] } } }), title: l, text: t4 };

// node_modules/@rewind-ui/core/dist/theme/styles/Avatar.styles.js
var o2 = { base: cva(["inline-flex", "items-center", "justify-center", "relative", "hover:z-20", "z-10"], { variants: { tone: { solid: ["antialiased"], light: [], glossy: ["bg-gradient-to-r"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "w-7", "h-7"], sm: ["text-xs", "w-8", "h-8"], md: ["text-sm", "w-10", "h-10"], lg: ["text-base", "w-12", "h-12"], xl: ["text-lg", "w-16", "h-16"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, outlined: { true: ["outline"], false: [] } }, compoundVariants: [{ outlined: true, size: ["xs"], className: ["outline-0.5"] }, { outlined: true, size: ["sm"], className: ["outline-1"] }, { outlined: true, size: ["md", "lg", "xl"], className: ["outline-2"] }, { outlined: true, color: "white", className: ["outline-white"] }, { outlined: true, color: "blue", className: ["outline-blue-200"] }, { outlined: true, color: "red", className: ["outline-red-200"] }, { outlined: true, color: "green", className: ["outline-green-200"] }, { outlined: true, color: "yellow", className: ["outline-yellow-200"] }, { outlined: true, color: "purple", className: ["outline-purple-200"] }, { outlined: true, color: "gray", className: ["outline-gray-200"] }, { outlined: true, color: "dark", className: ["outline-gray-200"] }, { outlined: true, color: "black", className: ["outline-gray-300"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100/50"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100/50"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100/50"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100/50"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100/50"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100/50"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300/50"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/50"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "border-blue-500"] }, { tone: "outline", color: "red", className: ["text-red-500", "border-red-500"] }, { tone: "outline", color: "green", className: ["text-green-500", "border-green-500"] }, { tone: "outline", color: "yellow", className: ["text-yellow-400", "border-yellow-400"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "border-purple-500"] }, { tone: "outline", color: "gray", className: ["text-gray-600", "border-gray-500"] }, { tone: "outline", color: "dark", className: ["text-gray-600", "border-gray-700"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-800"] }] }), status: cva(["absolute", "rounded-full", "outline"], { variants: { position: { "top-right": [], "top-left": [], "bottom-right": [], "bottom-left": [] }, size: { xs: ["w-1.5", "h-1.5"], sm: ["w-1.5", "h-1.5"], md: ["w-2", "h-2"], lg: ["w-2.5", "h-2.5"], xl: ["w-3", "h-3", "outline-2"] }, radius: { none: [], sm: [], base: [], md: [], lg: [], full: [] }, status: { online: ["bg-green-400", "outline-green-100"], offline: ["bg-gray-200", "outline-gray-100"], busy: ["bg-red-400", "outline-red-100"], away: ["bg-yellow-300", "outline-yellow-100"] } }, compoundVariants: [{ radius: ["none", "sm", "base", "md", "lg"], position: "top-right", className: ["top-0", "right-0", "translate-x-1/2", "-translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "top-left", className: ["top-0", "left-0", "-translate-x-1/2", "-translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "bottom-right", className: ["bottom-0", "right-0", "translate-x-1/2", "translate-y-1/2"] }, { radius: ["none", "sm", "base", "md", "lg"], position: "bottom-left", className: ["bottom-0", "left-0", "-translate-x-1/2", "translate-y-1/2"] }, { radius: "full", position: "top-right", size: ["xs", "sm"], className: ["top-[0.03rem]", "right-[0.03rem]"] }, { radius: "full", position: "top-left", size: ["xs", "sm"], className: ["top-[0.03rem]", "left-[0.03rem]"] }, { radius: "full", position: "bottom-right", size: ["xs", "sm"], className: ["bottom-[0.03rem]", "right-[0.03rem]"] }, { radius: "full", position: "bottom-left", size: ["xs", "sm"], className: ["bottom-[0.03rem]", "left-[0.03rem]"] }, { radius: "full", position: "top-right", size: ["md", "lg"], className: ["top-[0.05rem]", "right-[0.05rem]"] }, { radius: "full", position: "top-left", size: ["md", "lg"], className: ["top-[0.05rem]", "left-[0.05rem]"] }, { radius: "full", position: "bottom-right", size: ["md", "lg"], className: ["bottom-[0.05rem]", "right-[0.05rem]"] }, { radius: "full", position: "bottom-left", size: ["md", "lg"], className: ["bottom-[0.05rem]", "left-[0.05rem]"] }, { radius: "full", position: "top-right", size: "xl", className: ["top-[0.1rem]", "right-[0.1rem]"] }, { radius: "full", position: "top-left", size: "xl", className: ["top-[0.1rem]", "left-[0.1rem]"] }, { radius: "full", position: "bottom-right", size: "xl", className: ["bottom-[0.1rem]", "right-[0.1rem]"] }, { radius: "full", position: "bottom-left", size: "xl", className: ["bottom-[0.1rem]", "left-[0.1rem]"] }] }), image: cva(["object-cover", "w-full", "h-full"], { variants: { radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] } } }), group: cva(["flex", "isolate", "-space-x-3"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Badge.styles.js
var o3 = { base: cva(["inline-flex", "items-center", "text-center"], { variants: { tone: { solid: ["border", "border-transparent", "antialiased"], light: [], glossy: ["bg-gradient-to-r"], outline: ["border", "bg-white"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "px-1", "h-5"], sm: ["text-sm", "px-1.5", "h-6"], md: ["text-base", "px-1.5", "h-7"], lg: ["text-lg", "px-2", "h-8"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: ["solid", "glossy", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100/50", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100/50", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100/50", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100/50", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100/50", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100/50", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300/50", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/50", "border-gray-800"] }, { tone: "outline", color: "blue", className: ["text-blue-700", "border-blue-200", "bg-blue-50"] }, { tone: "outline", color: "red", className: ["text-red-700", "border-red-200", "bg-red-50"] }, { tone: "outline", color: "green", className: ["text-green-700", "border-green-200", "bg-green-50"] }, { tone: "outline", color: "yellow", className: ["text-yellow-700", "border-yellow-200", "bg-yellow-50"] }, { tone: "outline", color: "purple", className: ["text-purple-700", "border-purple-200", "bg-purple-50"] }, { tone: "outline", color: "gray", className: ["text-gray-700", "border-gray-200", "bg-gray-50"] }, { tone: "outline", color: "dark", className: ["text-gray-800", "border-gray-400", "bg-gray-50"] }, { tone: "outline", color: "black", className: ["text-black", "border-gray-500", "bg-gray-50"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Breadcrumbs.styles.js
var t5 = cva(["flex", "flex-row", "items-center"], { variants: { color: { gray: ["text-gray-300"], slate: ["text-slate-300"], zinc: ["text-zinc-300"] }, size: { sm: ["text-xs", "gap-1"], base: ["text-sm", "gap-1"], md: ["text-base", "gap-1.5"], lg: ["text-lg", "gap-2"] } } });
var a2 = cva(["flex", "flex-nowrap"], { variants: { color: { gray: [], dark: [], slate: [], zinc: [] }, isLink: { true: [], false: [] } }, compoundVariants: [{ color: "gray", isLink: true, className: ["text-gray-700", "hover:text-gray-900"] }, { color: "gray", isLink: false, className: ["text-gray-500"] }, { color: "slate", isLink: true, className: ["text-slate-700", "hover:text-slate-900"] }, { color: "slate", isLink: false, className: ["text-slate-500"] }, { color: "zinc", isLink: true, className: ["text-zinc-700", "hover:text-zinc-900"] }, { color: "zinc", isLink: false, className: ["text-zinc-500"] }] });
var s = { anchor: cva(["flex", "flex-nowrap", "items-center", "gap-1"]), base: t5, item: a2 };

// node_modules/@rewind-ui/core/dist/theme/styles/Button.styles.js
var r3 = { base: cva(["inline-flex", "items-center", "justify-center", "enabled:cursor-pointer", "focus:outline-none", "transition", "duration-150", "ease-in-out", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "data-[has-left-element=true]:h-auto", "data-[has-right-element=true]:h-auto", "focus:z-20"], { variants: { tone: { solid: ["border", "antialiased"], light: ["border", "border-transparent"], transparent: ["border", "border-transparent", "bg-transparent"], outline: ["border", "disabled:hover:bg-transparent"] }, color: { white: ["focus:ring-gray-100"], blue: ["focus:ring-blue-100"], red: ["focus:ring-red-100"], green: ["focus:ring-green-100"], yellow: ["focus:ring-yellow-100"], purple: ["focus:ring-purple-100"], gray: ["focus:ring-gray-100"], dark: ["focus:ring-gray-200"], black: ["focus:ring-gray-300"] }, size: { xs: ["text-xs"], sm: ["text-sm", "h-8"], md: ["text-sm", "h-10"], lg: ["text-base", "h-12"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, animation: { none: [], pulse: ["animate-pulse"], bounce: ["animate-bounce"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, icon: { true: [], false: [] }, loading: { true: ["cursor-progress"], false: [] }, disabled: { true: ["cursor-not-allowed"], false: [] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" }, compoundVariants: [{ tone: ["solid", "outline"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "outline"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "outline"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "outline"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "outline"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "outline"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "outline"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "outline"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "outline"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { icon: false, size: "xs", className: ["px-2", "h-6"] }, { icon: false, size: "sm", className: ["px-2.5", "h-8"] }, { icon: false, size: "md", className: ["px-4", "h-10"] }, { icon: false, size: "lg", className: ["px-5", "h-12"] }, { icon: true, size: "xs", className: ["w-6", "h-6"] }, { icon: true, size: "sm", className: ["w-8", "h-8"] }, { icon: true, size: "md", className: ["w-10", "h-10"] }, { icon: true, size: "lg", className: ["w-12", "h-12"] }, { tone: "solid", color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["border-transparent"] }, { tone: "solid", color: "white", className: ["text-gray-800", "border-gray-100", "bg-white", "focus:bg-gray-50", "hover:bg-gray-50", "active:bg-gray-100", "disabled:bg-gray-50/50", "disabled:hover:bg-gray-50"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500", "focus:bg-blue-600", "hover:bg-blue-600", "active:bg-blue-600/90", "disabled:bg-blue-300", "disabled:hover:bg-blue-300"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500", "focus:bg-red-600", "hover:bg-red-600", "active:bg-red-600/90", "disabled:bg-red-300", "disabled:hover:bg-red-300"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500", "focus:bg-green-600", "hover:bg-green-600", "active:bg-green-600/90", "disabled:bg-green-300", "disabled:hover:bg-green-300"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400", "focus:bg-yellow-500", "hover:bg-yellow-500", "active:bg-yellow-500/90", "disabled:bg-yellow-200", "disabled:hover:bg-yellow-200"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500", "focus:bg-purple-600", "hover:bg-purple-600", "active:bg-purple-600/90", "disabled:bg-purple-300", "disabled:hover:bg-purple-300"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200", "focus:bg-gray-300", "hover:bg-gray-300", "active:bg-gray-300/90", "disabled:bg-gray-100", "disabled:hover:bg-gray-100", "disabled:text-gray-400"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700", "focus:bg-gray-800", "hover:bg-gray-800", "active:bg-gray-800/90", "disabled:bg-gray-500", "disabled:hover:bg-gray-500"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black", "active:bg-black/90", "disabled:bg-gray-800"] }, { tone: "light", color: "white", className: ["text-gray-800", "hover:text-gray-900", "border-gray-100", "bg-white", "disabled:bg-gray-50/50", "disabled:hover:bg-gray-50"] }, { tone: "light", color: "blue", className: ["text-blue-500", "disabled:text-blue-400", "disabled:hover:text-blue-400", "bg-blue-100", "hover:bg-blue-200", "active:bg-blue-100", "active:text-blue-600", "hover:text-blue-800", "focus:text-blue-700", "disabled:bg-blue-50", "disabled:hover:bg-blue-50"] }, { tone: "light", color: "red", className: ["text-red-500", "disabled:text-red-400", "disabled:hover:text-red-400", "bg-red-100", "hover:bg-red-200", "active:bg-red-100", "active:text-red-600", "hover:text-red-800", "focus:text-red-700", "disabled:bg-red-50", "disabled:hover:bg-red-50"] }, { tone: "light", color: "green", className: ["text-green-500", "disabled:text-green-400", "disabled:hover:text-green-400", "bg-green-100", "hover:bg-green-200", "active:bg-green-100", "hover:text-green-600", "active:text-green-800", "focus:text-green-700", "disabled:bg-green-50", "disabled:hover:bg-green-50"] }, { tone: "light", color: "yellow", className: ["text-yellow-500", "disabled:text-yellow-400", "disabled:hover:text-yellow-400", "bg-yellow-100", "hover:bg-yellow-200", "active:bg-yellow-100", "active:text-yellow-600", "hover:text-yellow-800", "focus:text-yellow-700", "disabled:bg-yellow-50", "disabled:hover:bg-yellow-50"] }, { tone: "light", color: "purple", className: ["text-purple-500", "disabled:text-purple-400", "disabled:hover:text-purple-400", "bg-purple-100", "hover:bg-purple-200", "active:bg-purple-100", "active:text-purple-600", "hover:text-purple-800", "focus:text-purple-700", "disabled:bg-purple-50", "disabled:hover:bg-purple-50"] }, { tone: "light", color: "gray", className: ["text-gray-500", "disabled:text-gray-400", "disabled:hover:text-gray-400", "bg-gray-100", "hover:bg-gray-200", "active:bg-gray-100", "active:text-gray-600", "hover:text-gray-800", "focus:text-gray-700", "disabled:bg-gray-50", "disabled:hover:bg-gray-50"] }, { tone: "light", color: "dark", className: ["text-gray-600", "disabled:text-gray-500", "disabled:hover:text-gray-500", "bg-gray-200", "hover:bg-gray-300", "active:bg-gray-200", "active:text-gray-700", "hover:text-gray-900", "focus:text-gray-800", "disabled:bg-gray-100", "disabled:hover:bg-gray-100"] }, { tone: "light", color: "black", className: ["text-gray-700", "disabled:text-gray-600", "disabled:hover:text-gray-600", "bg-gray-300", "hover:bg-gray-400", "active:bg-gray-300", "active:text-gray-800", "hover:text-black", "focus:text-gray-900", "disabled:bg-gray-200", "disabled:hover:bg-gray-200"] }, { tone: "transparent", color: "blue", className: ["text-blue-500", "disabled:text-blue-200", "hover:text-blue-600", "active:text-blue-700"] }, { tone: "transparent", color: "red", className: ["text-red-500", "disabled:text-red-200", "hover:text-red-600", "active:text-red-700"] }, { tone: "transparent", color: "green", className: ["text-green-500", "disabled:text-green-200", "hover:text-green-600", "active:text-green-700"] }, { tone: "transparent", color: "yellow", className: ["text-yellow-400", "disabled:text-yellow-100", "hover:text-yellow-500", "active:text-yellow-600"] }, { tone: "transparent", color: "purple", className: ["text-purple-500", "disabled:text-purple-200", "hover:text-purple-600", "active:text-purple-700"] }, { tone: "transparent", color: "gray", className: ["text-gray-500", "disabled:text-gray-200", "hover:text-gray-600", "active:text-gray-700"] }, { tone: "transparent", color: "dark", className: ["text-gray-700", "disabled:text-gray-500", "hover:text-gray-800", "active:text-gray-900"] }, { tone: "transparent", color: "black", className: ["text-black", "disabled:text-gray-700"] }, { tone: "outline", color: "blue", className: ["text-blue-500", "disabled:text-blue-300", "disabled:hover:text-blue-300", "hover:text-blue-600", "active:text-blue-700", "active:border-blue-700", "border-blue-500", "disabled:border-blue-300"] }, { tone: "outline", color: "red", className: ["text-red-500", "disabled:text-red-300", "disabled:hover:text-red-300", "hover:text-red-600", "active:text-red-700", "active:border-red-700", "border-red-500", "disabled:border-red-300"] }, { tone: "outline", color: "green", className: ["text-green-500", "disabled:text-green-300", "disabled:hover:text-green-300", "hover:text-green-600", "active:text-green-700", "active:border-green-700", "border-green-500", "disabled:border-green-300"] }, { tone: "outline", color: "yellow", className: ["text-yellow-500", "disabled:text-yellow-300", "disabled:hover:text-yellow-300", "hover:text-yellow-500", "active:text-yellow-600", "active:border-yellow-600", "border-yellow-500", "disabled:border-yellow-300"] }, { tone: "outline", color: "purple", className: ["text-purple-500", "disabled:text-purple-300", "disabled:hover:text-purple-300", "hover:text-purple-600", "active:text-purple-700", "active:border-purple-700", "border-purple-500", "disabled:border-purple-300"] }, { tone: "outline", color: "gray", className: ["text-gray-500", "hover:text-gray-500", "focus:text-gray-500", "disabled:text-gray-300", "disabled:hover:text-gray-300", "hover:text-gray-600", "active:text-gray-700", "active:border-gray-400", "border-gray-200", "disabled:border-gray-300"] }, { tone: "outline", color: "dark", className: ["text-gray-700", "disabled:text-gray-300", "disabled:hover:text-gray-300", "hover:text-gray-800", "active:text-gray-900", "active:border-black", "border-gray-700", "disabled:border-gray-300"] }, { tone: "outline", color: "black", className: ["text-black", "disabled:text-gray-500", "disabled:hover:text-gray-500", "active:border-black", "border-black", "disabled:border-gray-500"] }] }), chevron: cva([], { variants: { open: { true: [], false: [] }, chevronRotation: { true: [], false: [] }, size: { xs: ["w-3", "h-3", "ml-1"], sm: ["w-4", "h-4", "ml-2"], md: ["w-4", "h-4", "ml-2", "-mr-1"], lg: ["w-5", "h-5", "ml-2", "-mr-1.5"] } }, compoundVariants: [{ chevronRotation: true, className: ["transition", "transform", "duration-300", "ease-in-out"] }, { open: true, chevronRotation: true, className: ["-rotate-180"] }] }), spinner: cva(["-ml-1", "animate-spin"], { variants: { size: { xs: ["w-3", "h-3", "mr-1.5"], sm: ["w-5", "h-5", "mr-1.5"], md: ["w-6", "h-6", "mr-2"], lg: ["w-8", "h-8", "mr-2"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Card.styles.js
var d = cva(["flex", "flex-col"], { variants: { bordered: { true: ["border"], false: [] }, color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, withDivider: { true: ["divide-y"], false: [] } }, compoundVariants: [{ color: "white", withDivider: true, className: ["divide-gray-100"] }, { color: "gray", withDivider: true, className: ["divide-gray-200"] }, { color: "slate", withDivider: true, className: ["divide-slate-200"] }, { color: "zinc", withDivider: true, className: ["divide-zinc-200"] }, { color: "white", bordered: true, className: ["border-gray-100"] }, { color: "gray", bordered: true, className: ["border-gray-200"] }, { color: "slate", bordered: true, className: ["border-slate-200"] }, { color: "zinc", bordered: true, className: ["border-zinc-200"] }] });
var s2 = cva([], { variants: { size: { sm: ["px-4", "text-sm"], base: ["px-5", "text-base"], md: ["px-6", "text-md"], lg: ["px-7", "text-lg"] }, withDivider: { true: [], false: [] } }, compoundVariants: [{ size: "sm", withDivider: true, className: ["py-3"] }, { size: "base", withDivider: true, className: ["py-4"] }, { size: "md", withDivider: true, className: ["py-5"] }, { size: "lg", withDivider: true, className: ["py-6"] }, { size: "sm", withDivider: false, className: ["py-1"] }, { size: "base", withDivider: false, className: ["py-2"] }, { size: "md", withDivider: false, className: ["py-3"] }, { size: "lg", withDivider: false, className: ["py-4"] }] });
var r4 = cva(["flex", "flex-row", "justify-between", "items-center"], { variants: { size: { sm: ["p-4", "text-sm"], base: ["p-5", "text-base"], md: ["p-6", "text-md"], lg: ["p-7", "text-lg"] }, radius: { none: ["rounded-t-none"], sm: ["rounded-t-sm"], base: ["rounded-t"], md: ["rounded-t-md"], lg: ["rounded-t-lg"] } } });
var a3 = { base: d, body: s2, footer: cva(["flex", "items-center"], { variants: { size: { sm: ["p-4", "text-sm"], base: ["p-5", "text-base"], md: ["p-6", "text-md"], lg: ["p-7", "text-lg"] }, radius: { none: ["rounded-b-none"], sm: ["rounded-b-sm"], base: ["rounded-b"], md: ["rounded-b-md"], lg: ["rounded-b-lg"] } } }), header: r4, image: cva(["flex", "flex-row", "items-center", "justify-center"], { variants: { radius: { none: ["rounded-t-none"], sm: ["rounded-t-sm"], base: ["rounded-t"], md: ["rounded-t-md"], lg: ["rounded-t-lg"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Calendar.styles.js
var d2 = cva(["flex", "flex-col", "text-gray-700", "isolate"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"], xl: ["text-lg", "md:text-xl"] } } });
var r5 = cva(["flex", "items-center", "justify-between", "mb-2"]);
var a4 = cva(["flex", "basis-1/8", "items-center", "justify-center", "bg-white", "disabled:bg-gray-50", "disabled:cursor-not-allowed", "disabled:text-gray-400", "hover:bg-gray-50"], { variants: { size: { xs: ["w-6", "h-6"], sm: ["w-7", "h-7"], md: ["w-8", "h-8"], lg: ["w-10", "h-10"], xl: ["w-10", "h-10", "md:w-12", "md:h-12"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, bordered: { true: ["border", "border-gray-200"], false: [] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, borderStyle: { dashed: [], solid: [] } }, compoundVariants: [{ bordered: true, borderStyle: "dashed", className: ["border-dashed"] }, { bordered: true, borderStyle: "solid", className: ["border-solid"] }] });
var s3 = cva(["flex", "gap-1", "basis-6/8", "items-center", "justify-center", "font-medium"]);
var o4 = cva(["flex", "items-center", "justify-between", "p-1", "text-gray-500"]);
var l2 = cva(["flex", "flex-col", "overflow-hidden", "bg-white"], { variants: { bordered: { true: ["border", "border-gray-200"], false: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, horizontalBorders: { true: ["divide-y", "divide-gray-200"], false: [] }, borderStyle: { dashed: [], solid: [] } }, compoundVariants: [{ bordered: true, borderStyle: "dashed", className: ["border-dashed"] }, { bordered: true, borderStyle: "solid", className: ["border-solid"] }, { horizontalBorders: true, borderStyle: "dashed", className: ["divide-dashed"] }, { horizontalBorders: true, borderStyle: "solid", className: ["divide-solid"] }] });
var t6 = cva(["flex-1", "flex", "items-center", "justify-center"]);
var n5 = cva(["flex-1", "relative", "flex", "items-center", "justify-center", "disabled:cursor-not-allowed"], { variants: { size: { xs: ["h-8"], sm: ["h-10"], md: ["h-11"], lg: ["h-12"], xl: ["h-12", "md:h-14"] }, color: { undefined: [], white: [], blue: ["bg-blue-50", "enabled:hover:bg-blue-100"], red: ["bg-red-50", "enabled:hover:bg-red-100"], green: ["bg-green-100", "enabled:hover:bg-green-200"], yellow: ["bg-yellow-50", "enabled:hover:bg-yellow-100"], purple: ["bg-purple-50", "enabled:hover:bg-purple-100"] }, isToday: { true: ["font-bold"], false: [] }, isSameDay: { true: [], false: [] }, isSameMonth: { true: [], false: ["bg-gray-50"] } }, compoundVariants: [{ color: ["undefined", "white"], className: ["disabled:text-gray-400", "disabled:bg-gray-50", "enabled:hover:bg-gray-100"] }] });
var i2 = cva(["absolute", "rounded-full", "bg-transparent", "border", "border-gray-600", "shadow", "z-10"], { variants: { size: { xs: ["w-6", "h-6"], sm: ["w-7", "h-7"], md: ["w-8", "h-8"], lg: ["w-9", "h-9"], xl: ["w-9", "h-9", "md:w-11", "md:h-11"] } } });
var b = cva(["z-20"]);
var h = { base: d2, nav: r5, navButton: a4, navMonth: s3, head: o4, calendar: l2, weekDay: t6, calendarCell: n5, calendarRow: cva(["flex", "w-full"], { variants: { verticalBorders: { true: ["divide-x", "divide-gray-200"], false: [] }, borderStyle: { dashed: [], solid: [] } }, compoundVariants: [{ verticalBorders: true, borderStyle: "dashed", className: ["divide-dashed"] }, { verticalBorders: true, borderStyle: "solid", className: ["divide-solid"] }] }), thumb: i2, dayLabel: b };

// node_modules/@rewind-ui/core/dist/theme/styles/Checkbox.styles.js
var t7 = cva(["cursor-pointer", "form-checkbox", "self-start"], { variants: { color: { blue: ["text-blue-500", "hover:text-blue-600", "focus:text-blue-600", "focus:ring-blue-100", "active:text-blue-700", "disabled:text-blue-300", "disabled:hover:text-blue-300"], red: ["text-red-500", "hover:text-red-600", "focus:text-red-600", "focus:ring-red-100", "active:text-red-700", "disabled:text-red-300", "disabled:hover:text-red-300"], green: ["text-green-500", "hover:text-green-600", "focus:text-green-600", "focus:ring-green-100", "active:text-green-700", "disabled:text-green-300", "disabled:hover:text-green-300"], yellow: ["text-yellow-400", "hover:text-yellow-500", "focus:text-yellow-500", "focus:ring-yellow-100", "active:text-yellow-600", "disabled:text-yellow-200", "disabled:hover:text-yellow-200"], purple: ["text-purple-500", "hover:text-purple-600", "focus:text-purple-600", "focus:ring-purple-100", "active:text-purple-700", "disabled:text-purple-300", "disabled:hover:text-purple-300"], gray: ["text-gray-200", "hover:text-gray-300", "focus:text-gray-300", "focus:ring-gray-100", "active:text-gray-400", "disabled:text-gray-100", "disabled:hover:text-gray-100"], dark: ["text-gray-700", "hover:text-gray-800", "focus:text-gray-800", "focus:ring-gray-300", "active:text-gray-900", "disabled:text-gray-500", "disabled:hover:text-gray-500"], black: ["text-gray-800", "hover:text-gray-900", "focus:text-gray-900", "focus:ring-gray-400", "active:text-black", "disabled:text-gray-600", "disabled:hover:text-gray-600"] }, tone: { solid: ["bg-white", "hover:bg-gray-50", "active:bg-gray-100", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"], light: ["bg-gray-100", "hover:bg-gray-200", "active:bg-gray-300", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"] }, validation: { valid: ["outline-0", "border-gray-300"], invalid: ["outline-0", "border-red-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-6", "h-6"], xl: ["w-7", "h-7"] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" } });
var r6 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5", "leading-4"], md: ["text-base", "pl-1.5", "leading-5"], lg: ["text-lg", "pl-2", "leading-6"], xl: ["text-xl", "pl-2", "leading-7"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var l3 = { base: t7, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), label: r6 };

// node_modules/@rewind-ui/core/dist/theme/styles/Combobox.styles.js
var a5 = cva(["w-full", "flex", "items-center", "transition-colors", "duration-100", "ease-in-out", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "min-h-[1.5rem]"], sm: ["text-sm", "min-h-[2rem]"], md: ["text-base", "min-h-[2.5rem]"], lg: ["text-lg", "min-h-[3rem]"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"] }, hasLeftIcon: { true: [], false: [] }, hasRightIcon: { true: [], false: [] }, hasLeftElement: { true: ["rounded-l-none"], false: [] }, hasRightElement: { true: ["rounded-r-none"], false: [] }, validation: { none: [], invalid: ["border-red-500", "focus-within:border-red-500"], valid: ["border-green-500", "focus-within:border-green-500"], warning: ["border-yellow-400", "focus-within:border-yellow-400"] }, withRing: { true: ["focus-within:ring-2", "focus-within:ring-offset-1"], false: ["focus-within:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: ["read-only:cursor-default"] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus-within:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus-within:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus-within:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus-within:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus-within:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus-within:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus-within:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus-within:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-within:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-within:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-within:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-within:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-within:border-black"] }, { hasLeftIcon: false, size: "xs", className: ["px-2"] }, { hasLeftIcon: false, size: "sm", className: ["px-3"] }, { hasLeftIcon: false, size: "md", className: ["px-3"] }, { hasLeftIcon: false, size: "lg", className: ["px-4"] }, { hasLeftIcon: true, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, hasRightIcon: false, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "lg", className: ["pl-12", "pr-4"] }, { hasLeftIcon: false, hasRightIcon: true, size: "xs", className: ["pr-7", "pl-2"] }, { hasLeftIcon: false, hasRightIcon: true, size: "sm", className: ["pr-8", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "md", className: ["pr-11", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "lg", className: ["pr-12", "pl-4"] }, { hasLeftIcon: true, hasRightIcon: true, size: "xs", className: ["px-7"] }, { hasLeftIcon: true, hasRightIcon: true, size: "sm", className: ["px-8"] }, { hasLeftIcon: true, hasRightIcon: true, size: "md", className: ["px-11"] }, { hasLeftIcon: true, hasRightIcon: true, size: "lg", className: ["px-12"] }] });
var s4 = cva(["outline-none", "bg-transparent", "w-full", "min-w-[1rem]", "h-full", "flex-1"], { variants: { size: { xs: ["min-h-[1.125rem]"], sm: ["min-h-[1.375rem]"], md: ["min-h-[1.625rem]"], lg: ["min-h-[1.875rem]"] } } });
var o5 = cva(["relative", "w-full", "flex", "items-center"], { variants: { disabled: { true: ["cursor-not-allowed"], false: [] } } });
var t8 = cva(["w-full", "flex", "flex-wrap", "items-center", "flex-start", "mr-2"], { variants: { size: { xs: ["gap-0.5", "py-0.5"], sm: ["gap-1", "py-1"], md: ["gap-1.5", "py-1.5"], lg: ["gap-1.5", "py-1.5"] } } });
var l4 = cva(["flex", "items-center", "h-full", "mr-1"], { variants: { disabled: { true: ["cursor-not-allowed"], false: ["cursor-pointer"] }, color: { blue: ["focus-visible:outline-blue-100"], purple: ["focus-visible:outline-purple-100"], gray: ["focus-visible:outline-gray-100"], dark: ["focus-visible:outline-gray-200"], black: ["focus-visible:outline-gray-300"] } } });
var r7 = cva(["text-xs", "text-gray-500"]);
var n6 = cva(["flex", "items-center", "rounded", "border", "border-gray-200", "leading-none", "shadow-sm"], { variants: { disabled: { true: [], false: ["text-gray-600"] }, tone: { light: [], solid: [], transparent: [] }, size: { xs: ["text-xs", "px-1", "py-0.5", "min-h-[1.125rem]"], sm: ["text-sm", "px-1.5", "py-1", "min-h-[1.375rem]"], md: ["text-sm", "px-2", "py-1", "min-h-[1.625rem]"], lg: ["text-base", "px-2.5", "py-1", "min-h-[1.875rem]"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] } }, compoundVariants: [{ disabled: true, tone: ["light", "transparent"], className: ["bg-gray-100", "text-gray-500"] }, { disabled: false, tone: ["light", "transparent"], className: ["bg-gray-50"] }, { disabled: true, tone: "solid", className: ["bg-gray-50", "text-gray-500"] }, { disabled: false, tone: "solid", className: ["bg-white"] }] });
var i3 = cva(["w-full", "flex", "items-center"], { variants: { size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-sm", "px-2", "py-1.5"], lg: ["text-base", "px-2", "py-2"] } } });
var d3 = cva(["flex", "flex-col", "border", "border-gray-200", "snap-y", "isolation-auto", "z-[70]", "bg-white", "overflow-x-clip", "overflow-y-auto", "scrollbar", "scrollbar-thin", "scrollbar-rounded-lg", "scrollbar-thumb-gray-200", "scrollbar-track-gray-100"], { variants: { open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "hidden"] }, size: { xs: [], sm: [], md: [], lg: [] }, mode: { tight: ["p-0"], spacey: ["space-y-1"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"] } }, compoundVariants: [{ mode: "spacey", size: ["xs", "sm"], className: ["p-1"] }, { mode: "spacey", size: ["md", "lg"], className: ["p-1.5"] }] });
var c = cva([], { variants: { tone: { light: ["fill-gray-600"], solid: ["fill-gray-600"], transparent: ["fill-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } });
var g = cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } });
var m = cva(["absolute", "right-0", "z-20", "pointer-events-auto", "h-full", "flex", "items-center", "rounded", "enabled:cursor-pointer", "disabled:cursor-not-allowed", "focus:outline-none", "focus:ring", "focus:ring-offset-1"], { variants: { color: { blue: ["focus-visible:ring-blue-100"], purple: ["focus-visible:ring-purple-100"], gray: ["focus-visible:ring-gray-100"], dark: ["focus-visible:ring-gray-200"], black: ["focus-visible:ring-gray-300"] }, size: { xs: ["px-2"], sm: ["px-2.5"], md: ["px-3"], lg: ["px-3"] } } });
var p = cva(["antialiased", "snap-always", "snap-mandatory", "snap-start", "[scroll-margin-top:6px]", "border-dashed", "border-b", "border-b-gray-200", "mb-1", "text-gray-400"], { variants: { hidden: { true: ["hidden"], false: [] }, mode: { spacey: [], tight: [] }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" }, size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-base", "px-2", "py-2"], lg: ["text-lg", "px-2", "py-2"] } } });
var u = cva(["antialiased", "cursor-pointer", "disabled:cursor-not-allowed", "snap-always", "snap-mandatory", "snap-start", "[scroll-margin-top:6px]", "w-full", "flex", "items-center", "justify-between", "disabled:text-gray-300", "focus-visible:outline-none", "hover:ring-0", "focus-visible:ring-0"], { variants: { hidden: { true: ["hidden"], false: [] }, optionColor: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, mode: { spacey: [], tight: [] }, radius: { none: [], sm: [], base: [], md: [], lg: [] }, size: { xs: ["text-xs", "px-2", "py-1"], sm: ["text-sm", "px-2", "py-1"], md: ["text-sm", "px-2", "py-1.5"], lg: ["text-base", "px-2", "py-2"] }, selected: { true: [], false: ["focus-within:bg-gray-100", "focus:bg-gray-100", "focus-visible:bg-gray-100", "hover:bg-gray-100"] } }, compoundVariants: [{ mode: "spacey", radius: "none", className: ["rounded-none"] }, { mode: "spacey", radius: "sm", className: ["rounded-sm"] }, { mode: "spacey", radius: "base", className: ["rounded"] }, { mode: "spacey", radius: "md", className: ["rounded-md"] }, { mode: "spacey", radius: "lg", className: ["rounded-lg"] }, { selected: true, optionColor: "blue", className: ["bg-blue-500", "text-white"] }, { selected: true, optionColor: "red", className: ["bg-red-500", "text-white"] }, { selected: true, optionColor: "green", className: ["bg-green-500", "text-white"] }, { selected: true, optionColor: "yellow", className: ["bg-yellow-400", "text-white"] }, { selected: true, optionColor: "purple", className: ["bg-purple-500", "text-white"] }, { selected: true, optionColor: "gray", className: ["bg-gray-200", "text-gray-700"] }, { selected: true, optionColor: "dark", className: ["bg-gray-500", "text-white"] }, { selected: true, optionColor: "black", className: ["bg-black", "text-white"] }] });
var h2 = cva([], { variants: { size: { xs: ["w-4", "h-4"], sm: ["w-4", "h-4"], md: ["w-6", "h-6"], lg: ["w-6", "h-6"] } } });
var b2 = cva(["grid", "grid-flow-col", "justify-items-start", "gap-x-2", "mr-5"]);
var f = cva(["flex", "flex-col", "text-left"]);
var x = cva([], { variants: { disabled: { true: [], false: [] }, selected: { true: [], false: [] } }, compoundVariants: [{ disabled: false, selected: false, className: ["text-gray-700"] }] });
var y = { base: a5, input: s4, group: p, icon: c, leftIconWrapper: g, list: d3, noResults: i3, rightIconWrapper: m, wrapper: o5, tag: n6, tagWrapper: t8, tagButton: l4, tagButtonIcon: r7 };
var w = { button: u, description: cva(["whitespace-normal"], { variants: { disabled: { true: [], false: [] }, selected: { true: [], false: [] } }, compoundVariants: [{ disabled: false, selected: false, className: ["text-gray-500"] }] }), icon: c, infoWrapper: f, label: x, optionIcon: h2, optionWrapper: b2 };

// node_modules/@rewind-ui/core/dist/theme/styles/Drawer.styles.js
var t9 = { base: cva(["fixed", "flex", "overflow-auto", "justify-center", "z-[60]", "bg-white"], { variants: { shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, position: { top: ["w-full", "top-0"], bottom: ["w-full", "bottom-0"], left: ["h-full", "left-0", "top-0"], right: ["h-full", "right-0", "top-0"] } }, compoundVariants: [] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Dropdown.styles.js
var r8 = cva(["relative", "flex", "flex-col", "gap-y-1", "max-w-prose", "transition", "duration-50", "ease-in-out", "border", "z-40"], { variants: { open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "invisible"] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, mode: { tight: ["p-0"], spacey: [] }, size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, color: { white: ["bg-white", "text-gray-800", "border-gray-200"], gray: ["bg-gray-50", "text-gray-800", "border-gray-300"], slate: ["bg-slate-50", "text-slate-800", "border-slate-300"], zinc: ["bg-zinc-50", "text-zinc-800", "border-zinc-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ mode: "spacey", size: ["xs", "sm"], className: ["p-1"] }, { mode: "spacey", size: ["md", "lg"], className: ["p-1.5"] }, { open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-2"] }, { open: false, arrowSide: "right", className: ["translate-x-2"] }, { open: false, arrowSide: "top", className: ["-translate-y-2"] }, { open: false, arrowSide: "bottom", className: ["translate-y-2"] }] });
var t10 = { arrow: cva(["absolute", "w-2", "h-2", "bg-inherit", "rotate-45", "border", "box-border", "z-0"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-300"], slate: ["border-slate-300"], zinc: ["border-zinc-300"] }, arrowSide: { left: ["border-r-0", "border-t-0"], right: ["border-l-0", "border-b-0"], top: ["border-r-0", "border-b-0"], bottom: ["border-l-0", "border-t-0"] } } }), base: r8, content: cva(["flex", "flex-col"], { variants: { size: { xs: ["space-y-0.5"], sm: ["space-y-0.5"], md: ["space-y-1"], lg: ["space-y-1"] } } }), divider: cva([], { variants: { color: { gray: "border-gray-200", slate: "border-slate-200", dark: "border-gray-400" } } }), item: cva(["z-10", "flex", "items-center", "justify-start", "text-gray-900", "disabled:text-gray-300", "hover:disabled:text-gray-300", "hover:disabled:bg-gray-50", "disabled:cursor-not-allowed", "focus-visible:outline-none", "hover:ring-0", "focus-visible:ring-2", "focus-visible:ring-offset-0"], { variants: { tone: { solid: [], light: [] }, mode: { spacey: ["rounded"], tight: [] }, color: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "py-1", "px-1"], sm: ["text-sm", "py-1.5", "px-2"], md: ["text-base", "py-1.5", "px-2"], lg: ["text-lg", "py-1.5", "px-2"] }, radius: { none: [], sm: [], base: [], md: [], lg: [] } }, compoundVariants: [{ mode: "tight", radius: "sm", className: ["last:rounded-b-sm"] }, { mode: "tight", radius: "base", className: ["last:rounded-b"] }, { mode: "tight", radius: "md", className: ["last:rounded-b-md"] }, { mode: "tight", radius: "lg", className: ["last:rounded-b-lg"] }, { tone: "solid", color: "blue", className: ["focus-visible:ring-blue-500", "hover:bg-blue-500", "active:bg-blue-600", "hover:text-white"] }, { tone: "light", color: "blue", className: ["focus-visible:ring-blue-100", "hover:bg-blue-100", "active:bg-blue-200", "hover:text-blue-800"] }, { tone: "solid", color: "red", className: ["focus-visible:ring-red-500", "hover:bg-red-500", "active:bg-red-600", "hover:text-white"] }, { tone: "light", color: "red", className: ["focus-visible:ring-red-100", "hover:bg-red-100", "active:bg-red-200", "hover:text-red-800"] }, { tone: "solid", color: "green", className: ["focus-visible:ring-green-500", "hover:bg-green-500", "active:bg-green-600", "hover:text-white"] }, { tone: "light", color: "green", className: ["focus-visible:ring-green-100", "hover:bg-green-100", "active:bg-green-200", "hover:text-green-800"] }, { tone: "solid", color: "yellow", className: ["focus-visible:ring-yellow-400", "hover:bg-yellow-400", "active:bg-yellow-500", "hover:text-white"] }, { tone: "light", color: "yellow", className: ["focus-visible:ring-yellow-100", "hover:bg-yellow-100", "active:bg-yellow-200", "hover:text-yellow-800"] }, { tone: "solid", color: "purple", className: ["focus-visible:ring-purple-500", "hover:bg-purple-500", "active:bg-purple-600", "hover:text-white"] }, { tone: "light", color: "purple", className: ["focus-visible:ring-purple-100", "hover:bg-purple-100", "active:bg-purple-200", "hover:text-purple-800"] }, { tone: "solid", color: "gray", className: ["focus-visible:ring-gray-200", "hover:bg-gray-200", "active:bg-gray-300", "hover:text-gray-700"] }, { tone: "light", color: "gray", className: ["focus-visible:ring-gray-100", "hover:bg-gray-100", "active:bg-gray-200", "hover:text-gray-800"] }, { tone: "solid", color: "dark", className: ["focus-visible:ring-gray-500", "hover:bg-gray-500", "active:bg-gray-600", "hover:text-white"] }, { tone: "light", color: "dark", className: ["focus-visible:ring-gray-300", "hover:bg-gray-300", "active:bg-gray-400", "hover:text-gray-800"] }, { tone: "solid", color: "black", className: ["focus-visible:ring-gray-900", "hover:bg-gray-900", "active:bg-black", "hover:text-white"] }, { tone: "light", color: "black", className: ["focus-visible:ring-gray-700", "hover:bg-gray-700", "active:bg-gray-800", "hover:text-white"] }] }), label: cva([], { variants: { mode: { spacey: [], tight: [] }, color: { blue: "text-blue-500", red: "text-red-500", green: "text-green-500", yellow: "text-yellow-400", purple: "text-purple-500", gray: "text-gray-400", dark: "text-gray-800", black: "text-black" }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" }, size: { xs: ["text-xs"], sm: ["text-sm", "py-1"], md: ["text-base", "py-1"], lg: ["text-lg", "py-1"] } }, compoundVariants: [{ mode: "tight", size: "xs", className: ["px-1.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "xs", className: ["px-1", "py-0.5"] }, { mode: "tight", size: "sm", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "sm", className: ["px-2.5", "py-1"] }, { mode: "tight", size: "md", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "md", className: ["px-2.5", "py-1"] }, { mode: "tight", size: "lg", className: ["px-2.5", "pt-2", "pb-1"] }, { mode: "spacey", size: "lg", className: ["px-2.5", "py-1"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/FormControl.styles.js
var e5 = { base: cva(["flex", "flex-col", "space-y-1"]), label: cva(["text-gray-700", "font-medium", "w-fit"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-sm"], lg: ["text-base"] }, required: { true: ["after:content-['*']", "after:ml-0.5", "after:text-red-500"], false: [] } } }), text: cva([], { variants: { size: { xs: ["text-xs"], sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, validation: { none: ["text-gray-500"], invalid: ["text-red-500"], valid: ["text-green-500"], warning: ["text-yellow-400"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Image.styles.js
var o6 = { base: cva([], { variants: { fit: { contain: "object-contain", cover: "object-cover", fill: "object-fill", none: "object-none", "scale-down": "object-scale-down" }, radius: { none: "", sm: "rounded-sm", base: "rounded", md: "rounded-md", lg: "rounded-lg", xl: "rounded-xl", "2xl": "rounded-2xl", "3xl": "rounded-3xl", full: "rounded-full" } } }), caption: cva(["w-full", "text-base", "text-center", "p-2", "absolute", "bottom-0", "backdrop-blur-sm"], { variants: { mode: { light: ["bg-gray-200/75", "text-gray-900"], dark: ["bg-gray-800/50", "text-gray-50"] } } }), wrapper: cva(["relative"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Input.styles.js
var a6 = { base: cva(["w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "h-6"], sm: ["text-sm", "h-8"], md: ["text-base", "h-10"], lg: ["text-lg", "h-12"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, hasLeftIcon: { true: [], false: [] }, hasRightIcon: { true: [], false: [] }, type: { "datetime-local": [], color: [], date: [], email: [], file: ["pl-0", "hover:cursor-pointer", "file:hover:cursor-pointer", "file:font-medium", "file:mr-4", "file:px-4", "file:border-0"], number: [], password: [], range: [], search: [], text: [], time: [], tel: [] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, loading: { true: [], false: [] }, disabled: { true: [], false: [] } }, compoundVariants: [{ disabled: true, loading: true, className: ["cursor-progress"] }, { disabled: true, loading: false, className: ["cursor-not-allowed"] }, { validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { type: "file", tone: ["light", "solid"], className: ["file:bg-gray-100", "file:hover:bg-gray-200", "file:active:bg-gray-300", "file:text-gray-800"] }, { type: "file", tone: "transparent", className: ["file:bg-gray-50", "file:hover:bg-gray-100", "file:active:bg-gray-200", "file:text-gray-800"] }, { type: "file", size: "xs", className: ["file:text-xs"] }, { type: "file", size: "sm", className: ["file:text-sm"] }, { type: "file", size: "md", className: ["file:text-base"] }, { type: "file", size: "lg", className: ["file:text-lg"] }, { type: "file", size: "xs", className: ["file:h-6", "file:text-xs"] }, { type: "file", size: "sm", className: ["file:h-8"] }, { type: "file", size: "md", className: ["file:h-10"] }, { type: "file", size: "lg", className: ["file:h-12"] }, { type: "color", size: "xs", className: ["py-1"] }, { type: "color", size: "sm", className: ["py-2"] }, { type: "color", size: "md", className: ["py-3"] }, { type: "color", size: "lg", className: ["py-4"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }, { hasLeftIcon: false, hasRightIcon: false, size: "xs", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["px-2"] }, { hasLeftIcon: false, hasRightIcon: false, size: "sm", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["px-3"] }, { hasLeftIcon: false, hasRightIcon: false, size: "md", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["px-3"] }, { hasLeftIcon: false, hasRightIcon: false, size: "lg", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["px-4"] }, { hasLeftIcon: true, hasRightIcon: false, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, hasRightIcon: false, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, hasRightIcon: false, size: "lg", className: ["pl-12", "pr-4"] }, { hasLeftIcon: false, hasRightIcon: true, size: "xs", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["pr-7", "pl-2"] }, { hasLeftIcon: false, hasRightIcon: true, size: "sm", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["pr-8", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "md", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["pr-11", "pl-3"] }, { hasLeftIcon: false, hasRightIcon: true, size: "lg", type: ["text", "number", "password", "date", "time", "email", "search", "range", "datetime-local", "color", "tel"], className: ["pr-12", "pl-4"] }, { hasLeftIcon: true, hasRightIcon: true, size: "xs", className: ["px-7"] }, { hasLeftIcon: true, hasRightIcon: true, size: "sm", className: ["px-8"] }, { hasLeftIcon: true, hasRightIcon: true, size: "md", className: ["px-11"] }, { hasLeftIcon: true, hasRightIcon: true, size: "lg", className: ["px-12"] }] }), wrapper: cva(["relative", "flex", "items-center", "w-full"]), icon: cva([], { variants: { tone: { light: ["text-gray-600"], solid: ["text-gray-600"], transparent: ["text-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } }), leftIconWrapper: cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } }), rightIconWrapper: cva(["absolute", "right-0", "z-20"], { variants: { size: { xs: ["pr-2"], sm: ["pr-2.5"], md: ["pr-3"], lg: ["pr-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/InputGroup.styles.js
var r9 = { base: cva(["flex", "items-stretch", "group"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } } }), text: cva(["flex", "items-center", "justify-center", "data-[has-left-element=true]:border-l-0", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:border-r-0", "data-[has-right-element=true]:rounded-r-none"], { variants: { size: { xs: ["text-xs", "px-2"], sm: ["text-sm", "px-3"], md: ["text-base", "px-3"], lg: ["text-lg", "px-4"] }, tone: { light: ["border", "border-gray-300", "bg-gray-50", "text-gray-800"], solid: ["border", "border-gray-200", "bg-gray-100", "text-gray-800"], transparent: ["border", "border-transparent", "text-gray-800"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Modal.styles.js
var o7 = { base: cva(["fixed", "flex", "overflow-auto", "justify-center", "z-[60]"], { variants: { mode: { fullscreen: ["inset-0", "mt-0"], dialog: ["mx-2", "max-h-[calc(100%-6rem)]"] }, color: { white: "bg-white", gray: "bg-gray-50", slate: "bg-slate-50", zinc: "bg-zinc-50" }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, size: { auto: [], sm: [], md: [], lg: [], xl: [], screen: [] }, position: { top: [], bottom: [], center: [] } }, compoundVariants: [{ position: "top", mode: "dialog", className: ["mt-12", "top-0"] }, { position: "bottom", mode: "dialog", className: ["mb-12", "top-auto", "bottom-0"] }, { position: "center", mode: "dialog", className: ["top-1/2"] }, { size: "auto", mode: "dialog", className: ["w-auto"] }, { size: "sm", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]"] }, { size: "md", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]"] }, { size: "lg", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]", "lg:w-[50rem]"] }, { size: "xl", mode: "dialog", className: ["w-[calc(100vw-6rem)]", "sm:w-[18.75rem]", "md:w-[31.25rem]", "lg:w-[50rem]", "xl:w-[71.25rem]"] }, { size: "screen", mode: "dialog", className: ["w-[calc(100vw-6rem)]"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Overlay.styles.js
var o8 = { base: cva(["fixed", "inset-0", "overflow-hidden", "z-[55]", "transition-opacity", "duration-50", "ease-in-out"], { variants: { opacity: { 25: [], 50: [], 75: [] }, open: { true: ["opacity-100", "visible"], false: ["opacity-0", "invisible"] }, color: { white: [], gray: [], dark: [] }, blur: { none: ["backdrop-blur-none"], sm: ["backdrop-blur-sm"], base: ["backdrop-blur"], md: ["backdrop-blur-md"], lg: ["backdrop-blur-lg"], xl: ["backdrop-blur-xl"] } }, compoundVariants: [{ color: "white", opacity: "25", className: ["bg-white/25"] }, { color: "white", opacity: "50", className: ["bg-white/50"] }, { color: "white", opacity: "75", className: ["bg-white/75"] }, { color: "gray", opacity: "25", className: ["bg-gray-500/25"] }, { color: "gray", opacity: "50", className: ["bg-gray-500/50"] }, { color: "gray", opacity: "75", className: ["bg-gray-500/75"] }, { color: "dark", opacity: "25", className: ["bg-gray-900/25"] }, { color: "dark", opacity: "50", className: ["bg-gray-900/50"] }, { color: "dark", opacity: "75", className: ["bg-gray-900/75"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Popover.styles.js
var e6 = cva(["relative", "max-w-prose", "text-center", "transition", "duration-50", "ease-in-out", "border", "z-50"], { variants: { open: { true: ["opacity-100"], false: ["opacity-0"] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, size: { tight: ["p-0"], xs: ["text-xs", "py-1", "px-2"], sm: ["text-sm", "py-1", "px-2"], md: ["text-sm", "py-2", "px-3"], lg: ["text-base", "py-2", "px-3"] }, color: { white: ["bg-white", "text-gray-800", "border-gray-200"], gray: ["bg-gray-50", "text-gray-800", "border-gray-300"], slate: ["bg-slate-50", "text-slate-800", "border-slate-300"], zinc: ["bg-zinc-50", "text-zinc-800", "border-zinc-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-1"] }, { open: false, arrowSide: "right", className: ["translate-x-1"] }, { open: false, arrowSide: "top", className: ["-translate-y-1"] }, { open: false, arrowSide: "bottom", className: ["translate-y-1"] }] });
var t11 = { arrow: cva(["absolute", "w-2", "h-2", "bg-inherit", "rotate-45", "border", "box-border"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-300"], slate: ["border-slate-300"], zinc: ["border-zinc-300"] }, arrowSide: { left: ["border-r-0", "border-t-0"], right: ["border-l-0", "border-b-0"], top: ["border-r-0", "border-b-0"], bottom: ["border-l-0", "border-t-0"] } } }), base: e6 };

// node_modules/@rewind-ui/core/dist/theme/styles/Progress.styles.js
var t12 = cva(["flex", "flex-col", "w-full"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] } } });
var s5 = cva(["bg-gray-100", "overflow-hidden", "flex", "items-center", "shadow-gray-200"], { variants: { size: { xs: ["h-1", "text-xs"], sm: ["h-2", "text-xs"], md: ["h-4", "text-sm"], lg: ["h-5", "text-base"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] } } });
var r10 = cva(["relative", "flex", "items-center", "h-full", "justify-center", "transition-[width]", "duration-300"], { variants: { color: { white: ["bg-white", "text-gray-800"], blue: ["bg-blue-500"], red: ["bg-red-500"], green: ["bg-green-500"], yellow: ["bg-yellow-500"], purple: ["bg-purple-500"], gray: ["bg-gray-500"], dark: ["bg-gray-800"], black: ["bg-black"] } }, compoundVariants: [{ color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["text-white"] }] });
var a7 = cva(["flex", "justify-between", "text-gray-800"], { variants: { size: { xs: ["text-xs"], sm: ["text-sm"], md: ["text-sm"], lg: ["text-base"] } } });
var l5 = { base: s5, bar: r10, description: cva(["text-gray-600"], { variants: { size: { xs: ["text-xs"], sm: ["text-xs"], md: ["text-sm"], lg: ["text-sm"] } } }), label: a7, wrapper: t12, stripe: cva([], { variants: { size: { xs: ["0.5rem 0.5rem"], sm: ["1rem 1rem"], md: ["2rem 2rem"], lg: ["2.5rem 2.5rem"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Radio.styles.js
var t13 = cva(["cursor-pointer", "form-radio", "self-start"], { variants: { color: { blue: ["text-blue-500", "hover:text-blue-600", "focus:text-blue-600", "focus:ring-blue-100", "active:text-blue-700", "disabled:text-blue-300", "disabled:hover:text-blue-300"], red: ["text-red-500", "hover:text-red-600", "focus:text-red-600", "focus:ring-red-100", "active:text-red-700", "disabled:text-red-300", "disabled:hover:text-red-300"], green: ["text-green-500", "hover:text-green-600", "focus:text-green-600", "focus:ring-green-100", "active:text-green-700", "disabled:text-green-300", "disabled:hover:text-green-300"], yellow: ["text-yellow-400", "hover:text-yellow-500", "focus:text-yellow-500", "focus:ring-yellow-100", "active:text-yellow-600", "disabled:text-yellow-200", "disabled:hover:text-yellow-200"], purple: ["text-purple-500", "hover:text-purple-600", "focus:text-purple-600", "focus:ring-purple-100", "active:text-purple-700", "disabled:text-purple-300", "disabled:hover:text-purple-300"], gray: ["text-gray-200", "hover:text-gray-300", "focus:text-gray-300", "focus:ring-gray-100", "active:text-gray-400", "disabled:text-gray-100", "disabled:hover:text-gray-100"], dark: ["text-gray-700", "hover:text-gray-800", "focus:text-gray-800", "focus:ring-gray-200", "active:text-gray-900", "disabled:text-gray-500", "disabled:hover:text-gray-500"], black: ["text-gray-800", "hover:text-gray-900", "focus:text-gray-900", "focus:ring-gray-400", "active:text-black", "disabled:text-gray-600", "disabled:hover:text-gray-600"] }, tone: { solid: ["bg-white", "hover:bg-gray-50", "active:bg-gray-100", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"], light: ["bg-gray-100", "hover:bg-gray-200", "active:bg-gray-300", "focus:outline-0", "focus:outline-transparent", "invalid:border-red-300"] }, validation: { valid: ["outline-0", "border-gray-300"], invalid: ["outline-0", "border-red-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, size: { sm: ["w-4", "h-4"], md: ["w-5", "h-5"], lg: ["w-6", "h-6"], xl: ["w-7", "h-7"] }, withRing: { true: ["focus:ring", "focus:ring-offset-1"], false: ["focus:ring-0"] } }, defaultVariants: { tone: "solid", color: "blue" } });
var r11 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5", "leading-4"], md: ["text-base", "pl-1.5", "leading-5"], lg: ["text-lg", "pl-2", "leading-6"], xl: ["text-xl", "pl-2", "leading-7"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var l6 = { base: t13, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), label: r11, group: cva(["flex"], { variants: { orientation: { vertical: ["flex-col", "space-y-1.5"], horizontal: ["flex-row", "space-x-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Ribbon.styles.js
var e7 = { base: cva(["flex", "items-center", "text-center", "absolute"], { variants: { clipped: { true: ["overflow-hidden"], false: [] }, tone: { solid: [], light: [], glossy: ["bg-gradient-to-r"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, position: { left: ["left-0", "top-auto", "transform", "-translate-x-1"], right: ["right-0", "top-auto", "transform", "translate-x-1"], "top-left": ["top-0", "left-0", "transform", "translate-x-4", "-translate-y-1"], "top-right": ["top-0", "right-0", "transform", "-translate-x-4", "-translate-y-1"] }, size: { sm: ["text-sm", "px-1.5", "h-7"], md: ["text-sm", "px-2", "h-8"], lg: ["text-base", "px-2.5", "h-9"] }, radius: { none: ["rounded-none"], sm: [], base: [], md: [], lg: [] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: ["shadow-neutral-300"], white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: ["solid", "glossy"], shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: ["solid", "glossy"], shadowColor: "blue", className: ["shadow-blue-500/50", "hover:shadow-blue-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "red", className: ["shadow-red-500/50 hover:shadow-red-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "green", className: ["shadow-green-500/50 hover:shadow-green-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "yellow", className: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "purple", className: ["shadow-purple-500/50 hover:shadow-purple-500/60"] }, { tone: ["solid", "glossy"], shadowColor: "gray", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: ["solid", "glossy"], shadowColor: "dark", className: ["shadow-gray-600/50 hover:shadow-gray-600/60"] }, { tone: ["solid", "glossy"], shadowColor: "black", className: ["shadow-gray-800/50 hover:shadow-gray-800/60"] }, { tone: "light", shadowColor: "white", className: ["shadow-gray-200/50 hover:shadow-gray-200/60"] }, { tone: "light", shadowColor: "blue", className: ["shadow-blue-300/50", "hover:shadow-blue-300/60"] }, { tone: "light", shadowColor: "red", className: ["shadow-red-300/50 hover:shadow-red-300/60"] }, { tone: "light", shadowColor: "green", className: ["shadow-green-300/50 hover:shadow-green-300/60"] }, { tone: "light", shadowColor: "yellow", className: ["shadow-yellow-300/50 hover:shadow-yellow-300/60"] }, { tone: "light", shadowColor: "purple", className: ["shadow-purple-300/50 hover:shadow-purple-300/60"] }, { tone: "light", shadowColor: "gray", className: ["shadow-gray-300/50 hover:shadow-gray-300/60"] }, { tone: "light", shadowColor: "dark", className: ["shadow-gray-400/50 hover:shadow-gray-400/60"] }, { tone: "light", shadowColor: "black", className: ["shadow-gray-500/50 hover:shadow-gray-500/60"] }, { position: ["top-left", "top-right"], radius: "sm", className: ["rounded-b-sm"] }, { position: ["top-left", "top-right"], radius: "base", className: ["rounded-b"] }, { position: ["top-left", "top-right"], radius: "md", className: ["rounded-b-md"] }, { position: ["top-left", "top-right"], radius: "lg", className: ["rounded-b-lg"] }, { position: "right", radius: "sm", className: ["rounded-l-sm"] }, { position: "right", radius: "base", className: ["rounded-l"] }, { position: "right", radius: "md", className: ["rounded-l-md"] }, { position: "right", radius: "lg", className: ["rounded-l-lg"] }, { position: "left", radius: "sm", className: ["rounded-r-sm"] }, { position: "left", radius: "base", className: ["rounded-r"] }, { position: "left", radius: "md", className: ["rounded-r-md"] }, { position: "left", radius: "lg", className: ["rounded-r-lg"] }, { color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-white", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "glossy", color: "blue", className: ["text-white", "from-blue-600", "to-blue-500"] }, { tone: "glossy", color: "red", className: ["text-white", "from-red-600", "to-red-500"] }, { tone: "glossy", color: "green", className: ["text-white", "from-green-600", "to-green-500"] }, { tone: "glossy", color: "yellow", className: ["text-white", "from-yellow-500", "to-yellow-400"] }, { tone: "glossy", color: "purple", className: ["text-white", "from-purple-600", "to-purple-500"] }, { tone: "glossy", color: "gray", className: ["text-gray-800", "from-gray-200", "to-gray-100"] }, { tone: "glossy", color: "dark", className: ["text-white", "from-gray-600", "to-gray-500"] }, { tone: "glossy", color: "black", className: ["text-white", "from-black", "to-gray-700"] }, { tone: "light", color: "blue", className: ["text-blue-600", "bg-blue-100", "border-blue-500"] }, { tone: "light", color: "red", className: ["text-red-600", "bg-red-100", "border-red-500"] }, { tone: "light", color: "green", className: ["text-green-600", "bg-green-100", "border-green-500"] }, { tone: "light", color: "yellow", className: ["text-yellow-600", "bg-yellow-100", "border-yellow-500"] }, { tone: "light", color: "purple", className: ["text-purple-600", "bg-purple-100", "border-purple-500"] }, { tone: "light", color: "gray", className: ["text-gray-600", "bg-gray-100", "border-gray-500"] }, { tone: "light", color: "dark", className: ["text-gray-700", "bg-gray-300", "border-gray-700"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400", "border-gray-800"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Select.styles.js
var a8 = { base: cva(["appearance-none", "w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["text-xs", "h-6"], sm: ["text-sm", "h-8"], md: ["text-base", "h-10"], lg: ["text-lg", "h-12"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, hasLeftIcon: { true: [], false: [] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: [] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }, { hasLeftIcon: false, size: "xs", className: ["px-2"] }, { hasLeftIcon: false, size: "sm", className: ["px-3"] }, { hasLeftIcon: false, size: "md", className: ["px-3"] }, { hasLeftIcon: false, size: "lg", className: ["px-4"] }, { hasLeftIcon: true, size: "xs", className: ["pl-7", "pr-2"] }, { hasLeftIcon: true, size: "sm", className: ["pl-8", "pr-3"] }, { hasLeftIcon: true, size: "md", className: ["pl-11", "pr-3"] }, { hasLeftIcon: true, size: "lg", className: ["pl-12", "pr-4"] }] }), wrapper: cva(["relative", "flex", "items-center", "w-full"]), icon: cva([], { variants: { tone: { light: ["text-gray-600"], solid: ["text-gray-600"], transparent: ["text-gray-600"] }, size: { xs: ["h-3.5", "w-3.5"], sm: ["h-4", "w-4"], md: ["h-5", "w-5"], lg: ["h-6", "w-6"] } } }), leftIconWrapper: cva(["absolute", "left-0", "z-20"], { variants: { size: { xs: ["pl-2"], sm: ["pl-2.5"], md: ["pl-3"], lg: ["pl-3"] } } }), rightIconWrapper: cva(["absolute", "right-0", "z-20", "pointer-events-none"], { variants: { size: { xs: ["pr-2"], sm: ["pr-2.5"], md: ["pr-3"], lg: ["pr-3"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Selector.styles.js
var o9 = cva(["absolute", "shadow-sm", "z-30"], { variants: { color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: [], sm: [], md: [], lg: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, tone: { solid: [], light: [] }, initialRun: { true: ["transition-none"], false: [] }, withAnimation: { true: [], false: [] } }, compoundVariants: [{ initialRun: false, withAnimation: false, className: ["transition-none"] }, { initialRun: false, withAnimation: true, className: ["transition-all", "duration-150"] }, { color: "white", tone: "solid", className: ["bg-white"] }, { color: "blue", tone: "solid", className: ["bg-blue-500"] }, { color: "red", tone: "solid", className: ["bg-red-500"] }, { color: "green", tone: "solid", className: ["bg-green-500"] }, { color: "yellow", tone: "solid", className: ["bg-yellow-400"] }, { color: "purple", tone: "solid", className: ["bg-purple-500"] }, { color: "gray", tone: "solid", className: ["bg-gray-500"] }, { color: "dark", tone: "solid", className: ["bg-gray-700"] }, { color: "black", tone: "solid", className: ["bg-black"] }, { color: "white", tone: "light", className: ["bg-white"] }, { color: "blue", tone: "light", className: ["bg-blue-100"] }, { color: "red", tone: "light", className: ["bg-red-100"] }, { color: "green", tone: "light", className: ["bg-green-100"] }, { color: "yellow", tone: "light", className: ["bg-yellow-100"] }, { color: "purple", tone: "light", className: ["bg-purple-100"] }, { color: "gray", tone: "light", className: ["bg-gray-100"] }, { color: "dark", tone: "light", className: ["bg-gray-200"] }, { color: "black", tone: "light", className: ["bg-gray-300"] }], defaultVariants: { color: "white" } });
var l7 = cva(["flex", "relative", "bg-gray-50", "items-center"], { variants: { radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, size: { xs: ["p-0.5"], sm: ["p-0.5"], md: ["p-[3px]"], lg: ["p-[3px]"] }, orientation: { horizontal: ["flex-inline"], vertical: ["flex-col", "gap-y-1", "h-auto"] }, fullWidth: { true: ["w-full", "gap-x-0.5"], false: ["w-fit"] } }, compoundVariants: [{ orientation: "horizontal", size: "xs", className: ["h-6"] }, { orientation: "horizontal", size: "sm", className: ["h-8"] }, { orientation: "horizontal", size: "md", className: ["h-10"] }, { orientation: "horizontal", size: "lg", className: ["h-12"] }] });
var a9 = cva(["enabled:hover:shadow-sm", "enabled:hover:bg-white", "cursor-pointer", "flex", "flex-inline", "items-center", "justify-center", "box-border", "focus-visible:bg-white", "focus-visible:ring-2", "focus-visible:ring-offset-0", "focus:outline-none"], { variants: { size: { xs: ["text-xs", "px-1.5"], sm: ["text-sm", "px-2.5"], md: ["text-base", "px-3"], lg: ["text-lg", "px-4"] }, color: { white: ["focus-visible:ring-gray-100"], blue: ["focus-visible:ring-blue-100"], red: ["focus-visible:ring-red-100"], green: ["focus-visible:ring-green-100"], yellow: ["focus-visible:ring-yellow-100"], purple: ["focus-visible:ring-purple-100"], gray: ["focus-visible:ring-gray-100"], dark: ["focus-visible:ring-gray-200"], black: ["focus-visible:ring-gray-300"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, tone: { solid: [], light: [] }, active: { true: [], false: ["text-gray-800", "disabled:text-gray-400", "hover:disabled:cursor-not-allowed"] }, orientation: { horizontal: ["flex-1", "h-full"], vertical: ["w-full"] } }, compoundVariants: [{ size: "xs", orientation: "vertical", className: ["h-6"] }, { size: "sm", orientation: "vertical", className: ["h-8"] }, { size: "md", orientation: "vertical", className: ["h-10"] }, { size: "lg", orientation: "vertical", className: ["h-12"] }, { active: true, color: ["white"], tone: "solid", className: ["text-gray-800"] }, { active: true, tone: "solid", color: ["blue", "red", "green", "yellow", "purple", "gray", "dark", "black"], className: ["text-white"] }, { active: true, color: ["white"], tone: "light", className: ["text-gray-800"] }, { active: true, tone: "light", color: "dark", className: ["text-gray-600"] }, { active: true, tone: "light", color: "black", className: ["text-gray-700"] }, { active: true, tone: "light", color: "blue", className: ["text-blue-500"] }, { active: true, tone: "light", color: "red", className: ["text-red-500"] }, { active: true, tone: "light", color: "green", className: ["text-green-500"] }, { active: true, tone: "light", color: "yellow", className: ["text-yellow-400"] }, { active: true, tone: "light", color: "purple", className: ["text-purple-500"] }, { active: true, tone: "light", color: "gray", className: ["text-gray-600"] }] });
var s6 = { base: o9, separator: cva(["last-of-type:hidden", "text-gray-300", "mx-0.5", "self-center"], { variants: { orientation: { horizontal: ["bg-gray-300"], vertical: ["bg-gray-300"] }, size: { xs: [], sm: [], md: [], lg: [] } }, compoundVariants: [{ orientation: "horizontal", size: "xs", className: ["w-px h-3"] }, { orientation: "horizontal", size: "sm", className: ["w-px h-4"] }, { orientation: "horizontal", size: "md", className: ["w-px h-5"] }, { orientation: "horizontal", size: "lg", className: ["w-px h-6"] }, { orientation: "vertical", size: "xs", className: ["w-3 h-px"] }, { orientation: "vertical", size: "sm", className: ["w-4 h-px"] }, { orientation: "vertical", size: "md", className: ["w-5 h-px"] }, { orientation: "vertical", size: "lg", className: ["w-6 h-px"] }] }), tab: a9, wrapper: l7 };

// node_modules/@rewind-ui/core/dist/theme/styles/Sidebar.styles.js
var a10 = { base: cva(["antialiased", "transition-width", "ease-in-out", "duration-300", "flex", "flex-col", "fixed", "top-0", "left-0", "h-full", "z-10"], { variants: { color: { white: ["bg-white", "text-gray-700", "border-r", "border-gray-100", "shadow-gray-300"], gray: ["bg-gray-50", "text-gray-800", "border-r", "border-gray-200", "shadow-gray-300"], dark: ["bg-gray-900", "text-gray-200", "shadow-gray-950"], slate: ["bg-slate-900", "text-slate-200", "shadow-slate-950"], zinc: ["bg-zinc-900", "text-zinc-200", "shadow-zinc-950"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, expanded: { true: ["md:min-w-[16rem]"], false: [] }, hovered: { true: ["md:min-w-[16rem]"], false: [] }, mobile: { true: ["w-[16rem]", "overflow-y-auto", "md:overflow-y-visible"], false: ["w-0"] } }, compoundVariants: [{ expanded: false, hovered: false, className: ["md:min-w-[4.5rem]"] }] }), head: cva(["transition-opacity", "top-0", "w-full", "items-center", "min-h-[4rem]", "px-5", "border-b", "border-dashed", "bg-inherit", "flex", "flex-nowrap", "truncate"], { variants: { mobile: { true: ["opacity-100"], false: ["opacity-0", "md:opacity-100"] }, color: { white: ["border-gray-200"], gray: ["border-gray-200"], dark: ["border-gray-700"], slate: ["border-slate-700"], zinc: ["border-zinc-700"] } } }), headTitle: cva(["text-lg", "font-medium", "truncate"], { variants: { opened: { true: ["ml-2"], false: [] } } }), headLogo: cva(["h-8", "flex", "flex-none", "items-center", "justify-center"]), headToggle: cva(["hidden", "md:flex", "items-center", "w-7", "h-7", "p-2", "rounded", "shadow", "ring-1", "absolute", "right-0", "translate-x-1/2"], { variants: { color: { white: ["ring-gray-100", "bg-white", "text-gray-500"], gray: ["ring-gray-200", "bg-gray-50", "text-gray-600"], dark: ["ring-gray-100", "bg-white", "text-gray-500"], slate: ["ring-slate-100", "bg-white", "text-slate-500"], zinc: ["ring-zinc-100", "bg-white", "text-zinc-500"] } } }), headToggleIcon: cva(["transition", "transform", "duration-250", "ease-in-out"], { variants: { expanded: { true: [], false: ["rotate-180"] } } }), nav: cva(["my-4", "overflow-x-hidden", "scrollbar-thin", "scrollbar-thumb-rounded-lg", "scrollbar-track-rounded-lg", "flex", "flex-col", "gap-y-6"], { variants: { color: { white: ["scrollbar-thumb-gray-200"], gray: ["scrollbar-thumb-gray-400"], dark: ["scrollbar-thumb-gray-700"], slate: ["scrollbar-thumb-slate-700"], zinc: ["scrollbar-thumb-zinc-700"] }, opened: { true: ["overflow-y-auto"], false: ["overflow-y-hidden"] } } }), navSection: cva(["flex", "flex-col"], { variants: { isChild: { true: [], false: [] }, color: { white: [], gray: [], dark: [], slate: [], zinc: [] } }, compoundVariants: [{ isChild: true, color: "white", className: ["bg-gray-100"] }, { isChild: true, color: "gray", className: ["bg-gray-200"] }, { isChild: true, color: "dark", className: ["bg-gray-950"] }, { isChild: true, color: "slate", className: ["bg-slate-950"] }, { isChild: true, color: "zinc", className: ["bg-zinc-950"] }] }), navSectionTitle: cva(["transition-opacity", "text-sm", "font-medium", "truncate", "uppercase", "mb-3", "px-5", "mr-auto"], { variants: { color: { white: ["text-gray-400"], gray: ["text-gray-500"], dark: ["text-gray-500"], slate: ["text-slate-500"], zinc: ["text-zinc-500"] }, opened: { true: ["opacity-100"], false: ["opacity-0"] } } }), navSectionItemWrapper: cva(["cursor-pointer"], { variants: { opened: { true: [], false: ["px-3"] } } }), navSectionItem: cva(["group", "truncate", "w-full", "flex", "items-center", "text-sm", "outline-none", "ring-inset", "focus-visible:ring-2", "focus-visible:rounded", "py-2.5", "gap-x-3", "border"], { variants: { color: { white: ["focus-visible:ring-gray-300"], gray: ["focus-visible:ring-gray-300"], dark: ["focus-visible:ring-gray-400"], slate: ["focus-visible:ring-slate-400"], zinc: ["focus-visible:ring-zinc-400"] }, active: { true: [], false: ["border-transparent"] }, expanded: { true: [], false: [] }, opened: { true: ["px-6", "border-transparent"], false: ["justify-start", "px-3", "rounded"] } }, compoundVariants: [{ active: true, color: "white", className: ["bg-gray-50", "text-gray-600"] }, { active: true, opened: false, color: "white", className: ["border-gray-100"] }, { active: false, color: "white", className: ["text-gray-500", "hover:text-gray-700"] }, { active: true, color: "gray", className: ["bg-gray-100", "text-gray-600"] }, { active: true, opened: false, color: "gray", className: ["border-gray-200"] }, { active: false, color: "gray", className: ["text-gray-700", "hover:text-gray-950"] }, { active: true, color: "dark", className: ["bg-gray-800", "text-gray-100"] }, { active: true, opened: false, color: "dark", className: ["border-gray-700"] }, { active: false, color: "dark", className: ["text-gray-400", "hover:text-gray-200"] }, { active: true, color: "slate", className: ["bg-slate-800", "text-slate-100"] }, { active: true, opened: false, color: "slate", className: ["border-slate-700"] }, { active: false, color: "slate", className: ["text-slate-400", "hover:text-slate-200"] }, { active: true, color: "zinc", className: ["bg-zinc-800", "text-zinc-100"] }, { active: true, opened: false, color: "zinc", className: ["border-zinc-700"] }, { active: false, color: "zinc", className: ["text-zinc-400", "hover:text-zinc-200"] }] }), navSectionItemIcon: cva(["w-6", "h-6", "flex-none", "flex", "items-center", "justify-center"]), navSectionItemLabelWrapper: cva(["transition-opacity", "duration-1500", "flex", "items-center", "justify-between", "w-full"], { variants: { opened: { true: ["opacity-100"], false: ["opacity-0"] } } }), navSectionItemLabel: cva(["text-left"]), navSectionItemCollapseIcon: cva(["transition", "transform", "duration-250", "ease-in-out", "h-4", "w-4", "ml-auto"], { variants: { collapsed: { true: [], false: ["rotate-180"] } } }), separator: cva(["border-t", "border-slate-700", "border-dashed", "my-2"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-200"], dark: ["border-gray-700"], slate: ["border-slate-700"], zinc: ["border-zinc-700"] } } }), footer: cva(["truncate", "w-full", "items-center", "justify-center", "min-h-[4rem]", "mt-auto", "sticky", "bottom-0", "border-t", "border-dashed", "bg-inherit", "px-4"], { variants: { color: { white: ["border-gray-200"], gray: ["border-gray-200"], dark: ["border-gray-700"], slate: ["border-slate-700"], zinc: ["border-zinc-700"] }, mobile: { true: ["flex"], false: ["hidden"] }, expanded: { true: ["md:flex"], false: ["hidden"] }, hovered: { true: ["md:flex"], false: [] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Spinner.styles.js
var s7 = { base: cva(["animate-spin"], { variants: { size: { xs: ["w-3", "h-3"], sm: ["w-5", "h-5"], md: ["w-6", "h-6"], lg: ["w-8", "h-8"], xl: ["w-9", "h-9"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Switch.styles.js
var a11 = cva(["relative", "border-0", "grid", "items-center", "transition", "duration-50", "ease-in-out", "cursor-pointer", "self-start"], { variants: { size: { sm: ["min-w-[36px]", "p-[2px]"], md: ["min-w-[42px]", "p-[3px]"], lg: ["min-w-[46px]", "p-[3px]"], xl: ["min-w-[52px]", "p-[3px]"] }, color: { blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, state: { active: [], inactive: [] }, withRing: { true: [], false: ["focus:ring-0"] } }, compoundVariants: [{ state: "active", withRing: true, className: ["focus:ring", "focus:ring-offset-1"] }, { state: "active", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { state: "active", color: "red", withRing: true, className: ["focus:ring-red-100"] }, { state: "active", color: "green", withRing: true, className: ["focus:ring-green-100"] }, { state: "active", color: "yellow", withRing: true, className: ["focus:ring-yellow-100"] }, { state: "active", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { state: "active", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { state: "active", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { state: "active", color: "black", withRing: true, className: ["focus:ring-gray-400"] }, { state: "inactive", className: ["bg-gray-200", "border-gray-200"] }, { state: "active", size: "md", className: [] }, { state: "inactive", size: "md", className: [] }, { state: "active", color: "blue", className: ["bg-blue-500", "focus:bg-blue-600", "hover:bg-blue-600", "active:bg-blue-600/90", "disabled:bg-blue-300", "disabled:hover:bg-blue-300"] }, { state: "active", color: "red", className: ["bg-red-500", "focus:bg-red-600", "hover:bg-red-600", "active:bg-red-600/90", "disabled:bg-red-300", "disabled:hover:bg-red-300"] }, { state: "active", color: "green", className: ["bg-green-500", "focus:bg-green-600", "hover:bg-green-600", "active:bg-green-600/90", "disabled:bg-green-300", "disabled:hover:bg-green-300"] }, { state: "active", color: "yellow", className: ["bg-yellow-400", "focus:bg-yellow-500", "hover:bg-yellow-500", "active:bg-yellow-500/90", "disabled:bg-yellow-200", "disabled:hover:bg-yellow-200"] }, { state: "active", color: "purple", className: ["bg-purple-500", "focus:bg-purple-600", "hover:bg-purple-600", "active:bg-purple-600/90", "disabled:bg-purple-300", "disabled:hover:bg-purple-300"] }, { state: "active", color: "gray", className: ["bg-gray-200", "focus:bg-gray-300", "hover:bg-gray-300", "active:bg-gray-300/90", "disabled:bg-gray-100", "disabled:hover:bg-gray-100", "disabled:text-gray-400"] }, { state: "active", color: "dark", className: ["bg-gray-700", "focus:bg-gray-800", "hover:bg-gray-800", "active:bg-gray-800/90", "disabled:bg-gray-500", "disabled:hover:bg-gray-500"] }, { state: "active", color: "black", className: ["bg-black", "active:bg-black/90", "disabled:bg-gray-800"] }] });
var l8 = cva(["inline-block", "bg-white", "shadow"], { variants: { size: { sm: ["w-[17px]", "h-[17px]"], md: ["w-[18px]", "h-[18px]"], lg: ["w-[19px]", "h-[19px]"], xl: ["w-[20px]", "h-[20px]"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, state: { active: [], inactive: [] } }, compoundVariants: [] });
var r12 = cva(["cursor-pointer"], { variants: { size: { sm: ["text-sm", "pl-1.5", "leading-[21px]"], md: ["text-base", "pl-1.5", "leading-[24px]"], lg: ["text-lg", "pl-2", "leading-[25px]"], xl: ["text-xl", "pl-2", "leading-[26px]"] }, disabled: { true: ["text-gray-500"], false: ["text-gray-700"] } } });
var t14 = { base: a11, description: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-gray-400"], false: ["text-gray-500"] } } }), error: cva([], { variants: { size: { sm: ["text-xs", "ml-1.5"], md: ["text-sm", "ml-1.5"], lg: ["text-base", "ml-2"], xl: ["text-lg", "ml-2"] }, disabled: { true: ["text-red-300"], false: ["text-red-500"] } } }), inner: l8, label: r12 };

// node_modules/@rewind-ui/core/dist/theme/styles/Tab.styles.js
var l9 = cva(["flex", "flex-inline", "justify-center", "items-center", "focus-visible:outline-0"], { variants: { tone: { line: [], pill: ["antialiased"] }, color: { blue: ["focus-visible:bg-blue-100/50"], red: ["focus-visible:bg-red-100/50"], green: ["focus-visible:bg-green-100/50"], yellow: ["focus-visible:bg-yellow-100/50"], purple: ["focus-visible:bg-purple-100/50"], gray: ["focus-visible:bg-gray-100/50"], dark: ["focus-visible:bg-gray-200/50"], black: ["focus-visible:bg-gray-300/50"] }, state: { active: [], inactive: [] }, radius: { none: ["rounded-none"], sm: [], base: [], md: [], lg: [], full: [] }, size: { sm: ["text-sm", "px-2", "py-1"], md: ["text-base", "px-2.5", "py-1.5"], lg: ["text-lg", "px-3", "py-2"] }, fullWidth: { true: ["flex-1"], false: [] } }, defaultVariants: { tone: "line", color: "blue", size: "md" }, compoundVariants: [{ tone: "pill", radius: "sm", className: ["rounded-sm"] }, { tone: "pill", radius: "base", className: ["rounded"] }, { tone: "pill", radius: "md", className: ["rounded-md"] }, { tone: "pill", radius: "lg", className: ["rounded-lg"] }, { tone: "pill", radius: "full", className: ["rounded-full"] }, { tone: "line", state: "active", className: ["text-gray-900", "border-b-2"] }, { tone: "line", state: "inactive", className: ["text-gray-500", "border-b-2"] }, { tone: "line", color: "blue", state: "active", className: ["border-b-blue-400"] }, { tone: "line", color: "blue", state: "inactive", className: ["border-b-gray-100", "hover:border-b-blue-200"] }, { tone: "line", color: "red", state: "active", className: ["border-b-red-400"] }, { tone: "line", color: "red", state: "inactive", className: ["border-b-gray-100", "hover:border-b-red-200"] }, { tone: "line", color: "green", state: "active", className: ["border-b-green-400"] }, { tone: "line", color: "green", state: "inactive", className: ["border-b-gray-100", "hover:border-b-green-200"] }, { tone: "line", color: "yellow", state: "active", className: ["border-b-yellow-300"] }, { tone: "line", color: "yellow", state: "inactive", className: ["border-b-gray-100", "hover:border-b-yellow-100"] }, { tone: "line", color: "purple", state: "active", className: ["border-b-purple-400"] }, { tone: "line", color: "purple", state: "inactive", className: ["border-b-gray-100", "hover:border-b-purple-200"] }, { tone: "line", color: "gray", state: "active", className: ["border-b-gray-400"] }, { tone: "line", color: "gray", state: "inactive", className: ["border-b-gray-100", "hover:border-b-gray-200"] }, { tone: "line", color: "dark", state: "active", className: ["border-b-gray-700"] }, { tone: "line", color: "dark", state: "inactive", className: ["border-b-gray-100", "hover:border-b-gray-200"] }, { tone: "line", color: "black", state: "active", className: ["border-b-black"] }, { tone: "line", color: "black", state: "inactive", className: ["border-b-gray-200", "hover:border-b-gray-300"] }, { tone: "pill", state: "inactive", className: ["text-gray-500", "bg-transparent"] }, { tone: "pill", color: "blue", state: "active", className: ["bg-blue-500", "text-white"] }, { tone: "pill", color: "blue", state: "inactive", className: ["hover:bg-blue-50"] }, { tone: "pill", color: "red", state: "active", className: ["bg-red-500", "text-white"] }, { tone: "pill", color: "red", state: "inactive", className: ["hover:bg-red-50"] }, { tone: "pill", color: "green", state: "active", className: ["bg-green-500", "text-white"] }, { tone: "pill", color: "green", state: "inactive", className: ["hover:bg-green-50"] }, { tone: "pill", color: "yellow", state: "active", className: ["bg-yellow-400", "text-white"] }, { tone: "pill", color: "yellow", state: "inactive", className: ["hover:bg-yellow-50"] }, { tone: "pill", color: "purple", state: "active", className: ["bg-purple-500", "text-white"] }, { tone: "pill", color: "purple", state: "inactive", className: ["hover:bg-purple-50"] }, { tone: "pill", color: "gray", state: "active", className: ["bg-gray-500", "text-white"] }, { tone: "pill", color: "gray", state: "inactive", className: ["hover:bg-gray-50"] }, { tone: "pill", color: "dark", state: "active", className: ["bg-gray-800", "text-white"] }, { tone: "pill", color: "dark", state: "inactive", className: ["hover:bg-gray-50"] }, { tone: "pill", color: "black", state: "active", className: ["bg-black", "text-white"] }, { tone: "pill", color: "black", state: "inactive", className: ["hover:bg-gray-100"] }] });
var a12 = { wrapper: cva(["overflow-auto"], { variants: { fullWidth: { true: ["w-full"], false: [] } } }), tab: l9, list: cva(["flex", "flex-inline", "space-x-2", "px-1", "mb-2", "py-2", "overflow-auto"]) };

// node_modules/@rewind-ui/core/dist/theme/styles/Table.styles.js
var r13 = cva(["w-full", "overflow-auto", "border-collapse"], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, outerBorders: { true: ["border", "border-gray-200"], false: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] } } });
var t15 = cva(["table-auto", "w-full", "overflow-hidden", "bg-white"], { variants: { radius: { none: [], sm: [], base: [], md: [], lg: [] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] } } });
var o10 = cva([], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, size: { sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, headerBorders: { true: ["border-b", "border-gray-300/75"], false: [] }, headerColor: { white: ["text-gray-700", "bg-white"], gray: ["text-gray-700", "bg-gray-100/75"], dark: ["text-white", "bg-gray-800"], black: ["text-white", "bg-black"] } } });
var a13 = { wrapper: r13, table: t15, tbody: cva(["font-normal", "text-gray-600"], { variants: { borderStyle: { dashed: ["divide-dashed"], solid: ["divide-solid"] }, size: { sm: ["text-sm"], md: ["text-base"], lg: ["text-lg"] }, horizontalBorders: { true: ["divide-y", "divide-gray-200"] } } }), tfoot: cva(["text-gray-700"], { variants: { borderStyle: { dashed: ["border-dashed"], solid: ["border-solid"] }, size: { sm: ["text-xs"], md: ["text-sm"], lg: ["text-base"] }, footerBorders: { true: ["border-t", "border-gray-300/75"], false: [] } } }), thead: o10, tr: cva([], { variants: { borderStyle: { dashed: ["divide-dashed"], solid: ["divide-solid"] }, verticalBorders: { true: ["divide-x", "divide-gray-200"], false: [] }, hoverable: { true: [], false: [] }, striped: { true: [], false: [] }, stripePosition: { even: [], odd: [] }, color: { none: [], white: ["bg-white"], blue: ["bg-blue-50", "text-blue-800"], red: ["bg-red-50", "text-red-800"], green: ["bg-green-50", "text-green-800"], yellow: ["bg-yellow-50", "text-yellow-800"], purple: ["bg-purple-50", "text-purple-800"], gray: ["bg-gray-50", "text-gray-800"], dark: ["bg-gray-600", "text-white"], black: ["bg-gray-900", "text-white"] } }, compoundVariants: [{ color: "none", stripePosition: "even", striped: true, className: ["even:bg-gray-50"] }, { color: "none", stripePosition: "odd", striped: true, className: ["odd:bg-gray-50"] }, { color: ["none", "white"], hoverable: true, className: ["hover:bg-gray-100"] }, { color: "blue", hoverable: true, className: ["hover:bg-blue-100"] }, { color: "red", hoverable: true, className: ["hover:bg-red-100"] }, { color: "green", hoverable: true, className: ["hover:bg-green-100"] }, { color: "yellow", hoverable: true, className: ["hover:bg-yellow-100"] }, { color: "purple", hoverable: true, className: ["hover:bg-purple-100"] }, { color: "gray", hoverable: true, className: ["hover:bg-gray-100"] }, { color: "dark", hoverable: true, className: ["hover:bg-gray-700"] }, { color: "black", hoverable: true, className: ["hover:bg-black"] }] }), td: cva(["[&[align=center]]:text-center", "[&[align=right]]:text-right"], { variants: { size: { sm: ["p-1"], md: ["p-2"], lg: ["p-2.5"] } } }), th: cva(["font-medium", "[&[align=center]]:text-center", "[&[align=right]]:text-right"], { variants: { size: { sm: ["p-1"], md: ["p-2"], lg: ["p-2.5"] } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Text.styles.js
var e8 = { base: cva([], { variants: { color: { white: "text-white", blue: "text-blue-500", red: "text-red-500", green: "text-green-500", yellow: "text-yellow-400", purple: "text-purple-500", gray: "text-gray-600", dark: "text-gray-900", black: "text-black" }, leading: { 3: "leading-3", 4: "leading-4", 5: "leading-5", 6: "leading-6", 7: "leading-7", 8: "leading-8", 9: "leading-9", 10: "leading-10", none: "leading-none", tight: "leading-tight", snug: "leading-snug", normal: "leading-normal", relaxed: "leading-relaxed", loose: "leading-loose" }, size: { xs: "text-xs", sm: "text-sm", base: "text-base", lg: "text-lg", xl: "text-xl", "2xl": "text-2xl", "3xl": "text-3xl", "4xl": "text-4xl", "5xl": "text-5xl", "6xl": "text-6xl", "7xl": "text-7xl", "8xl": "text-8xl", "9xl": "text-9xl" }, tracking: { tighter: "tracking-tighter", tight: "tracking-tight", normal: "tracking-normal", wide: "tracking-wide", wider: "tracking-wider", widest: "tracking-widest" }, weight: { thin: "font-thin", extraLight: "font-extralight", light: "font-light", normal: "font-normal", medium: "font-medium", semiBold: "font-semibold", bold: "font-bold", extraBold: "font-extrabold", black: "font-black" } } }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Textarea.styles.js
var e9 = { base: cva(["w-full", "transition-colors", "duration-100", "ease-in-out", "outline-none", "data-[has-left-element=true]:rounded-l-none", "data-[has-right-element=true]:rounded-r-none", "z-10"], { variants: { color: { blue: [], purple: [], gray: [], dark: [], black: [] }, size: { xs: ["px-2", "text-xs", "py-2"], sm: ["px-3", "text-sm", "py-3"], md: ["px-3", "text-base", "py-3"], lg: ["px-4", "text-lg", "py-4"] }, tone: { light: ["text-gray-800", "border", "focus:bg-gray-50", "placeholder:text-gray-400"], solid: ["text-gray-800", "border", "focus:bg-gray-100", "placeholder:text-gray-400"], transparent: ["text-gray-800", "border", "placeholder:text-gray-400"] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], xl: ["rounded-xl"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] }, validation: { none: [], invalid: ["border-red-500", "focus-visible:border-red-500"], valid: ["border-green-500", "focus-visible:border-green-500"], warning: ["border-yellow-400", "focus-visible:border-yellow-400"] }, withRing: { true: ["focus:ring-2", "focus:ring-offset-1"], false: ["focus:ring-0"] }, disabled: { true: ["cursor-not-allowed"], false: [] } }, compoundVariants: [{ validation: "none", color: "blue", withRing: true, className: ["focus:ring-blue-100"] }, { validation: "none", color: "purple", withRing: true, className: ["focus:ring-purple-100"] }, { validation: "none", color: "gray", withRing: true, className: ["focus:ring-gray-100"] }, { validation: "none", color: "dark", withRing: true, className: ["focus:ring-gray-200"] }, { validation: "none", color: "black", withRing: true, className: ["focus:ring-gray-300"] }, { validation: "invalid", withRing: true, className: ["focus:ring-red-100"] }, { validation: "valid", withRing: true, className: ["focus:ring-green-100"] }, { validation: "warning", withRing: true, className: ["focus:ring-yellow-100"] }, { tone: "light", disabled: false, className: ["bg-white"] }, { tone: "solid", disabled: false, className: ["bg-gray-50"] }, { tone: "transparent", disabled: false, className: ["bg-transparent"] }, { tone: "light", disabled: true, className: ["bg-gray-100"] }, { tone: "solid", disabled: true, className: ["bg-gray-200"] }, { tone: "transparent", disabled: true, className: ["bg-gray-50"] }, { tone: "light", validation: "none", className: ["border-gray-300"] }, { tone: "solid", validation: "none", className: ["border-gray-200"] }, { tone: "transparent", validation: "none", className: ["border-transparent"] }, { validation: "none", color: "blue", className: ["focus-visible:border-blue-500"] }, { validation: "none", color: "purple", className: ["focus-visible:border-purple-500"] }, { validation: "none", color: "gray", className: ["focus-visible:border-gray-500"] }, { validation: "none", color: "dark", className: ["focus-visible:border-gray-700"] }, { validation: "none", color: "black", className: ["focus-visible:border-black"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Toast.styles.js
var o11 = { container: cva(["fixed", "flex", "flex-col", "gap-y-2", "z-[70]"], { variants: { position: { "top-left": ["top-2", "left-2"], "top-right": ["top-2", "right-2"], "bottom-left": ["bottom-2", "left-2"], "bottom-right": ["bottom-2", "right-2"] } } }), toast: cva(["flex", "flex-col", "w-72", "overflow-hidden", "transition-colors"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"], lg: ["shadow-lg"], xl: ["shadow-xl"] }, shadowColor: { none: [], white: ["shadow-gray-200/50 hover:shadow-gray-200/60"], blue: ["shadow-blue-500/50", "hover:shadow-blue-500/60"], red: ["shadow-red-500/50 hover:shadow-red-500/60"], green: ["shadow-green-500/50 hover:shadow-green-500/60"], yellow: ["shadow-yellow-500/50 hover:shadow-yellow-500/60"], purple: ["shadow-purple-500/50 hover:shadow-purple-500/60"], gray: ["shadow-gray-400/50 hover:shadow-gray-400/60"], dark: ["shadow-gray-600/50 hover:shadow-gray-600/60"], black: ["shadow-gray-800/50 hover:shadow-gray-800/60"] } }, compoundVariants: [{ color: "white", className: ["text-gray-800", "bg-white"] }, { tone: "minimal", className: ["text-gray-800", "bg-white"] }, { tone: "solid", color: "blue", className: ["text-white", "bg-blue-500"] }, { tone: "solid", color: "red", className: ["text-white", "bg-red-500"] }, { tone: "solid", color: "green", className: ["text-white", "bg-green-500"] }, { tone: "solid", color: "yellow", className: ["text-yellow-900", "bg-yellow-400"] }, { tone: "solid", color: "purple", className: ["text-white", "bg-purple-500"] }, { tone: "solid", color: "gray", className: ["text-gray-800", "bg-gray-200"] }, { tone: "solid", color: "dark", className: ["text-white", "bg-gray-700"] }, { tone: "solid", color: "black", className: ["text-white", "bg-black"] }, { tone: "light", color: "blue", className: ["text-blue-700", "bg-blue-100/95"] }, { tone: "light", color: "red", className: ["text-red-700", "bg-red-100/95"] }, { tone: "light", color: "green", className: ["text-green-700", "bg-green-100/95"] }, { tone: "light", color: "yellow", className: ["text-yellow-700", "bg-yellow-100/95"] }, { tone: "light", color: "purple", className: ["text-purple-700", "bg-purple-100/95"] }, { tone: "light", color: "gray", className: ["text-gray-700", "bg-gray-100/95"] }, { tone: "light", color: "dark", className: ["text-gray-800", "bg-gray-300/95"] }, { tone: "light", color: "black", className: ["text-black", "bg-gray-400/95"] }] }), progress: cva(["w-full", "h-2"], { variants: { tone: { solid: [], light: [], minimal: ["rounded", "overflow-hidden"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["bg-gray-300"] }, { tone: ["solid", "minimal"], color: "blue", className: ["bg-blue-700"] }, { tone: "solid", color: "red", className: ["bg-red-700"] }, { tone: "solid", color: "green", className: ["bg-green-700"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-700"] }, { tone: "solid", color: "purple", className: ["bg-purple-700"] }, { tone: "solid", color: "gray", className: ["bg-gray-300"] }, { tone: "solid", color: "dark", className: ["bg-gray-800"] }, { tone: "solid", color: "black", className: ["bg-gray-900"] }, { tone: "light", color: "blue", className: ["bg-blue-500"] }, { tone: "light", color: "red", className: ["bg-red-500"] }, { tone: "light", color: "green", className: ["bg-green-500"] }, { tone: "light", color: "yellow", className: ["bg-yellow-500"] }, { tone: "light", color: "purple", className: ["bg-purple-500"] }, { tone: "light", color: "gray", className: ["bg-gray-300"] }, { tone: "light", color: "dark", className: ["bg-gray-600"] }, { tone: "light", color: "black", className: ["bg-gray-700"] }] }), progressInner: cva(["transition-[width]", "h-full"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["bg-gray-200"] }, { tone: ["solid", "minimal"], color: "blue", className: ["bg-blue-400"] }, { tone: "solid", color: "red", className: ["bg-red-400"] }, { tone: "solid", color: "green", className: ["bg-green-400"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-300"] }, { tone: "solid", color: "purple", className: ["bg-purple-400"] }, { tone: "solid", color: "gray", className: ["bg-gray-100"] }, { tone: "solid", color: "dark", className: ["bg-gray-600"] }, { tone: "solid", color: "black", className: ["bg-gray-700"] }, { tone: "light", color: "blue", className: ["bg-blue-300"] }, { tone: "light", color: "red", className: ["bg-red-300"] }, { tone: "light", color: "green", className: ["bg-green-300"] }, { tone: "light", color: "yellow", className: ["bg-yellow-200"] }, { tone: "light", color: "purple", className: ["bg-purple-300"] }, { tone: "light", color: "gray", className: ["bg-gray-200"] }, { tone: "light", color: "dark", className: ["bg-gray-500"] }, { tone: "light", color: "black", className: ["bg-gray-600"] }] }), contentWrapper: cva(["flex", "gap-x-3", "p-3", "items-center"], { variants: { closeOnClick: { true: ["cursor-pointer"], false: [] } } }), content: cva(["flex", "flex-col", "gap-y-1.5"]), title: cva(["text-xl", "font-medium", "leading-none"]), description: cva([], { variants: { hasTitle: { true: ["text-sm"], false: ["text-base"] } } }), actionsWrapper: cva(["flex", "items-center", "w-full", "divide-x", "border-t"], { variants: { tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: ["solid", "light"], className: ["border-gray-200", "divide-gray-200"] }, { color: "blue", tone: "solid", className: ["border-blue-600", "divide-blue-600"] }, { color: "red", tone: "solid", className: ["border-red-600", "divide-red-600"] }, { color: "green", tone: "solid", className: ["border-green-600", "divide-green-600"] }, { color: "yellow", tone: "solid", className: ["border-yellow-500", "divide-yellow-500"] }, { color: "purple", tone: "solid", className: ["border-purple-600", "divide-purple-600"] }, { color: "gray", tone: "solid", className: ["border-gray-300", "divide-gray-300"] }, { color: "dark", tone: "solid", className: ["border-gray-600", "divide-gray-600"] }, { color: "black", tone: "solid", className: ["border-gray-800", "divide-gray-800"] }, { color: "blue", tone: "light", className: ["border-blue-200", "divide-blue-200"] }, { color: "red", tone: "light", className: ["border-red-200", "divide-red-200"] }, { color: "green", tone: "light", className: ["border-green-200", "divide-green-200"] }, { color: "yellow", tone: "light", className: ["border-yellow-200", "divide-yellow-200"] }, { color: "purple", tone: "light", className: ["border-purple-200", "divide-purple-200"] }, { color: "gray", tone: "light", className: ["border-gray-200", "divide-gray-200"] }, { color: "dark", tone: "light", className: ["border-gray-400", "divide-gray-400"] }, { color: "black", tone: "light", className: ["border-gray-500", "divide-gray-500"] }] }), action: cva(["w-full", "py-2.5", "text-sm"], { variants: { primary: { true: ["font-bold"], false: [] }, tone: { solid: [], light: [], minimal: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ color: "white", tone: "solid", className: ["hover:bg-gray-200", "active:bg-gray-300"] }, { color: "blue", tone: "solid", className: ["hover:bg-blue-600", "active:bg-blue-700"] }, { color: "red", tone: "solid", className: ["hover:bg-red-600", "active:bg-red-700"] }, { color: "green", tone: "solid", className: ["hover:bg-green-600", "active:bg-green-700"] }, { color: "yellow", tone: "solid", className: ["hover:bg-yellow-500", "active:bg-yellow-600"] }, { color: "purple", tone: "solid", className: ["hover:bg-purple-600", "active:bg-purple-700"] }, { color: "gray", tone: "solid", className: ["hover:bg-gray-300", "active:bg-gray-400"] }, { color: "dark", tone: "solid", className: ["hover:bg-gray-800", "active:bg-gray-900"] }, { color: "black", tone: "solid", className: ["hover:bg-gray-950", "active:bg-black"] }, { color: "white", tone: "light", className: ["hover:bg-gray-100", "active:bg-gray-200"] }, { color: "blue", tone: "light", className: ["hover:bg-blue-100/50", "active:bg-blue-200/50"] }, { color: "red", tone: "light", className: ["hover:bg-red-100/50", "active:bg-red-200/50"] }, { color: "green", tone: "light", className: ["hover:bg-green-100/50", "active:bg-green-200/50"] }, { color: "yellow", tone: "light", className: ["hover:bg-yellow-100/50", "active:bg-yellow-200/50"] }, { color: "purple", tone: "light", className: ["hover:bg-purple-100/50", "active:bg-purple-200/50"] }, { color: "gray", tone: "light", className: ["hover:bg-gray-200/50", "active:bg-gray-300/50"] }, { color: "dark", tone: "light", className: ["hover:bg-gray-300/50", "active:bg-gray-400/50"] }, { color: "black", tone: "light", className: ["hover:bg-gray-400/50", "active:bg-gray-500/50"] }] }) };

// node_modules/@rewind-ui/core/dist/theme/styles/Tooltip.styles.js
var l10 = cva(["relative", "text-center", "max-w-xs", "transition", "duration-50", "ease-in-out", "z-50"], { variants: { open: { true: ["opacity-100", "scale-100"], false: ["opacity-0", "scale-95", "invisible"] }, tone: { solid: [], light: [] }, arrowSide: { left: [], right: [], top: [], bottom: [] }, size: { xs: ["text-xs", "py-1", "px-2"], sm: ["text-sm", "py-1", "px-2"], md: ["text-base", "py-2", "px-3"], lg: ["text-lg", "py-2", "px-3"] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] }, radius: { none: ["rounded-none"], sm: ["rounded-sm"], base: ["rounded"], md: ["rounded-md"], lg: ["rounded-lg"], full: ["rounded-full"] }, shadow: { none: ["shadow-none"], sm: ["shadow-sm"], base: ["shadow"], md: ["shadow-md"] } }, compoundVariants: [{ open: true, arrowSide: ["left", "right"], className: ["translate-x-0"] }, { open: true, arrowSide: ["top", "bottom"], className: ["translate-y-0"] }, { open: false, arrowSide: "left", className: ["-translate-x-1"] }, { open: false, arrowSide: "right", className: ["translate-x-1"] }, { open: false, arrowSide: "top", className: ["-translate-y-1"] }, { open: false, arrowSide: "bottom", className: ["translate-y-1"] }, { tone: "solid", color: "white", className: ["bg-white", "text-gray-800"] }, { tone: "solid", color: "blue", className: ["bg-blue-500", "text-white"] }, { tone: "solid", color: "red", className: ["bg-red-500", "text-white"] }, { tone: "solid", color: "green", className: ["bg-green-500", "text-white"] }, { tone: "solid", color: "yellow", className: ["bg-yellow-400", "text-white"] }, { tone: "solid", color: "purple", className: ["bg-purple-500", "text-white"] }, { tone: "solid", color: "gray", className: ["bg-gray-200", "text-gray-800"] }, { tone: "solid", color: "dark", className: ["bg-gray-700", "text-white"] }, { tone: "solid", color: "black", className: ["bg-black", "text-white"] }, { tone: "light", color: "white", className: ["bg-white", "text-gray-800"] }, { tone: "light", color: "blue", className: ["bg-blue-100", "text-blue-500"] }, { tone: "light", color: "red", className: ["bg-red-100", "text-red-500"] }, { tone: "light", color: "green", className: ["bg-green-100", "text-green-500"] }, { tone: "light", color: "yellow", className: ["bg-yellow-100", "text-yellow-500"] }, { tone: "light", color: "purple", className: ["bg-purple-100", "text-purple-500"] }, { tone: "light", color: "gray", className: ["bg-gray-100", "text-gray-500"] }, { tone: "light", color: "dark", className: ["bg-gray-200", "text-gray-600"] }, { tone: "light", color: "black", className: ["bg-gray-300", "text-gray-700"] }] });
var o12 = { arrow: cva([], { variants: { tone: { solid: [], light: [] }, color: { white: [], blue: [], red: [], green: [], yellow: [], purple: [], gray: [], dark: [], black: [] } }, compoundVariants: [{ tone: "solid", color: "white", className: ["fill-white"] }, { tone: "solid", color: "blue", className: ["fill-blue-500"] }, { tone: "solid", color: "red", className: ["fill-red-500"] }, { tone: "solid", color: "green", className: ["fill-green-500"] }, { tone: "solid", color: "yellow", className: ["fill-yellow-400"] }, { tone: "solid", color: "purple", className: ["fill-purple-500"] }, { tone: "solid", color: "gray", className: ["fill-gray-200"] }, { tone: "solid", color: "dark", className: ["fill-gray-700"] }, { tone: "solid", color: "black", className: ["fill-black"] }, { tone: "light", color: "white", className: ["fill-white"] }, { tone: "light", color: "blue", className: ["fill-blue-100"] }, { tone: "light", color: "red", className: ["fill-red-100"] }, { tone: "light", color: "green", className: ["fill-green-100"] }, { tone: "light", color: "yellow", className: ["fill-yellow-100"] }, { tone: "light", color: "purple", className: ["fill-purple-100"] }, { tone: "light", color: "gray", className: ["fill-gray-100"] }, { tone: "light", color: "dark", className: ["fill-gray-200"] }, { tone: "light", color: "black", className: ["fill-gray-300"] }] }), base: l10 };

// node_modules/@rewind-ui/core/dist/theme/theme.context.js
var import_react3 = __toESM(require_react());
var M = { components: { Accordion: t3, Alert: a, Avatar: o2, Badge: o3.base, Breadcrumbs: s, Button: r3, Card: a3, Calendar: h, Checkbox: l3, Combobox: y, ComboboxOption: w, Drawer: t9.base, Dropdown: t10, Image: o6, FormControl: e5, Input: a6, InputGroup: r9, Modal: o7.base, Overlay: o8.base, Popover: t11, Progress: l5, Radio: l6, Ribbon: e7.base, Select: a8, Selector: s6, Sidebar: a10, Spinner: s7.base, Switch: t14, Table: a13, Tabs: a12, Text: e8.base, Textarea: e9.base, Toast: o11, Tooltip: o12 } };
var q = (0, import_react3.createContext)({ theme: M });
var z = q.Provider;
function E() {
  var s74;
  return (null === (s74 = (0, import_react3.useContext)(q)) || void 0 === s74 ? void 0 : s74.theme) || M;
}
function H(s74) {
  return E().components[s74];
}

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var import_react4 = __toESM(require_react());

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/tw-join.mjs
function twJoin() {
  var index4 = 0;
  var argument;
  var resolvedValue;
  var string = "";
  while (index4 < arguments.length) {
    if (argument = arguments[index4++]) {
      if (resolvedValue = toValue(argument)) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}
function toValue(mix) {
  if (typeof mix === "string") {
    return mix;
  }
  var resolvedValue;
  var string = "";
  for (var k3 = 0; k3 < mix.length; k3++) {
    if (mix[k3]) {
      if (resolvedValue = toValue(mix[k3])) {
        string && (string += " ");
        string += resolvedValue;
      }
    }
  }
  return string;
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/class-utils.mjs
var CLASS_PART_SEPARATOR = "-";
function createClassUtils(config) {
  var classMap = createClassMap(config);
  var conflictingClassGroups = config.conflictingClassGroups, _config$conflictingCl = config.conflictingClassGroupModifiers, conflictingClassGroupModifiers = _config$conflictingCl === void 0 ? {} : _config$conflictingCl;
  function getClassGroupId(className) {
    var classParts = className.split(CLASS_PART_SEPARATOR);
    if (classParts[0] === "" && classParts.length !== 1) {
      classParts.shift();
    }
    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);
  }
  function getConflictingClassGroupIds(classGroupId, hasPostfixModifier) {
    var conflicts = conflictingClassGroups[classGroupId] || [];
    if (hasPostfixModifier && conflictingClassGroupModifiers[classGroupId]) {
      return [].concat(conflicts, conflictingClassGroupModifiers[classGroupId]);
    }
    return conflicts;
  }
  return {
    getClassGroupId,
    getConflictingClassGroupIds
  };
}
function getGroupRecursive(classParts, classPartObject) {
  var _a;
  if (classParts.length === 0) {
    return classPartObject.classGroupId;
  }
  var currentClassPart = classParts[0];
  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);
  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : void 0;
  if (classGroupFromNextClassPart) {
    return classGroupFromNextClassPart;
  }
  if (classPartObject.validators.length === 0) {
    return void 0;
  }
  var classRest = classParts.join(CLASS_PART_SEPARATOR);
  return (_a = classPartObject.validators.find(function(_ref) {
    var validator = _ref.validator;
    return validator(classRest);
  })) == null ? void 0 : _a.classGroupId;
}
var arbitraryPropertyRegex = /^\[(.+)\]$/;
function getGroupIdForArbitraryProperty(className) {
  if (arbitraryPropertyRegex.test(className)) {
    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];
    var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(":"));
    if (property) {
      return "arbitrary.." + property;
    }
  }
}
function createClassMap(config) {
  var theme = config.theme, prefix = config.prefix;
  var classMap = {
    nextPart: /* @__PURE__ */ new Map(),
    validators: []
  };
  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);
  prefixedClassGroupEntries.forEach(function(_ref2) {
    var classGroupId = _ref2[0], classGroup = _ref2[1];
    processClassesRecursively(classGroup, classMap, classGroupId, theme);
  });
  return classMap;
}
function processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {
  classGroup.forEach(function(classDefinition) {
    if (typeof classDefinition === "string") {
      var classPartObjectToEdit = classDefinition === "" ? classPartObject : getPart(classPartObject, classDefinition);
      classPartObjectToEdit.classGroupId = classGroupId;
      return;
    }
    if (typeof classDefinition === "function") {
      if (isThemeGetter(classDefinition)) {
        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);
        return;
      }
      classPartObject.validators.push({
        validator: classDefinition,
        classGroupId
      });
      return;
    }
    Object.entries(classDefinition).forEach(function(_ref3) {
      var key = _ref3[0], classGroup2 = _ref3[1];
      processClassesRecursively(classGroup2, getPart(classPartObject, key), classGroupId, theme);
    });
  });
}
function getPart(classPartObject, path) {
  var currentClassPartObject = classPartObject;
  path.split(CLASS_PART_SEPARATOR).forEach(function(pathPart) {
    if (!currentClassPartObject.nextPart.has(pathPart)) {
      currentClassPartObject.nextPart.set(pathPart, {
        nextPart: /* @__PURE__ */ new Map(),
        validators: []
      });
    }
    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);
  });
  return currentClassPartObject;
}
function isThemeGetter(func) {
  return func.isThemeGetter;
}
function getPrefixedClassGroupEntries(classGroupEntries, prefix) {
  if (!prefix) {
    return classGroupEntries;
  }
  return classGroupEntries.map(function(_ref4) {
    var classGroupId = _ref4[0], classGroup = _ref4[1];
    var prefixedClassGroup = classGroup.map(function(classDefinition) {
      if (typeof classDefinition === "string") {
        return prefix + classDefinition;
      }
      if (typeof classDefinition === "object") {
        return Object.fromEntries(Object.entries(classDefinition).map(function(_ref5) {
          var key = _ref5[0], value = _ref5[1];
          return [prefix + key, value];
        }));
      }
      return classDefinition;
    });
    return [classGroupId, prefixedClassGroup];
  });
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/lru-cache.mjs
function createLruCache(maxCacheSize) {
  if (maxCacheSize < 1) {
    return {
      get: function get() {
        return void 0;
      },
      set: function set() {
      }
    };
  }
  var cacheSize = 0;
  var cache = /* @__PURE__ */ new Map();
  var previousCache = /* @__PURE__ */ new Map();
  function update(key, value) {
    cache.set(key, value);
    cacheSize++;
    if (cacheSize > maxCacheSize) {
      cacheSize = 0;
      previousCache = cache;
      cache = /* @__PURE__ */ new Map();
    }
  }
  return {
    get: function get(key) {
      var value = cache.get(key);
      if (value !== void 0) {
        return value;
      }
      if ((value = previousCache.get(key)) !== void 0) {
        update(key, value);
        return value;
      }
    },
    set: function set(key, value) {
      if (cache.has(key)) {
        cache.set(key, value);
      } else {
        update(key, value);
      }
    }
  };
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/modifier-utils.mjs
var IMPORTANT_MODIFIER = "!";
function createSplitModifiers(config) {
  var separator = config.separator || ":";
  var isSeparatorSingleCharacter = separator.length === 1;
  var firstSeparatorCharacter = separator[0];
  var separatorLength = separator.length;
  return function splitModifiers(className) {
    var modifiers = [];
    var bracketDepth = 0;
    var modifierStart = 0;
    var postfixModifierPosition;
    for (var index4 = 0; index4 < className.length; index4++) {
      var currentCharacter = className[index4];
      if (bracketDepth === 0) {
        if (currentCharacter === firstSeparatorCharacter && (isSeparatorSingleCharacter || className.slice(index4, index4 + separatorLength) === separator)) {
          modifiers.push(className.slice(modifierStart, index4));
          modifierStart = index4 + separatorLength;
          continue;
        }
        if (currentCharacter === "/") {
          postfixModifierPosition = index4;
          continue;
        }
      }
      if (currentCharacter === "[") {
        bracketDepth++;
      } else if (currentCharacter === "]") {
        bracketDepth--;
      }
    }
    var baseClassNameWithImportantModifier = modifiers.length === 0 ? className : className.substring(modifierStart);
    var hasImportantModifier = baseClassNameWithImportantModifier.startsWith(IMPORTANT_MODIFIER);
    var baseClassName = hasImportantModifier ? baseClassNameWithImportantModifier.substring(1) : baseClassNameWithImportantModifier;
    var maybePostfixModifierPosition = postfixModifierPosition && postfixModifierPosition > modifierStart ? postfixModifierPosition - modifierStart : void 0;
    return {
      modifiers,
      hasImportantModifier,
      baseClassName,
      maybePostfixModifierPosition
    };
  };
}
function sortModifiers(modifiers) {
  if (modifiers.length <= 1) {
    return modifiers;
  }
  var sortedModifiers = [];
  var unsortedModifiers = [];
  modifiers.forEach(function(modifier) {
    var isArbitraryVariant = modifier[0] === "[";
    if (isArbitraryVariant) {
      sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort().concat([modifier]));
      unsortedModifiers = [];
    } else {
      unsortedModifiers.push(modifier);
    }
  });
  sortedModifiers.push.apply(sortedModifiers, unsortedModifiers.sort());
  return sortedModifiers;
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/config-utils.mjs
function createConfigUtils(config) {
  return {
    cache: createLruCache(config.cacheSize),
    splitModifiers: createSplitModifiers(config),
    ...createClassUtils(config)
  };
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/merge-classlist.mjs
var SPLIT_CLASSES_REGEX = /\s+/;
function mergeClassList(classList, configUtils) {
  var splitModifiers = configUtils.splitModifiers, getClassGroupId = configUtils.getClassGroupId, getConflictingClassGroupIds = configUtils.getConflictingClassGroupIds;
  var classGroupsInConflict = /* @__PURE__ */ new Set();
  return classList.trim().split(SPLIT_CLASSES_REGEX).map(function(originalClassName) {
    var _splitModifiers = splitModifiers(originalClassName), modifiers = _splitModifiers.modifiers, hasImportantModifier = _splitModifiers.hasImportantModifier, baseClassName = _splitModifiers.baseClassName, maybePostfixModifierPosition = _splitModifiers.maybePostfixModifierPosition;
    var classGroupId = getClassGroupId(maybePostfixModifierPosition ? baseClassName.substring(0, maybePostfixModifierPosition) : baseClassName);
    var hasPostfixModifier = Boolean(maybePostfixModifierPosition);
    if (!classGroupId) {
      if (!maybePostfixModifierPosition) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      classGroupId = getClassGroupId(baseClassName);
      if (!classGroupId) {
        return {
          isTailwindClass: false,
          originalClassName
        };
      }
      hasPostfixModifier = false;
    }
    var variantModifier = sortModifiers(modifiers).join(":");
    var modifierId = hasImportantModifier ? variantModifier + IMPORTANT_MODIFIER : variantModifier;
    return {
      isTailwindClass: true,
      modifierId,
      classGroupId,
      originalClassName,
      hasPostfixModifier
    };
  }).reverse().filter(function(parsed) {
    if (!parsed.isTailwindClass) {
      return true;
    }
    var modifierId = parsed.modifierId, classGroupId = parsed.classGroupId, hasPostfixModifier = parsed.hasPostfixModifier;
    var classId = modifierId + classGroupId;
    if (classGroupsInConflict.has(classId)) {
      return false;
    }
    classGroupsInConflict.add(classId);
    getConflictingClassGroupIds(classGroupId, hasPostfixModifier).forEach(function(group) {
      return classGroupsInConflict.add(modifierId + group);
    });
    return true;
  }).reverse().map(function(parsed) {
    return parsed.originalClassName;
  }).join(" ");
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/create-tailwind-merge.mjs
function createTailwindMerge() {
  for (var _len = arguments.length, createConfig = new Array(_len), _key = 0; _key < _len; _key++) {
    createConfig[_key] = arguments[_key];
  }
  var configUtils;
  var cacheGet;
  var cacheSet;
  var functionToCall = initTailwindMerge;
  function initTailwindMerge(classList) {
    var firstCreateConfig = createConfig[0], restCreateConfig = createConfig.slice(1);
    var config = restCreateConfig.reduce(function(previousConfig, createConfigCurrent) {
      return createConfigCurrent(previousConfig);
    }, firstCreateConfig());
    configUtils = createConfigUtils(config);
    cacheGet = configUtils.cache.get;
    cacheSet = configUtils.cache.set;
    functionToCall = tailwindMerge;
    return tailwindMerge(classList);
  }
  function tailwindMerge(classList) {
    var cachedResult = cacheGet(classList);
    if (cachedResult) {
      return cachedResult;
    }
    var result = mergeClassList(classList, configUtils);
    cacheSet(classList, result);
    return result;
  }
  return function callTailwindMerge() {
    return functionToCall(twJoin.apply(null, arguments));
  };
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/from-theme.mjs
function fromTheme(key) {
  var themeGetter = function themeGetter2(theme) {
    return theme[key] || [];
  };
  themeGetter.isThemeGetter = true;
  return themeGetter;
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/validators.mjs
var arbitraryValueRegex = /^\[(?:([a-z-]+):)?(.+)\]$/i;
var fractionRegex = /^\d+\/\d+$/;
var stringLengths = /* @__PURE__ */ new Set(["px", "full", "screen"]);
var tshirtUnitRegex = /^(\d+(\.\d+)?)?(xs|sm|md|lg|xl)$/;
var lengthUnitRegex = /\d+(%|px|r?em|[sdl]?v([hwib]|min|max)|pt|pc|in|cm|mm|cap|ch|ex|r?lh|cq(w|h|i|b|min|max))|\b(calc|min|max|clamp)\(.+\)|^0$/;
var shadowRegex = /^-?((\d+)?\.?(\d+)[a-z]+|0)_-?((\d+)?\.?(\d+)[a-z]+|0)/;
function isLength(value) {
  return isNumber(value) || stringLengths.has(value) || fractionRegex.test(value) || isArbitraryLength(value);
}
function isArbitraryLength(value) {
  return getIsArbitraryValue(value, "length", isLengthOnly);
}
function isArbitrarySize(value) {
  return getIsArbitraryValue(value, "size", isNever);
}
function isArbitraryPosition(value) {
  return getIsArbitraryValue(value, "position", isNever);
}
function isArbitraryUrl(value) {
  return getIsArbitraryValue(value, "url", isUrl);
}
function isArbitraryNumber(value) {
  return getIsArbitraryValue(value, "number", isNumber);
}
function isNumber(value) {
  return !Number.isNaN(Number(value));
}
function isPercent(value) {
  return value.endsWith("%") && isNumber(value.slice(0, -1));
}
function isInteger(value) {
  return isIntegerOnly(value) || getIsArbitraryValue(value, "number", isIntegerOnly);
}
function isArbitraryValue(value) {
  return arbitraryValueRegex.test(value);
}
function isAny() {
  return true;
}
function isTshirtSize(value) {
  return tshirtUnitRegex.test(value);
}
function isArbitraryShadow(value) {
  return getIsArbitraryValue(value, "", isShadow);
}
function getIsArbitraryValue(value, label, testValue) {
  var result = arbitraryValueRegex.exec(value);
  if (result) {
    if (result[1]) {
      return result[1] === label;
    }
    return testValue(result[2]);
  }
  return false;
}
function isLengthOnly(value) {
  return lengthUnitRegex.test(value);
}
function isNever() {
  return false;
}
function isUrl(value) {
  return value.startsWith("url(");
}
function isIntegerOnly(value) {
  return Number.isInteger(Number(value));
}
function isShadow(value) {
  return shadowRegex.test(value);
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/default-config.mjs
function getDefaultConfig() {
  var colors = fromTheme("colors");
  var spacing = fromTheme("spacing");
  var blur = fromTheme("blur");
  var brightness = fromTheme("brightness");
  var borderColor = fromTheme("borderColor");
  var borderRadius = fromTheme("borderRadius");
  var borderSpacing = fromTheme("borderSpacing");
  var borderWidth = fromTheme("borderWidth");
  var contrast = fromTheme("contrast");
  var grayscale = fromTheme("grayscale");
  var hueRotate = fromTheme("hueRotate");
  var invert = fromTheme("invert");
  var gap = fromTheme("gap");
  var gradientColorStops = fromTheme("gradientColorStops");
  var gradientColorStopPositions = fromTheme("gradientColorStopPositions");
  var inset = fromTheme("inset");
  var margin = fromTheme("margin");
  var opacity = fromTheme("opacity");
  var padding = fromTheme("padding");
  var saturate = fromTheme("saturate");
  var scale = fromTheme("scale");
  var sepia = fromTheme("sepia");
  var skew = fromTheme("skew");
  var space = fromTheme("space");
  var translate = fromTheme("translate");
  var getOverscroll = function getOverscroll2() {
    return ["auto", "contain", "none"];
  };
  var getOverflow = function getOverflow2() {
    return ["auto", "hidden", "clip", "visible", "scroll"];
  };
  var getSpacingWithAutoAndArbitrary = function getSpacingWithAutoAndArbitrary2() {
    return ["auto", isArbitraryValue, spacing];
  };
  var getSpacingWithArbitrary = function getSpacingWithArbitrary2() {
    return [isArbitraryValue, spacing];
  };
  var getLengthWithEmpty = function getLengthWithEmpty2() {
    return ["", isLength];
  };
  var getNumberWithAutoAndArbitrary = function getNumberWithAutoAndArbitrary2() {
    return ["auto", isNumber, isArbitraryValue];
  };
  var getPositions = function getPositions2() {
    return ["bottom", "center", "left", "left-bottom", "left-top", "right", "right-bottom", "right-top", "top"];
  };
  var getLineStyles = function getLineStyles2() {
    return ["solid", "dashed", "dotted", "double", "none"];
  };
  var getBlendModes = function getBlendModes2() {
    return ["normal", "multiply", "screen", "overlay", "darken", "lighten", "color-dodge", "color-burn", "hard-light", "soft-light", "difference", "exclusion", "hue", "saturation", "color", "luminosity", "plus-lighter"];
  };
  var getAlign = function getAlign2() {
    return ["start", "end", "center", "between", "around", "evenly", "stretch"];
  };
  var getZeroAndEmpty = function getZeroAndEmpty2() {
    return ["", "0", isArbitraryValue];
  };
  var getBreaks = function getBreaks2() {
    return ["auto", "avoid", "all", "avoid-page", "page", "left", "right", "column"];
  };
  var getNumber = function getNumber2() {
    return [isNumber, isArbitraryNumber];
  };
  var getNumberAndArbitrary = function getNumberAndArbitrary2() {
    return [isNumber, isArbitraryValue];
  };
  return {
    cacheSize: 500,
    theme: {
      colors: [isAny],
      spacing: [isLength],
      blur: ["none", "", isTshirtSize, isArbitraryValue],
      brightness: getNumber(),
      borderColor: [colors],
      borderRadius: ["none", "", "full", isTshirtSize, isArbitraryValue],
      borderSpacing: getSpacingWithArbitrary(),
      borderWidth: getLengthWithEmpty(),
      contrast: getNumber(),
      grayscale: getZeroAndEmpty(),
      hueRotate: getNumberAndArbitrary(),
      invert: getZeroAndEmpty(),
      gap: getSpacingWithArbitrary(),
      gradientColorStops: [colors],
      gradientColorStopPositions: [isPercent, isArbitraryLength],
      inset: getSpacingWithAutoAndArbitrary(),
      margin: getSpacingWithAutoAndArbitrary(),
      opacity: getNumber(),
      padding: getSpacingWithArbitrary(),
      saturate: getNumber(),
      scale: getNumber(),
      sepia: getZeroAndEmpty(),
      skew: getNumberAndArbitrary(),
      space: getSpacingWithArbitrary(),
      translate: getSpacingWithArbitrary()
    },
    classGroups: {
      // Layout
      /**
       * Aspect Ratio
       * @see https://tailwindcss.com/docs/aspect-ratio
       */
      aspect: [{
        aspect: ["auto", "square", "video", isArbitraryValue]
      }],
      /**
       * Container
       * @see https://tailwindcss.com/docs/container
       */
      container: ["container"],
      /**
       * Columns
       * @see https://tailwindcss.com/docs/columns
       */
      columns: [{
        columns: [isTshirtSize]
      }],
      /**
       * Break After
       * @see https://tailwindcss.com/docs/break-after
       */
      "break-after": [{
        "break-after": getBreaks()
      }],
      /**
       * Break Before
       * @see https://tailwindcss.com/docs/break-before
       */
      "break-before": [{
        "break-before": getBreaks()
      }],
      /**
       * Break Inside
       * @see https://tailwindcss.com/docs/break-inside
       */
      "break-inside": [{
        "break-inside": ["auto", "avoid", "avoid-page", "avoid-column"]
      }],
      /**
       * Box Decoration Break
       * @see https://tailwindcss.com/docs/box-decoration-break
       */
      "box-decoration": [{
        "box-decoration": ["slice", "clone"]
      }],
      /**
       * Box Sizing
       * @see https://tailwindcss.com/docs/box-sizing
       */
      box: [{
        box: ["border", "content"]
      }],
      /**
       * Display
       * @see https://tailwindcss.com/docs/display
       */
      display: ["block", "inline-block", "inline", "flex", "inline-flex", "table", "inline-table", "table-caption", "table-cell", "table-column", "table-column-group", "table-footer-group", "table-header-group", "table-row-group", "table-row", "flow-root", "grid", "inline-grid", "contents", "list-item", "hidden"],
      /**
       * Floats
       * @see https://tailwindcss.com/docs/float
       */
      "float": [{
        "float": ["right", "left", "none"]
      }],
      /**
       * Clear
       * @see https://tailwindcss.com/docs/clear
       */
      clear: [{
        clear: ["left", "right", "both", "none"]
      }],
      /**
       * Isolation
       * @see https://tailwindcss.com/docs/isolation
       */
      isolation: ["isolate", "isolation-auto"],
      /**
       * Object Fit
       * @see https://tailwindcss.com/docs/object-fit
       */
      "object-fit": [{
        object: ["contain", "cover", "fill", "none", "scale-down"]
      }],
      /**
       * Object Position
       * @see https://tailwindcss.com/docs/object-position
       */
      "object-position": [{
        object: [].concat(getPositions(), [isArbitraryValue])
      }],
      /**
       * Overflow
       * @see https://tailwindcss.com/docs/overflow
       */
      overflow: [{
        overflow: getOverflow()
      }],
      /**
       * Overflow X
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-x": [{
        "overflow-x": getOverflow()
      }],
      /**
       * Overflow Y
       * @see https://tailwindcss.com/docs/overflow
       */
      "overflow-y": [{
        "overflow-y": getOverflow()
      }],
      /**
       * Overscroll Behavior
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      overscroll: [{
        overscroll: getOverscroll()
      }],
      /**
       * Overscroll Behavior X
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-x": [{
        "overscroll-x": getOverscroll()
      }],
      /**
       * Overscroll Behavior Y
       * @see https://tailwindcss.com/docs/overscroll-behavior
       */
      "overscroll-y": [{
        "overscroll-y": getOverscroll()
      }],
      /**
       * Position
       * @see https://tailwindcss.com/docs/position
       */
      position: ["static", "fixed", "absolute", "relative", "sticky"],
      /**
       * Top / Right / Bottom / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      inset: [{
        inset: [inset]
      }],
      /**
       * Right / Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-x": [{
        "inset-x": [inset]
      }],
      /**
       * Top / Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      "inset-y": [{
        "inset-y": [inset]
      }],
      /**
       * Start
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      start: [{
        start: [inset]
      }],
      /**
       * End
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      end: [{
        end: [inset]
      }],
      /**
       * Top
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      top: [{
        top: [inset]
      }],
      /**
       * Right
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      right: [{
        right: [inset]
      }],
      /**
       * Bottom
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      bottom: [{
        bottom: [inset]
      }],
      /**
       * Left
       * @see https://tailwindcss.com/docs/top-right-bottom-left
       */
      left: [{
        left: [inset]
      }],
      /**
       * Visibility
       * @see https://tailwindcss.com/docs/visibility
       */
      visibility: ["visible", "invisible", "collapse"],
      /**
       * Z-Index
       * @see https://tailwindcss.com/docs/z-index
       */
      z: [{
        z: ["auto", isInteger]
      }],
      // Flexbox and Grid
      /**
       * Flex Basis
       * @see https://tailwindcss.com/docs/flex-basis
       */
      basis: [{
        basis: getSpacingWithAutoAndArbitrary()
      }],
      /**
       * Flex Direction
       * @see https://tailwindcss.com/docs/flex-direction
       */
      "flex-direction": [{
        flex: ["row", "row-reverse", "col", "col-reverse"]
      }],
      /**
       * Flex Wrap
       * @see https://tailwindcss.com/docs/flex-wrap
       */
      "flex-wrap": [{
        flex: ["wrap", "wrap-reverse", "nowrap"]
      }],
      /**
       * Flex
       * @see https://tailwindcss.com/docs/flex
       */
      flex: [{
        flex: ["1", "auto", "initial", "none", isArbitraryValue]
      }],
      /**
       * Flex Grow
       * @see https://tailwindcss.com/docs/flex-grow
       */
      grow: [{
        grow: getZeroAndEmpty()
      }],
      /**
       * Flex Shrink
       * @see https://tailwindcss.com/docs/flex-shrink
       */
      shrink: [{
        shrink: getZeroAndEmpty()
      }],
      /**
       * Order
       * @see https://tailwindcss.com/docs/order
       */
      order: [{
        order: ["first", "last", "none", isInteger]
      }],
      /**
       * Grid Template Columns
       * @see https://tailwindcss.com/docs/grid-template-columns
       */
      "grid-cols": [{
        "grid-cols": [isAny]
      }],
      /**
       * Grid Column Start / End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start-end": [{
        col: ["auto", {
          span: ["full", isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Column Start
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-start": [{
        "col-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Column End
       * @see https://tailwindcss.com/docs/grid-column
       */
      "col-end": [{
        "col-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Template Rows
       * @see https://tailwindcss.com/docs/grid-template-rows
       */
      "grid-rows": [{
        "grid-rows": [isAny]
      }],
      /**
       * Grid Row Start / End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start-end": [{
        row: ["auto", {
          span: [isInteger]
        }, isArbitraryValue]
      }],
      /**
       * Grid Row Start
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-start": [{
        "row-start": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Row End
       * @see https://tailwindcss.com/docs/grid-row
       */
      "row-end": [{
        "row-end": getNumberWithAutoAndArbitrary()
      }],
      /**
       * Grid Auto Flow
       * @see https://tailwindcss.com/docs/grid-auto-flow
       */
      "grid-flow": [{
        "grid-flow": ["row", "col", "dense", "row-dense", "col-dense"]
      }],
      /**
       * Grid Auto Columns
       * @see https://tailwindcss.com/docs/grid-auto-columns
       */
      "auto-cols": [{
        "auto-cols": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Grid Auto Rows
       * @see https://tailwindcss.com/docs/grid-auto-rows
       */
      "auto-rows": [{
        "auto-rows": ["auto", "min", "max", "fr", isArbitraryValue]
      }],
      /**
       * Gap
       * @see https://tailwindcss.com/docs/gap
       */
      gap: [{
        gap: [gap]
      }],
      /**
       * Gap X
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-x": [{
        "gap-x": [gap]
      }],
      /**
       * Gap Y
       * @see https://tailwindcss.com/docs/gap
       */
      "gap-y": [{
        "gap-y": [gap]
      }],
      /**
       * Justify Content
       * @see https://tailwindcss.com/docs/justify-content
       */
      "justify-content": [{
        justify: ["normal"].concat(getAlign())
      }],
      /**
       * Justify Items
       * @see https://tailwindcss.com/docs/justify-items
       */
      "justify-items": [{
        "justify-items": ["start", "end", "center", "stretch"]
      }],
      /**
       * Justify Self
       * @see https://tailwindcss.com/docs/justify-self
       */
      "justify-self": [{
        "justify-self": ["auto", "start", "end", "center", "stretch"]
      }],
      /**
       * Align Content
       * @see https://tailwindcss.com/docs/align-content
       */
      "align-content": [{
        content: ["normal"].concat(getAlign(), ["baseline"])
      }],
      /**
       * Align Items
       * @see https://tailwindcss.com/docs/align-items
       */
      "align-items": [{
        items: ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Align Self
       * @see https://tailwindcss.com/docs/align-self
       */
      "align-self": [{
        self: ["auto", "start", "end", "center", "stretch", "baseline"]
      }],
      /**
       * Place Content
       * @see https://tailwindcss.com/docs/place-content
       */
      "place-content": [{
        "place-content": [].concat(getAlign(), ["baseline"])
      }],
      /**
       * Place Items
       * @see https://tailwindcss.com/docs/place-items
       */
      "place-items": [{
        "place-items": ["start", "end", "center", "baseline", "stretch"]
      }],
      /**
       * Place Self
       * @see https://tailwindcss.com/docs/place-self
       */
      "place-self": [{
        "place-self": ["auto", "start", "end", "center", "stretch"]
      }],
      // Spacing
      /**
       * Padding
       * @see https://tailwindcss.com/docs/padding
       */
      p: [{
        p: [padding]
      }],
      /**
       * Padding X
       * @see https://tailwindcss.com/docs/padding
       */
      px: [{
        px: [padding]
      }],
      /**
       * Padding Y
       * @see https://tailwindcss.com/docs/padding
       */
      py: [{
        py: [padding]
      }],
      /**
       * Padding Start
       * @see https://tailwindcss.com/docs/padding
       */
      ps: [{
        ps: [padding]
      }],
      /**
       * Padding End
       * @see https://tailwindcss.com/docs/padding
       */
      pe: [{
        pe: [padding]
      }],
      /**
       * Padding Top
       * @see https://tailwindcss.com/docs/padding
       */
      pt: [{
        pt: [padding]
      }],
      /**
       * Padding Right
       * @see https://tailwindcss.com/docs/padding
       */
      pr: [{
        pr: [padding]
      }],
      /**
       * Padding Bottom
       * @see https://tailwindcss.com/docs/padding
       */
      pb: [{
        pb: [padding]
      }],
      /**
       * Padding Left
       * @see https://tailwindcss.com/docs/padding
       */
      pl: [{
        pl: [padding]
      }],
      /**
       * Margin
       * @see https://tailwindcss.com/docs/margin
       */
      m: [{
        m: [margin]
      }],
      /**
       * Margin X
       * @see https://tailwindcss.com/docs/margin
       */
      mx: [{
        mx: [margin]
      }],
      /**
       * Margin Y
       * @see https://tailwindcss.com/docs/margin
       */
      my: [{
        my: [margin]
      }],
      /**
       * Margin Start
       * @see https://tailwindcss.com/docs/margin
       */
      ms: [{
        ms: [margin]
      }],
      /**
       * Margin End
       * @see https://tailwindcss.com/docs/margin
       */
      me: [{
        me: [margin]
      }],
      /**
       * Margin Top
       * @see https://tailwindcss.com/docs/margin
       */
      mt: [{
        mt: [margin]
      }],
      /**
       * Margin Right
       * @see https://tailwindcss.com/docs/margin
       */
      mr: [{
        mr: [margin]
      }],
      /**
       * Margin Bottom
       * @see https://tailwindcss.com/docs/margin
       */
      mb: [{
        mb: [margin]
      }],
      /**
       * Margin Left
       * @see https://tailwindcss.com/docs/margin
       */
      ml: [{
        ml: [margin]
      }],
      /**
       * Space Between X
       * @see https://tailwindcss.com/docs/space
       */
      "space-x": [{
        "space-x": [space]
      }],
      /**
       * Space Between X Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-x-reverse": ["space-x-reverse"],
      /**
       * Space Between Y
       * @see https://tailwindcss.com/docs/space
       */
      "space-y": [{
        "space-y": [space]
      }],
      /**
       * Space Between Y Reverse
       * @see https://tailwindcss.com/docs/space
       */
      "space-y-reverse": ["space-y-reverse"],
      // Sizing
      /**
       * Width
       * @see https://tailwindcss.com/docs/width
       */
      w: [{
        w: ["auto", "min", "max", "fit", isArbitraryValue, spacing]
      }],
      /**
       * Min-Width
       * @see https://tailwindcss.com/docs/min-width
       */
      "min-w": [{
        "min-w": ["min", "max", "fit", isArbitraryValue, isLength]
      }],
      /**
       * Max-Width
       * @see https://tailwindcss.com/docs/max-width
       */
      "max-w": [{
        "max-w": ["0", "none", "full", "min", "max", "fit", "prose", {
          screen: [isTshirtSize]
        }, isTshirtSize, isArbitraryValue]
      }],
      /**
       * Height
       * @see https://tailwindcss.com/docs/height
       */
      h: [{
        h: [isArbitraryValue, spacing, "auto", "min", "max", "fit"]
      }],
      /**
       * Min-Height
       * @see https://tailwindcss.com/docs/min-height
       */
      "min-h": [{
        "min-h": ["min", "max", "fit", isArbitraryValue, isLength]
      }],
      /**
       * Max-Height
       * @see https://tailwindcss.com/docs/max-height
       */
      "max-h": [{
        "max-h": [isArbitraryValue, spacing, "min", "max", "fit"]
      }],
      // Typography
      /**
       * Font Size
       * @see https://tailwindcss.com/docs/font-size
       */
      "font-size": [{
        text: ["base", isTshirtSize, isArbitraryLength]
      }],
      /**
       * Font Smoothing
       * @see https://tailwindcss.com/docs/font-smoothing
       */
      "font-smoothing": ["antialiased", "subpixel-antialiased"],
      /**
       * Font Style
       * @see https://tailwindcss.com/docs/font-style
       */
      "font-style": ["italic", "not-italic"],
      /**
       * Font Weight
       * @see https://tailwindcss.com/docs/font-weight
       */
      "font-weight": [{
        font: ["thin", "extralight", "light", "normal", "medium", "semibold", "bold", "extrabold", "black", isArbitraryNumber]
      }],
      /**
       * Font Family
       * @see https://tailwindcss.com/docs/font-family
       */
      "font-family": [{
        font: [isAny]
      }],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-normal": ["normal-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-ordinal": ["ordinal"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-slashed-zero": ["slashed-zero"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-figure": ["lining-nums", "oldstyle-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-spacing": ["proportional-nums", "tabular-nums"],
      /**
       * Font Variant Numeric
       * @see https://tailwindcss.com/docs/font-variant-numeric
       */
      "fvn-fraction": ["diagonal-fractions", "stacked-fractons"],
      /**
       * Letter Spacing
       * @see https://tailwindcss.com/docs/letter-spacing
       */
      tracking: [{
        tracking: ["tighter", "tight", "normal", "wide", "wider", "widest", isArbitraryValue]
      }],
      /**
       * Line Clamp
       * @see https://tailwindcss.com/docs/line-clamp
       */
      "line-clamp": [{
        "line-clamp": ["none", isNumber, isArbitraryNumber]
      }],
      /**
       * Line Height
       * @see https://tailwindcss.com/docs/line-height
       */
      leading: [{
        leading: ["none", "tight", "snug", "normal", "relaxed", "loose", isArbitraryValue, isLength]
      }],
      /**
       * List Style Image
       * @see https://tailwindcss.com/docs/list-style-image
       */
      "list-image": [{
        "list-image": ["none", isArbitraryValue]
      }],
      /**
       * List Style Type
       * @see https://tailwindcss.com/docs/list-style-type
       */
      "list-style-type": [{
        list: ["none", "disc", "decimal", isArbitraryValue]
      }],
      /**
       * List Style Position
       * @see https://tailwindcss.com/docs/list-style-position
       */
      "list-style-position": [{
        list: ["inside", "outside"]
      }],
      /**
       * Placeholder Color
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/placeholder-color
       */
      "placeholder-color": [{
        placeholder: [colors]
      }],
      /**
       * Placeholder Opacity
       * @see https://tailwindcss.com/docs/placeholder-opacity
       */
      "placeholder-opacity": [{
        "placeholder-opacity": [opacity]
      }],
      /**
       * Text Alignment
       * @see https://tailwindcss.com/docs/text-align
       */
      "text-alignment": [{
        text: ["left", "center", "right", "justify", "start", "end"]
      }],
      /**
       * Text Color
       * @see https://tailwindcss.com/docs/text-color
       */
      "text-color": [{
        text: [colors]
      }],
      /**
       * Text Opacity
       * @see https://tailwindcss.com/docs/text-opacity
       */
      "text-opacity": [{
        "text-opacity": [opacity]
      }],
      /**
       * Text Decoration
       * @see https://tailwindcss.com/docs/text-decoration
       */
      "text-decoration": ["underline", "overline", "line-through", "no-underline"],
      /**
       * Text Decoration Style
       * @see https://tailwindcss.com/docs/text-decoration-style
       */
      "text-decoration-style": [{
        decoration: [].concat(getLineStyles(), ["wavy"])
      }],
      /**
       * Text Decoration Thickness
       * @see https://tailwindcss.com/docs/text-decoration-thickness
       */
      "text-decoration-thickness": [{
        decoration: ["auto", "from-font", isLength]
      }],
      /**
       * Text Underline Offset
       * @see https://tailwindcss.com/docs/text-underline-offset
       */
      "underline-offset": [{
        "underline-offset": ["auto", isArbitraryValue, isLength]
      }],
      /**
       * Text Decoration Color
       * @see https://tailwindcss.com/docs/text-decoration-color
       */
      "text-decoration-color": [{
        decoration: [colors]
      }],
      /**
       * Text Transform
       * @see https://tailwindcss.com/docs/text-transform
       */
      "text-transform": ["uppercase", "lowercase", "capitalize", "normal-case"],
      /**
       * Text Overflow
       * @see https://tailwindcss.com/docs/text-overflow
       */
      "text-overflow": ["truncate", "text-ellipsis", "text-clip"],
      /**
       * Text Indent
       * @see https://tailwindcss.com/docs/text-indent
       */
      indent: [{
        indent: getSpacingWithArbitrary()
      }],
      /**
       * Vertical Alignment
       * @see https://tailwindcss.com/docs/vertical-align
       */
      "vertical-align": [{
        align: ["baseline", "top", "middle", "bottom", "text-top", "text-bottom", "sub", "super", isArbitraryValue]
      }],
      /**
       * Whitespace
       * @see https://tailwindcss.com/docs/whitespace
       */
      whitespace: [{
        whitespace: ["normal", "nowrap", "pre", "pre-line", "pre-wrap", "break-spaces"]
      }],
      /**
       * Word Break
       * @see https://tailwindcss.com/docs/word-break
       */
      "break": [{
        "break": ["normal", "words", "all", "keep"]
      }],
      /**
       * Hyphens
       * @see https://tailwindcss.com/docs/hyphens
       */
      hyphens: [{
        hyphens: ["none", "manual", "auto"]
      }],
      /**
       * Content
       * @see https://tailwindcss.com/docs/content
       */
      content: [{
        content: ["none", isArbitraryValue]
      }],
      // Backgrounds
      /**
       * Background Attachment
       * @see https://tailwindcss.com/docs/background-attachment
       */
      "bg-attachment": [{
        bg: ["fixed", "local", "scroll"]
      }],
      /**
       * Background Clip
       * @see https://tailwindcss.com/docs/background-clip
       */
      "bg-clip": [{
        "bg-clip": ["border", "padding", "content", "text"]
      }],
      /**
       * Background Opacity
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/background-opacity
       */
      "bg-opacity": [{
        "bg-opacity": [opacity]
      }],
      /**
       * Background Origin
       * @see https://tailwindcss.com/docs/background-origin
       */
      "bg-origin": [{
        "bg-origin": ["border", "padding", "content"]
      }],
      /**
       * Background Position
       * @see https://tailwindcss.com/docs/background-position
       */
      "bg-position": [{
        bg: [].concat(getPositions(), [isArbitraryPosition])
      }],
      /**
       * Background Repeat
       * @see https://tailwindcss.com/docs/background-repeat
       */
      "bg-repeat": [{
        bg: ["no-repeat", {
          repeat: ["", "x", "y", "round", "space"]
        }]
      }],
      /**
       * Background Size
       * @see https://tailwindcss.com/docs/background-size
       */
      "bg-size": [{
        bg: ["auto", "cover", "contain", isArbitrarySize]
      }],
      /**
       * Background Image
       * @see https://tailwindcss.com/docs/background-image
       */
      "bg-image": [{
        bg: ["none", {
          "gradient-to": ["t", "tr", "r", "br", "b", "bl", "l", "tl"]
        }, isArbitraryUrl]
      }],
      /**
       * Background Color
       * @see https://tailwindcss.com/docs/background-color
       */
      "bg-color": [{
        bg: [colors]
      }],
      /**
       * Gradient Color Stops From Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from-pos": [{
        from: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops Via Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via-pos": [{
        via: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops To Position
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to-pos": [{
        to: [gradientColorStopPositions]
      }],
      /**
       * Gradient Color Stops From
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-from": [{
        from: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops Via
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-via": [{
        via: [gradientColorStops]
      }],
      /**
       * Gradient Color Stops To
       * @see https://tailwindcss.com/docs/gradient-color-stops
       */
      "gradient-to": [{
        to: [gradientColorStops]
      }],
      // Borders
      /**
       * Border Radius
       * @see https://tailwindcss.com/docs/border-radius
       */
      rounded: [{
        rounded: [borderRadius]
      }],
      /**
       * Border Radius Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-s": [{
        "rounded-s": [borderRadius]
      }],
      /**
       * Border Radius End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-e": [{
        "rounded-e": [borderRadius]
      }],
      /**
       * Border Radius Top
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-t": [{
        "rounded-t": [borderRadius]
      }],
      /**
       * Border Radius Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-r": [{
        "rounded-r": [borderRadius]
      }],
      /**
       * Border Radius Bottom
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-b": [{
        "rounded-b": [borderRadius]
      }],
      /**
       * Border Radius Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-l": [{
        "rounded-l": [borderRadius]
      }],
      /**
       * Border Radius Start Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ss": [{
        "rounded-ss": [borderRadius]
      }],
      /**
       * Border Radius Start End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-se": [{
        "rounded-se": [borderRadius]
      }],
      /**
       * Border Radius End End
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-ee": [{
        "rounded-ee": [borderRadius]
      }],
      /**
       * Border Radius End Start
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-es": [{
        "rounded-es": [borderRadius]
      }],
      /**
       * Border Radius Top Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tl": [{
        "rounded-tl": [borderRadius]
      }],
      /**
       * Border Radius Top Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-tr": [{
        "rounded-tr": [borderRadius]
      }],
      /**
       * Border Radius Bottom Right
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-br": [{
        "rounded-br": [borderRadius]
      }],
      /**
       * Border Radius Bottom Left
       * @see https://tailwindcss.com/docs/border-radius
       */
      "rounded-bl": [{
        "rounded-bl": [borderRadius]
      }],
      /**
       * Border Width
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w": [{
        border: [borderWidth]
      }],
      /**
       * Border Width X
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-x": [{
        "border-x": [borderWidth]
      }],
      /**
       * Border Width Y
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-y": [{
        "border-y": [borderWidth]
      }],
      /**
       * Border Width Start
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-s": [{
        "border-s": [borderWidth]
      }],
      /**
       * Border Width End
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-e": [{
        "border-e": [borderWidth]
      }],
      /**
       * Border Width Top
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-t": [{
        "border-t": [borderWidth]
      }],
      /**
       * Border Width Right
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-r": [{
        "border-r": [borderWidth]
      }],
      /**
       * Border Width Bottom
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-b": [{
        "border-b": [borderWidth]
      }],
      /**
       * Border Width Left
       * @see https://tailwindcss.com/docs/border-width
       */
      "border-w-l": [{
        "border-l": [borderWidth]
      }],
      /**
       * Border Opacity
       * @see https://tailwindcss.com/docs/border-opacity
       */
      "border-opacity": [{
        "border-opacity": [opacity]
      }],
      /**
       * Border Style
       * @see https://tailwindcss.com/docs/border-style
       */
      "border-style": [{
        border: [].concat(getLineStyles(), ["hidden"])
      }],
      /**
       * Divide Width X
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x": [{
        "divide-x": [borderWidth]
      }],
      /**
       * Divide Width X Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-x-reverse": ["divide-x-reverse"],
      /**
       * Divide Width Y
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y": [{
        "divide-y": [borderWidth]
      }],
      /**
       * Divide Width Y Reverse
       * @see https://tailwindcss.com/docs/divide-width
       */
      "divide-y-reverse": ["divide-y-reverse"],
      /**
       * Divide Opacity
       * @see https://tailwindcss.com/docs/divide-opacity
       */
      "divide-opacity": [{
        "divide-opacity": [opacity]
      }],
      /**
       * Divide Style
       * @see https://tailwindcss.com/docs/divide-style
       */
      "divide-style": [{
        divide: getLineStyles()
      }],
      /**
       * Border Color
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color": [{
        border: [borderColor]
      }],
      /**
       * Border Color X
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-x": [{
        "border-x": [borderColor]
      }],
      /**
       * Border Color Y
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-y": [{
        "border-y": [borderColor]
      }],
      /**
       * Border Color Top
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-t": [{
        "border-t": [borderColor]
      }],
      /**
       * Border Color Right
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-r": [{
        "border-r": [borderColor]
      }],
      /**
       * Border Color Bottom
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-b": [{
        "border-b": [borderColor]
      }],
      /**
       * Border Color Left
       * @see https://tailwindcss.com/docs/border-color
       */
      "border-color-l": [{
        "border-l": [borderColor]
      }],
      /**
       * Divide Color
       * @see https://tailwindcss.com/docs/divide-color
       */
      "divide-color": [{
        divide: [borderColor]
      }],
      /**
       * Outline Style
       * @see https://tailwindcss.com/docs/outline-style
       */
      "outline-style": [{
        outline: [""].concat(getLineStyles())
      }],
      /**
       * Outline Offset
       * @see https://tailwindcss.com/docs/outline-offset
       */
      "outline-offset": [{
        "outline-offset": [isArbitraryValue, isLength]
      }],
      /**
       * Outline Width
       * @see https://tailwindcss.com/docs/outline-width
       */
      "outline-w": [{
        outline: [isLength]
      }],
      /**
       * Outline Color
       * @see https://tailwindcss.com/docs/outline-color
       */
      "outline-color": [{
        outline: [colors]
      }],
      /**
       * Ring Width
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w": [{
        ring: getLengthWithEmpty()
      }],
      /**
       * Ring Width Inset
       * @see https://tailwindcss.com/docs/ring-width
       */
      "ring-w-inset": ["ring-inset"],
      /**
       * Ring Color
       * @see https://tailwindcss.com/docs/ring-color
       */
      "ring-color": [{
        ring: [colors]
      }],
      /**
       * Ring Opacity
       * @see https://tailwindcss.com/docs/ring-opacity
       */
      "ring-opacity": [{
        "ring-opacity": [opacity]
      }],
      /**
       * Ring Offset Width
       * @see https://tailwindcss.com/docs/ring-offset-width
       */
      "ring-offset-w": [{
        "ring-offset": [isLength]
      }],
      /**
       * Ring Offset Color
       * @see https://tailwindcss.com/docs/ring-offset-color
       */
      "ring-offset-color": [{
        "ring-offset": [colors]
      }],
      // Effects
      /**
       * Box Shadow
       * @see https://tailwindcss.com/docs/box-shadow
       */
      shadow: [{
        shadow: ["", "inner", "none", isTshirtSize, isArbitraryShadow]
      }],
      /**
       * Box Shadow Color
       * @see https://tailwindcss.com/docs/box-shadow-color
       */
      "shadow-color": [{
        shadow: [isAny]
      }],
      /**
       * Opacity
       * @see https://tailwindcss.com/docs/opacity
       */
      opacity: [{
        opacity: [opacity]
      }],
      /**
       * Mix Blend Mode
       * @see https://tailwindcss.com/docs/mix-blend-mode
       */
      "mix-blend": [{
        "mix-blend": getBlendModes()
      }],
      /**
       * Background Blend Mode
       * @see https://tailwindcss.com/docs/background-blend-mode
       */
      "bg-blend": [{
        "bg-blend": getBlendModes()
      }],
      // Filters
      /**
       * Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/filter
       */
      filter: [{
        filter: ["", "none"]
      }],
      /**
       * Blur
       * @see https://tailwindcss.com/docs/blur
       */
      blur: [{
        blur: [blur]
      }],
      /**
       * Brightness
       * @see https://tailwindcss.com/docs/brightness
       */
      brightness: [{
        brightness: [brightness]
      }],
      /**
       * Contrast
       * @see https://tailwindcss.com/docs/contrast
       */
      contrast: [{
        contrast: [contrast]
      }],
      /**
       * Drop Shadow
       * @see https://tailwindcss.com/docs/drop-shadow
       */
      "drop-shadow": [{
        "drop-shadow": ["", "none", isTshirtSize, isArbitraryValue]
      }],
      /**
       * Grayscale
       * @see https://tailwindcss.com/docs/grayscale
       */
      grayscale: [{
        grayscale: [grayscale]
      }],
      /**
       * Hue Rotate
       * @see https://tailwindcss.com/docs/hue-rotate
       */
      "hue-rotate": [{
        "hue-rotate": [hueRotate]
      }],
      /**
       * Invert
       * @see https://tailwindcss.com/docs/invert
       */
      invert: [{
        invert: [invert]
      }],
      /**
       * Saturate
       * @see https://tailwindcss.com/docs/saturate
       */
      saturate: [{
        saturate: [saturate]
      }],
      /**
       * Sepia
       * @see https://tailwindcss.com/docs/sepia
       */
      sepia: [{
        sepia: [sepia]
      }],
      /**
       * Backdrop Filter
       * @deprecated since Tailwind CSS v3.0.0
       * @see https://tailwindcss.com/docs/backdrop-filter
       */
      "backdrop-filter": [{
        "backdrop-filter": ["", "none"]
      }],
      /**
       * Backdrop Blur
       * @see https://tailwindcss.com/docs/backdrop-blur
       */
      "backdrop-blur": [{
        "backdrop-blur": [blur]
      }],
      /**
       * Backdrop Brightness
       * @see https://tailwindcss.com/docs/backdrop-brightness
       */
      "backdrop-brightness": [{
        "backdrop-brightness": [brightness]
      }],
      /**
       * Backdrop Contrast
       * @see https://tailwindcss.com/docs/backdrop-contrast
       */
      "backdrop-contrast": [{
        "backdrop-contrast": [contrast]
      }],
      /**
       * Backdrop Grayscale
       * @see https://tailwindcss.com/docs/backdrop-grayscale
       */
      "backdrop-grayscale": [{
        "backdrop-grayscale": [grayscale]
      }],
      /**
       * Backdrop Hue Rotate
       * @see https://tailwindcss.com/docs/backdrop-hue-rotate
       */
      "backdrop-hue-rotate": [{
        "backdrop-hue-rotate": [hueRotate]
      }],
      /**
       * Backdrop Invert
       * @see https://tailwindcss.com/docs/backdrop-invert
       */
      "backdrop-invert": [{
        "backdrop-invert": [invert]
      }],
      /**
       * Backdrop Opacity
       * @see https://tailwindcss.com/docs/backdrop-opacity
       */
      "backdrop-opacity": [{
        "backdrop-opacity": [opacity]
      }],
      /**
       * Backdrop Saturate
       * @see https://tailwindcss.com/docs/backdrop-saturate
       */
      "backdrop-saturate": [{
        "backdrop-saturate": [saturate]
      }],
      /**
       * Backdrop Sepia
       * @see https://tailwindcss.com/docs/backdrop-sepia
       */
      "backdrop-sepia": [{
        "backdrop-sepia": [sepia]
      }],
      // Tables
      /**
       * Border Collapse
       * @see https://tailwindcss.com/docs/border-collapse
       */
      "border-collapse": [{
        border: ["collapse", "separate"]
      }],
      /**
       * Border Spacing
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing": [{
        "border-spacing": [borderSpacing]
      }],
      /**
       * Border Spacing X
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-x": [{
        "border-spacing-x": [borderSpacing]
      }],
      /**
       * Border Spacing Y
       * @see https://tailwindcss.com/docs/border-spacing
       */
      "border-spacing-y": [{
        "border-spacing-y": [borderSpacing]
      }],
      /**
       * Table Layout
       * @see https://tailwindcss.com/docs/table-layout
       */
      "table-layout": [{
        table: ["auto", "fixed"]
      }],
      /**
       * Caption Side
       * @see https://tailwindcss.com/docs/caption-side
       */
      caption: [{
        caption: ["top", "bottom"]
      }],
      // Transitions and Animation
      /**
       * Tranisition Property
       * @see https://tailwindcss.com/docs/transition-property
       */
      transition: [{
        transition: ["none", "all", "", "colors", "opacity", "shadow", "transform", isArbitraryValue]
      }],
      /**
       * Transition Duration
       * @see https://tailwindcss.com/docs/transition-duration
       */
      duration: [{
        duration: getNumberAndArbitrary()
      }],
      /**
       * Transition Timing Function
       * @see https://tailwindcss.com/docs/transition-timing-function
       */
      ease: [{
        ease: ["linear", "in", "out", "in-out", isArbitraryValue]
      }],
      /**
       * Transition Delay
       * @see https://tailwindcss.com/docs/transition-delay
       */
      delay: [{
        delay: getNumberAndArbitrary()
      }],
      /**
       * Animation
       * @see https://tailwindcss.com/docs/animation
       */
      animate: [{
        animate: ["none", "spin", "ping", "pulse", "bounce", isArbitraryValue]
      }],
      // Transforms
      /**
       * Transform
       * @see https://tailwindcss.com/docs/transform
       */
      transform: [{
        transform: ["", "gpu", "none"]
      }],
      /**
       * Scale
       * @see https://tailwindcss.com/docs/scale
       */
      scale: [{
        scale: [scale]
      }],
      /**
       * Scale X
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-x": [{
        "scale-x": [scale]
      }],
      /**
       * Scale Y
       * @see https://tailwindcss.com/docs/scale
       */
      "scale-y": [{
        "scale-y": [scale]
      }],
      /**
       * Rotate
       * @see https://tailwindcss.com/docs/rotate
       */
      rotate: [{
        rotate: [isInteger, isArbitraryValue]
      }],
      /**
       * Translate X
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-x": [{
        "translate-x": [translate]
      }],
      /**
       * Translate Y
       * @see https://tailwindcss.com/docs/translate
       */
      "translate-y": [{
        "translate-y": [translate]
      }],
      /**
       * Skew X
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-x": [{
        "skew-x": [skew]
      }],
      /**
       * Skew Y
       * @see https://tailwindcss.com/docs/skew
       */
      "skew-y": [{
        "skew-y": [skew]
      }],
      /**
       * Transform Origin
       * @see https://tailwindcss.com/docs/transform-origin
       */
      "transform-origin": [{
        origin: ["center", "top", "top-right", "right", "bottom-right", "bottom", "bottom-left", "left", "top-left", isArbitraryValue]
      }],
      // Interactivity
      /**
       * Accent Color
       * @see https://tailwindcss.com/docs/accent-color
       */
      accent: [{
        accent: ["auto", colors]
      }],
      /**
       * Appearance
       * @see https://tailwindcss.com/docs/appearance
       */
      appearance: ["appearance-none"],
      /**
       * Cursor
       * @see https://tailwindcss.com/docs/cursor
       */
      cursor: [{
        cursor: ["auto", "default", "pointer", "wait", "text", "move", "help", "not-allowed", "none", "context-menu", "progress", "cell", "crosshair", "vertical-text", "alias", "copy", "no-drop", "grab", "grabbing", "all-scroll", "col-resize", "row-resize", "n-resize", "e-resize", "s-resize", "w-resize", "ne-resize", "nw-resize", "se-resize", "sw-resize", "ew-resize", "ns-resize", "nesw-resize", "nwse-resize", "zoom-in", "zoom-out", isArbitraryValue]
      }],
      /**
       * Caret Color
       * @see https://tailwindcss.com/docs/just-in-time-mode#caret-color-utilities
       */
      "caret-color": [{
        caret: [colors]
      }],
      /**
       * Pointer Events
       * @see https://tailwindcss.com/docs/pointer-events
       */
      "pointer-events": [{
        "pointer-events": ["none", "auto"]
      }],
      /**
       * Resize
       * @see https://tailwindcss.com/docs/resize
       */
      resize: [{
        resize: ["none", "y", "x", ""]
      }],
      /**
       * Scroll Behavior
       * @see https://tailwindcss.com/docs/scroll-behavior
       */
      "scroll-behavior": [{
        scroll: ["auto", "smooth"]
      }],
      /**
       * Scroll Margin
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-m": [{
        "scroll-m": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin X
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mx": [{
        "scroll-mx": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Y
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-my": [{
        "scroll-my": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Start
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ms": [{
        "scroll-ms": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin End
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-me": [{
        "scroll-me": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Top
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mt": [{
        "scroll-mt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Right
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mr": [{
        "scroll-mr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Bottom
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-mb": [{
        "scroll-mb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Margin Left
       * @see https://tailwindcss.com/docs/scroll-margin
       */
      "scroll-ml": [{
        "scroll-ml": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-p": [{
        "scroll-p": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding X
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-px": [{
        "scroll-px": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Y
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-py": [{
        "scroll-py": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Start
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-ps": [{
        "scroll-ps": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding End
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pe": [{
        "scroll-pe": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Top
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pt": [{
        "scroll-pt": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Right
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pr": [{
        "scroll-pr": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Bottom
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pb": [{
        "scroll-pb": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Padding Left
       * @see https://tailwindcss.com/docs/scroll-padding
       */
      "scroll-pl": [{
        "scroll-pl": getSpacingWithArbitrary()
      }],
      /**
       * Scroll Snap Align
       * @see https://tailwindcss.com/docs/scroll-snap-align
       */
      "snap-align": [{
        snap: ["start", "end", "center", "align-none"]
      }],
      /**
       * Scroll Snap Stop
       * @see https://tailwindcss.com/docs/scroll-snap-stop
       */
      "snap-stop": [{
        snap: ["normal", "always"]
      }],
      /**
       * Scroll Snap Type
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-type": [{
        snap: ["none", "x", "y", "both"]
      }],
      /**
       * Scroll Snap Type Strictness
       * @see https://tailwindcss.com/docs/scroll-snap-type
       */
      "snap-strictness": [{
        snap: ["mandatory", "proximity"]
      }],
      /**
       * Touch Action
       * @see https://tailwindcss.com/docs/touch-action
       */
      touch: [{
        touch: ["auto", "none", "pinch-zoom", "manipulation", {
          pan: ["x", "left", "right", "y", "up", "down"]
        }]
      }],
      /**
       * User Select
       * @see https://tailwindcss.com/docs/user-select
       */
      select: [{
        select: ["none", "text", "all", "auto"]
      }],
      /**
       * Will Change
       * @see https://tailwindcss.com/docs/will-change
       */
      "will-change": [{
        "will-change": ["auto", "scroll", "contents", "transform", isArbitraryValue]
      }],
      // SVG
      /**
       * Fill
       * @see https://tailwindcss.com/docs/fill
       */
      fill: [{
        fill: [colors, "none"]
      }],
      /**
       * Stroke Width
       * @see https://tailwindcss.com/docs/stroke-width
       */
      "stroke-w": [{
        stroke: [isLength, isArbitraryNumber]
      }],
      /**
       * Stroke
       * @see https://tailwindcss.com/docs/stroke
       */
      stroke: [{
        stroke: [colors, "none"]
      }],
      // Accessibility
      /**
       * Screen Readers
       * @see https://tailwindcss.com/docs/screen-readers
       */
      sr: ["sr-only", "not-sr-only"]
    },
    conflictingClassGroups: {
      overflow: ["overflow-x", "overflow-y"],
      overscroll: ["overscroll-x", "overscroll-y"],
      inset: ["inset-x", "inset-y", "start", "end", "top", "right", "bottom", "left"],
      "inset-x": ["right", "left"],
      "inset-y": ["top", "bottom"],
      flex: ["basis", "grow", "shrink"],
      gap: ["gap-x", "gap-y"],
      p: ["px", "py", "ps", "pe", "pt", "pr", "pb", "pl"],
      px: ["pr", "pl"],
      py: ["pt", "pb"],
      m: ["mx", "my", "ms", "me", "mt", "mr", "mb", "ml"],
      mx: ["mr", "ml"],
      my: ["mt", "mb"],
      "font-size": ["leading"],
      "fvn-normal": ["fvn-ordinal", "fvn-slashed-zero", "fvn-figure", "fvn-spacing", "fvn-fraction"],
      "fvn-ordinal": ["fvn-normal"],
      "fvn-slashed-zero": ["fvn-normal"],
      "fvn-figure": ["fvn-normal"],
      "fvn-spacing": ["fvn-normal"],
      "fvn-fraction": ["fvn-normal"],
      rounded: ["rounded-s", "rounded-e", "rounded-t", "rounded-r", "rounded-b", "rounded-l", "rounded-ss", "rounded-se", "rounded-ee", "rounded-es", "rounded-tl", "rounded-tr", "rounded-br", "rounded-bl"],
      "rounded-s": ["rounded-ss", "rounded-es"],
      "rounded-e": ["rounded-se", "rounded-ee"],
      "rounded-t": ["rounded-tl", "rounded-tr"],
      "rounded-r": ["rounded-tr", "rounded-br"],
      "rounded-b": ["rounded-br", "rounded-bl"],
      "rounded-l": ["rounded-tl", "rounded-bl"],
      "border-spacing": ["border-spacing-x", "border-spacing-y"],
      "border-w": ["border-w-s", "border-w-e", "border-w-t", "border-w-r", "border-w-b", "border-w-l"],
      "border-w-x": ["border-w-r", "border-w-l"],
      "border-w-y": ["border-w-t", "border-w-b"],
      "border-color": ["border-color-t", "border-color-r", "border-color-b", "border-color-l"],
      "border-color-x": ["border-color-r", "border-color-l"],
      "border-color-y": ["border-color-t", "border-color-b"],
      "scroll-m": ["scroll-mx", "scroll-my", "scroll-ms", "scroll-me", "scroll-mt", "scroll-mr", "scroll-mb", "scroll-ml"],
      "scroll-mx": ["scroll-mr", "scroll-ml"],
      "scroll-my": ["scroll-mt", "scroll-mb"],
      "scroll-p": ["scroll-px", "scroll-py", "scroll-ps", "scroll-pe", "scroll-pt", "scroll-pr", "scroll-pb", "scroll-pl"],
      "scroll-px": ["scroll-pr", "scroll-pl"],
      "scroll-py": ["scroll-pt", "scroll-pb"]
    },
    conflictingClassGroupModifiers: {
      "font-size": ["leading"]
    }
  };
}

// node_modules/@rewind-ui/core/node_modules/tailwind-merge/dist/lib/tw-merge.mjs
var twMerge = createTailwindMerge(getDefaultConfig);

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionBody/AccordionBody.js
var d4 = (0, import_react4.forwardRef)((m62, d44) => {
  const n94 = H("Accordion"), l50 = Object.assign({}, m62), { children: p35, className: b12 = "" } = l50, f22 = __rest(l50, ["children", "className"]), { activeItemAnchor: h21, bordered: j9, size: A2 } = n2(), { anchor: g18, bodyId: x13, headerId: y7 } = n3(), I = (0, import_react4.useMemo)(() => twMerge(n94.body({ bordered: j9, className: b12, size: A2 })), [j9, b12, A2, n94]);
  return (0, import_jsx_runtime3.jsx)(n4, Object.assign({ isOpen: g18 === h21 }, { children: (0, import_jsx_runtime3.jsx)("div", Object.assign({ id: x13, ref: d44, role: "region", "aria-labelledby": y7, className: I }, f22, { children: p35 })) }));
});
d4.displayName = "AccordionBody";

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionHeader/AccordionHeader.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/icons/ChevronDown.js
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var n7 = ({ className: n94 }) => (0, import_jsx_runtime4.jsxs)("svg", Object.assign({ className: n94, xmlns: "http://www.w3.org/2000/svg", width: "88", height: "88", viewBox: "0 0 24 24", strokeWidth: "1.5", stroke: "currentColor", fill: "none", strokeLinecap: "round", strokeLinejoin: "round" }, { children: [(0, import_jsx_runtime4.jsx)("path", { stroke: "none", d: "M0 0h24v24H0z", fill: "none" }), (0, import_jsx_runtime4.jsx)("polyline", { points: "6 9 12 15 18 9" })] }));

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionHeader/AccordionHeader.js
var import_react5 = __toESM(require_react());
var d5 = (0, import_react5.forwardRef)((n94, d44) => {
  const l50 = H("Accordion"), h21 = Object.assign({}, n94), { children: p35, className: f22 = "" } = h21, b12 = __rest(h21, ["children", "className"]), { activeColor: A2, activeItemAnchor: j9, bordered: v8, radius: u29, setActiveItemAnchor: x13, size: I, tone: N2, withRing: g18 } = n2(), { anchor: w12, headerId: C3, bodyId: y7 } = n3(), z6 = w12 === j9, O6 = z6 ? "active" : "inactive", R2 = (0, import_react5.useMemo)(() => twMerge(l50.header({ bordered: v8, className: f22, size: I, activeColor: A2, radius: u29, state: O6, tone: N2, withRing: g18 })), [v8, f22, u29, A2, I, O6, l50, N2, g18]), k3 = l50.icon({ size: I, state: O6 });
  return (0, import_jsx_runtime5.jsxs)("button", Object.assign({ id: C3, ref: d44, type: "button", onClick: () => {
    x13(z6 ? "" : w12);
  }, className: R2, "aria-expanded": z6, "aria-controls": y7 }, b12, { children: [p35, (0, import_jsx_runtime5.jsx)(n7, { className: k3 })] }));
});
d5.displayName = "AccordionHeader";

// node_modules/@rewind-ui/core/dist/components/Accordion/AccordionItem/AccordionItem.js
var import_jsx_runtime6 = __toESM(require_jsx_runtime());
var o16 = (o123) => {
  const { anchor: c63, children: t150 } = Object.assign({}, o123), n94 = { anchor: c63, bodyId: `${c63}-body`, headerId: `${c63}-header` };
  return (0, import_jsx_runtime6.jsx)(e3, Object.assign({ value: n94 }, { children: t150 }));
};
o16.displayName = "AccordionItem";

// node_modules/@rewind-ui/core/dist/theme/variants/Accordion.variants.js
var r14 = { primary: {} };

// node_modules/@rewind-ui/core/dist/theme/variants/Alert.variants.js
var e12 = { primary: { color: "purple", tone: "light", iconType: "info", className: "border-dashed" }, secondary: { color: "gray", tone: "light", iconType: "info", className: "border-dashed" }, tertiary: { color: "gray", tone: "outline", iconType: "info", className: "border-dashed" }, danger: { color: "red", tone: "light", iconType: "error", className: "border-dashed" }, success: { color: "green", tone: "light", iconType: "success", className: "border-dashed" }, warning: { color: "yellow", tone: "light", iconType: "warning", className: "border-dashed" }, info: { color: "blue", tone: "light", iconType: "info", className: "border-dashed" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Button.variants.js
var o17 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, tertiary: { color: "gray", tone: "transparent" }, link: { color: "purple", tone: "transparent" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Toast.variants.js
var o18 = { primary: { color: "purple", tone: "solid", iconType: "info" }, secondary: { color: "dark", tone: "solid", iconType: "info" }, danger: { color: "red", tone: "solid", iconType: "error" }, success: { color: "green", tone: "solid", iconType: "success" }, warning: { color: "yellow", tone: "solid", iconType: "warning" }, info: { color: "blue", tone: "solid", iconType: "info" } };

// node_modules/@rewind-ui/core/dist/theme/variant.context.js
var import_react6 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/theme/variants/Badge.variants.js
var o19 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Ribbon.variants.js
var o20 = { primary: { color: "purple", tone: "solid" }, secondary: { color: "gray", tone: "solid" }, danger: { color: "red", tone: "solid" }, success: { color: "green", tone: "solid" }, warning: { color: "yellow", tone: "solid" }, info: { color: "blue", tone: "solid" } };

// node_modules/@rewind-ui/core/dist/theme/variants/Text.variants.js
var i4 = { d1: { size: "9xl", weight: "light", leading: "tight", tracking: "normal", as: "h1" }, d2: { size: "8xl", weight: "light", leading: "tight", tracking: "normal", as: "h2" }, d3: { size: "7xl", weight: "light", leading: "tight", tracking: "normal", as: "h3" }, d4: { size: "6xl", weight: "light", leading: "tight", tracking: "normal", as: "h4" }, h1: { size: "5xl", weight: "medium", leading: "tight", tracking: "normal", as: "h1" }, h2: { size: "4xl", weight: "medium", leading: "tight", tracking: "normal", as: "h2" }, h3: { size: "3xl", weight: "medium", leading: "tight", tracking: "normal", as: "h3" }, h4: { size: "2xl", weight: "medium", leading: "tight", tracking: "normal", as: "h4" }, h5: { size: "xl", weight: "medium", leading: "tight", tracking: "normal", as: "h5" }, h6: { size: "lg", weight: "medium", leading: "tight", tracking: "normal", as: "h6" }, p: { size: "base", weight: "normal", leading: "tight", tracking: "normal", as: "p" } };

// node_modules/@rewind-ui/core/dist/theme/variant.context.js
var e13 = { components: { Accordion: r14, Alert: e12, Badge: o19, Button: o17, Text: i4, Toast: o18, Ribbon: o20 } };
var c2 = (0, import_react6.createContext)({ variant: e13 });
var p2 = c2.Provider;
function f2() {
  var r123;
  return (null === (r123 = (0, import_react6.useContext)(c2)) || void 0 === r123 ? void 0 : r123.variant) || e13;
}
function d6(r123, t150) {
  const a74 = f2();
  return t150 ? a74.components[r123][t150] : {};
}

// node_modules/@rewind-ui/core/dist/utils/usePropId.js
var import_react7 = __toESM(require_react());
function t17(t150) {
  const o123 = (0, import_react7.useId)();
  return t150 || o123;
}

// node_modules/@rewind-ui/core/dist/components/Accordion/Accordion.js
var import_react8 = __toESM(require_react());
var f3 = { activeColor: "dark", bordered: true, color: "white", radius: "md", shadow: "none", shadowColor: "none", size: "md", tone: "solid", withRing: true };
var j = (0, import_react8.forwardRef)((e130, i58) => {
  const t150 = d6("Accordion", e130.variant), a74 = H("Accordion"), j9 = Object.assign(Object.assign(Object.assign({}, f3), t150), e130), { activeColor: p35, bordered: w12 = true, children: b12, className: u29 = "", color: A2, defaultItem: g18, radius: v8, shadow: C3, shadowColor: I, size: O6, tone: x13, withRing: z6 } = j9, N2 = __rest(j9, ["activeColor", "bordered", "children", "className", "color", "defaultItem", "radius", "shadow", "shadowColor", "size", "tone", "withRing"]), y7 = t17(e130.id), [R2, B2] = (0, import_react8.useState)(g18), H3 = { activeColor: p35, activeItemAnchor: R2, bordered: w12, color: A2, radius: v8, setActiveItemAnchor: B2, size: O6, tone: x13, withRing: z6 }, k3 = (0, import_react8.useMemo)(() => twMerge(a74.base({ bordered: w12, className: u29, color: A2, radius: v8, shadow: C3, shadowColor: I, size: O6 })), [w12, u29, A2, v8, C3, I, O6, a74]);
  return (0, import_jsx_runtime7.jsx)(e2, Object.assign({ value: H3 }, { children: (0, import_jsx_runtime7.jsx)("div", Object.assign({ id: y7, ref: i58, className: k3 }, N2, { children: b12 })) }));
});
j.displayName = "Accordion";
var p3 = Object.assign(j, { Item: o16, Header: d5, Body: d4 });

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/animations/use-fade.hook.js
var import_react9 = __toESM(require_react());
function e14(e130) {
  const { enabled: t150 = true, ref: c63, visible: u29, fadeInDuration: i58 = 250, fadeOutDuration: a74 = 250, easing: o123 = "linear" } = e130, l50 = (0, import_react9.useRef)(false), s74 = (0, import_react9.useRef)(null);
  return (0, import_react9.useEffect)(() => {
    const r123 = c63.current;
    if (!r123) return;
    if (r123.style.display = "flex", !l50.current) return void (l50.current = true);
    const n94 = { duration: t150 ? u29 ? i58 : a74 : 0, easing: o123, fill: "forwards" };
    s74.current && s74.current.cancel();
    const e131 = [{ opacity: u29 ? 0 : 1 }, { opacity: u29 ? 1 : 0 }];
    return s74.current = r123.animate(e131, n94), () => {
      s74.current && s74.current.cancel();
    };
  }, [c63, u29, i58, a74, t150, o123]), (0, import_react9.useEffect)(() => {
    s74.current && (s74.current.onfinish = () => {
      (null == c63 ? void 0 : c63.current) && (c63.current.style.display = u29 ? "flex" : "none");
    });
  }, [s74, c63, u29]), [s74.current];
}

// node_modules/@rewind-ui/core/dist/icons/Error.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime());
var c3 = () => (0, import_jsx_runtime8.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime8.jsx)("path", { d: "M209 175c-9.4-9.4-24.6-9.4-33.9 0s-9.4 24.6 0 33.9l47 47-47 47c-9.4 9.4-9.4 24.6 0 33.9s24.6 9.4 33.9 0l47-47 47 47c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9l-47-47 47-47c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0l-47 47-47-47z" }), (0, import_jsx_runtime8.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM175 175c9.4-9.4 24.6-9.4 33.9 0l47 47 47-47c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9l-47 47 47 47c9.4 9.4 9.4 24.6 0 33.9s-24.6 9.4-33.9 0l-47-47-47 47c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l47-47-47-47c-9.4-9.4-9.4-24.6 0-33.9z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Info.js
var import_jsx_runtime9 = __toESM(require_jsx_runtime());
var s11 = () => (0, import_jsx_runtime9.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime9.jsx)("path", { d: "M256 128a32 32 0 1 1 0 64 32 32 0 1 1 0-64zM192 248c0-13.3 10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h24V272H216c-13.3 0-24-10.7-24-24z" }), (0, import_jsx_runtime9.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM216 336h24V272H216c-13.3 0-24-10.7-24-24s10.7-24 24-24h48c13.3 0 24 10.7 24 24v88h8c13.3 0 24 10.7 24 24s-10.7 24-24 24H216c-13.3 0-24-10.7-24-24s10.7-24 24-24zm40-208a32 32 0 1 1 0 64 32 32 0 1 1 0-64z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Question.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime());
var t19 = () => (0, import_jsx_runtime10.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime10.jsx)("path", { d: "M222.6 128c-23.7 0-44.8 14.9-52.8 37.3l-.4 1.2c-4.4 12.5 2.1 26.2 14.6 30.6s26.2-2.1 30.6-14.6l.4-1.2c1.1-3.2 4.2-5.3 7.5-5.3h58.3c8.4 0 15.1 6.8 15.1 15.1c0 5.4-2.9 10.4-7.6 13.1l-44.3 25.4c-7.5 4.3-12.1 12.2-12.1 20.8V264c0 13.3 10.7 24 24 24c13.1 0 23.8-10.5 24-23.6l32.3-18.5c19.6-11.3 31.7-32.2 31.7-54.8c0-34.9-28.3-63.1-63.1-63.1H222.6zM256 384a32 32 0 1 0 0-64 32 32 0 1 0 0 64z" }), (0, import_jsx_runtime10.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM169.8 165.3c7.9-22.3 29.1-37.3 52.8-37.3h58.3c34.9 0 63.1 28.3 63.1 63.1c0 22.6-12.1 43.5-31.7 54.8L280 264.4c-.2 13-10.9 23.6-24 23.6c-13.3 0-24-10.7-24-24V250.5c0-8.6 4.6-16.5 12.1-20.8l44.3-25.4c4.7-2.7 7.6-7.7 7.6-13.1c0-8.4-6.8-15.1-15.1-15.1H222.6c-3.4 0-6.4 2.1-7.5 5.3l-.4 1.2c-4.4 12.5-18.2 19-30.6 14.6s-19-18.2-14.6-30.6l.4-1.2zM224 352a32 32 0 1 1 64 0 32 32 0 1 1 -64 0z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Success.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime());
var e15 = () => (0, import_jsx_runtime11.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime11.jsx)("path", { d: "M369 175c9.4 9.4 9.4 24.6 0 33.9L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0z" }), (0, import_jsx_runtime11.jsx)("path", { style: { opacity: 0.25 }, d: "M256 512A256 256 0 1 0 256 0a256 256 0 1 0 0 512zM369 209L241 337c-9.4 9.4-24.6 9.4-33.9 0l-64-64c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0l47 47L335 175c9.4-9.4 24.6-9.4 33.9 0s9.4 24.6 0 33.9z" })] }));

// node_modules/@rewind-ui/core/dist/icons/Warning.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime());
var s12 = () => (0, import_jsx_runtime12.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "2.25rem", viewBox: "0 0 512 512" }, { children: [(0, import_jsx_runtime12.jsx)("path", { d: "M280 184c0-13.3-10.7-24-24-24s-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184zM256 416a32 32 0 1 0 0-64 32 32 0 1 0 0 64z" }), (0, import_jsx_runtime12.jsx)("path", { style: { opacity: 0.25 }, d: "M256 32c14.2 0 27.3 7.5 34.5 19.8l216 368c7.3 12.4 7.3 27.7 .2 40.1S486.3 480 472 480H40c-14.3 0-27.6-7.7-34.7-20.1s-7-27.8 .2-40.1l216-368C228.7 39.5 241.8 32 256 32zm0 128c-13.3 0-24 10.7-24 24V296c0 13.3 10.7 24 24 24s24-10.7 24-24V184c0-13.3-10.7-24-24-24zm32 224a32 32 0 1 0 -64 0 32 32 0 1 0 64 0z" })] }));

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var import_react12 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/icons/XMark.js
var import_jsx_runtime13 = __toESM(require_jsx_runtime());
var c8 = ({ className: c63 }) => (0, import_jsx_runtime13.jsx)("svg", Object.assign({ className: c63, xmlns: "http://www.w3.org/2000/svg", height: "1em", viewBox: "0 0 384 512" }, { children: (0, import_jsx_runtime13.jsx)("path", { d: "M324.5 411.1c6.2 6.2 16.4 6.2 22.6 0s6.2-16.4 0-22.6L214.6 256 347.1 123.5c6.2-6.2 6.2-16.4 0-22.6s-16.4-6.2-22.6 0L192 233.4 59.5 100.9c-6.2-6.2-16.4-6.2-22.6 0s-6.2 16.4 0 22.6L169.4 256 36.9 388.5c-6.2 6.2-6.2 16.4 0 22.6s16.4 6.2 22.6 0L192 278.6 324.5 411.1z" }) }));

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
var sides = ["top", "right", "bottom", "left"];
var alignments = ["start", "end"];
var placements = sides.reduce((acc, side) => acc.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
var min = Math.min;
var max = Math.max;
var round = Math.round;
var floor = Math.floor;
var createCoords = (v8) => ({
  x: v8,
  y: v8
});
var oppositeSideMap = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
var oppositeAlignmentMap = {
  start: "end",
  end: "start"
};
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl) return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x: x13,
    y: y7,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y7,
    left: x13,
    right: x13 + width,
    bottom: y7 + height,
    x: x13,
    y: y7
  };
}

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
var computePosition = async (reference, floating, config) => {
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2
  } = config;
  const validMiddleware = middleware.filter(Boolean);
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
  let rects = await platform2.getElementRects({
    reference,
    floating,
    strategy
  });
  let {
    x: x13,
    y: y7
  } = computeCoordsFromPlacement(rects, placement, rtl);
  let statefulPlacement = placement;
  let middlewareData = {};
  let resetCount = 0;
  for (let i58 = 0; i58 < validMiddleware.length; i58++) {
    const {
      name,
      fn
    } = validMiddleware[i58];
    const {
      x: nextX,
      y: nextY,
      data,
      reset
    } = await fn({
      x: x13,
      y: y7,
      initialPlacement: placement,
      placement: statefulPlacement,
      strategy,
      middlewareData,
      rects,
      platform: platform2,
      elements: {
        reference,
        floating
      }
    });
    x13 = nextX != null ? nextX : x13;
    y7 = nextY != null ? nextY : y7;
    middlewareData = {
      ...middlewareData,
      [name]: {
        ...middlewareData[name],
        ...data
      }
    };
    if (reset && resetCount <= 50) {
      resetCount++;
      if (typeof reset === "object") {
        if (reset.placement) {
          statefulPlacement = reset.placement;
        }
        if (reset.rects) {
          rects = reset.rects === true ? await platform2.getElementRects({
            reference,
            floating,
            strategy
          }) : reset.rects;
        }
        ({
          x: x13,
          y: y7
        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
      }
      i58 = -1;
    }
  }
  return {
    x: x13,
    y: y7,
    placement: statefulPlacement,
    strategy,
    middlewareData
  };
};
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x: x13,
    y: y7,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x: x13,
    y: y7,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
var arrow = (options) => ({
  name: "arrow",
  options,
  async fn(state) {
    const {
      x: x13,
      y: y7,
      placement,
      rects,
      platform: platform2,
      elements,
      middlewareData
    } = state;
    const {
      element,
      padding = 0
    } = evaluate(options, state) || {};
    if (element == null) {
      return {};
    }
    const paddingObject = getPaddingObject(padding);
    const coords = {
      x: x13,
      y: y7
    };
    const axis = getAlignmentAxis(placement);
    const length = getAxisLength(axis);
    const arrowDimensions = await platform2.getDimensions(element);
    const isYAxis = axis === "y";
    const minProp = isYAxis ? "top" : "left";
    const maxProp = isYAxis ? "bottom" : "right";
    const clientProp = isYAxis ? "clientHeight" : "clientWidth";
    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
    const startDiff = coords[axis] - rects.reference[axis];
    const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
    if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
      clientSize = elements.floating[clientProp] || rects.floating[length];
    }
    const centerToReference = endDiff / 2 - startDiff / 2;
    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
    const minPadding = min(paddingObject[minProp], largestPossiblePadding);
    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
    const min$1 = minPadding;
    const max2 = clientSize - arrowDimensions[length] - maxPadding;
    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
    const offset4 = clamp(min$1, center, max2);
    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset4 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max2 : 0;
    return {
      [axis]: coords[axis] + alignmentOffset,
      data: {
        [axis]: offset4,
        centerOffset: center - offset4 - alignmentOffset,
        ...shouldAddOffset && {
          alignmentOffset
        }
      },
      reset: shouldAddOffset
    };
  }
});
var flip = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "flip",
    options,
    async fn(state) {
      var _middlewareData$arrow, _middlewareData$flip;
      const {
        placement,
        middlewareData,
        rects,
        initialPlacement,
        platform: platform2,
        elements
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = true,
        fallbackPlacements: specifiedFallbackPlacements,
        fallbackStrategy = "bestFit",
        fallbackAxisSideDirection = "none",
        flipAlignment = true,
        ...detectOverflowOptions
      } = evaluate(options, state);
      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      const side = getSide(placement);
      const isBasePlacement = getSide(initialPlacement) === initialPlacement;
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== "none") {
        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
      }
      const placements2 = [initialPlacement, ...fallbackPlacements];
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const overflows = [];
      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
      if (checkMainAxis) {
        overflows.push(overflow[side]);
      }
      if (checkCrossAxis) {
        const sides2 = getAlignmentSides(placement, rects, rtl);
        overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
      }
      overflowsData = [...overflowsData, {
        placement,
        overflows
      }];
      if (!overflows.every((side2) => side2 <= 0)) {
        var _middlewareData$flip2, _overflowsData$filter;
        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
        const nextPlacement = placements2[nextIndex];
        if (nextPlacement) {
          return {
            data: {
              index: nextIndex,
              overflows: overflowsData
            },
            reset: {
              placement: nextPlacement
            }
          };
        }
        let resetPlacement = (_overflowsData$filter = overflowsData.filter((d44) => d44.overflows[0] <= 0).sort((a74, b12) => a74.overflows[1] - b12.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
        if (!resetPlacement) {
          switch (fallbackStrategy) {
            case "bestFit": {
              var _overflowsData$map$so;
              const placement2 = (_overflowsData$map$so = overflowsData.map((d44) => [d44.placement, d44.overflows.filter((overflow2) => overflow2 > 0).reduce((acc, overflow2) => acc + overflow2, 0)]).sort((a74, b12) => a74[1] - b12[1])[0]) == null ? void 0 : _overflowsData$map$so[0];
              if (placement2) {
                resetPlacement = placement2;
              }
              break;
            }
            case "initialPlacement":
              resetPlacement = initialPlacement;
              break;
          }
        }
        if (placement !== resetPlacement) {
          return {
            reset: {
              placement: resetPlacement
            }
          };
        }
      }
      return {};
    }
  };
};
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a74, b12) => a74.y - b12.y);
  const groups = [];
  let prevRect = null;
  for (let i58 = 0; i58 < sortedRects.length; i58++) {
    const rect = sortedRects[i58];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
var inline = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "inline",
    options,
    async fn(state) {
      const {
        placement,
        elements,
        rects,
        platform: platform2,
        strategy
      } = state;
      const {
        padding = 2,
        x: x13,
        y: y7
      } = evaluate(options, state);
      const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
      const clientRects = getRectsByLine(nativeClientRects);
      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
      const paddingObject = getPaddingObject(padding);
      function getBoundingClientRect2() {
        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x13 != null && y7 != null) {
          return clientRects.find((rect) => x13 > rect.left - paddingObject.left && x13 < rect.right + paddingObject.right && y7 > rect.top - paddingObject.top && y7 < rect.bottom + paddingObject.bottom) || fallback;
        }
        if (clientRects.length >= 2) {
          if (getSideAxis(placement) === "y") {
            const firstRect = clientRects[0];
            const lastRect = clientRects[clientRects.length - 1];
            const isTop = getSide(placement) === "top";
            const top2 = firstRect.top;
            const bottom2 = lastRect.bottom;
            const left2 = isTop ? firstRect.left : lastRect.left;
            const right2 = isTop ? firstRect.right : lastRect.right;
            const width2 = right2 - left2;
            const height2 = bottom2 - top2;
            return {
              top: top2,
              bottom: bottom2,
              left: left2,
              right: right2,
              width: width2,
              height: height2,
              x: left2,
              y: top2
            };
          }
          const isLeftSide = getSide(placement) === "left";
          const maxRight = max(...clientRects.map((rect) => rect.right));
          const minLeft = min(...clientRects.map((rect) => rect.left));
          const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
          const top = measureRects[0].top;
          const bottom = measureRects[measureRects.length - 1].bottom;
          const left = minLeft;
          const right = maxRight;
          const width = right - left;
          const height = bottom - top;
          return {
            top,
            bottom,
            left,
            right,
            width,
            height,
            x: left,
            y: top
          };
        }
        return fallback;
      }
      const resetRects = await platform2.getElementRects({
        reference: {
          getBoundingClientRect: getBoundingClientRect2
        },
        floating: elements.floating,
        strategy
      });
      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
        return {
          reset: {
            rects: resetRects
          }
        };
      }
      return {};
    }
  };
};
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var offset = function(options) {
  if (options === void 0) {
    options = 0;
  }
  return {
    name: "offset",
    options,
    async fn(state) {
      var _middlewareData$offse, _middlewareData$arrow;
      const {
        x: x13,
        y: y7,
        placement,
        middlewareData
      } = state;
      const diffCoords = await convertValueToCoords(state, options);
      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
        return {};
      }
      return {
        x: x13 + diffCoords.x,
        y: y7 + diffCoords.y,
        data: {
          ...diffCoords,
          placement
        }
      };
    }
  };
};
var shift = function(options) {
  if (options === void 0) {
    options = {};
  }
  return {
    name: "shift",
    options,
    async fn(state) {
      const {
        x: x13,
        y: y7,
        placement
      } = state;
      const {
        mainAxis: checkMainAxis = true,
        crossAxis: checkCrossAxis = false,
        limiter = {
          fn: (_ref) => {
            let {
              x: x14,
              y: y8
            } = _ref;
            return {
              x: x14,
              y: y8
            };
          }
        },
        ...detectOverflowOptions
      } = evaluate(options, state);
      const coords = {
        x: x13,
        y: y7
      };
      const overflow = await detectOverflow(state, detectOverflowOptions);
      const crossAxis = getSideAxis(getSide(placement));
      const mainAxis = getOppositeAxis(crossAxis);
      let mainAxisCoord = coords[mainAxis];
      let crossAxisCoord = coords[crossAxis];
      if (checkMainAxis) {
        const minSide = mainAxis === "y" ? "top" : "left";
        const maxSide = mainAxis === "y" ? "bottom" : "right";
        const min2 = mainAxisCoord + overflow[minSide];
        const max2 = mainAxisCoord - overflow[maxSide];
        mainAxisCoord = clamp(min2, mainAxisCoord, max2);
      }
      if (checkCrossAxis) {
        const minSide = crossAxis === "y" ? "top" : "left";
        const maxSide = crossAxis === "y" ? "bottom" : "right";
        const min2 = crossAxisCoord + overflow[minSide];
        const max2 = crossAxisCoord - overflow[maxSide];
        crossAxisCoord = clamp(min2, crossAxisCoord, max2);
      }
      const limitedCoords = limiter.fn({
        ...state,
        [mainAxis]: mainAxisCoord,
        [crossAxis]: crossAxisCoord
      });
      return {
        ...limitedCoords,
        data: {
          x: limitedCoords.x - x13,
          y: limitedCoords.y - y7
        }
      };
    }
  };
};

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports) return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.pageXOffset,
    scrollTop: element.pageYOffset
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $: $2
  } = getCssDimensions(domElement);
  let x13 = ($2 ? round(rect.width) : rect.width) / width;
  let y7 = ($2 ? round(rect.height) : rect.height) / height;
  if (!x13 || !Number.isFinite(x13)) {
    x13 = 1;
  }
  if (!y7 || !Number.isFinite(y7)) {
    y7 = 1;
  }
  return {
    x: x13,
    y: y7
  };
}
var noOffsets = createCoords(0);
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x13 = (clientRect.left + visualOffsets.x) / scale.x;
  let y7 = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x13 *= iframeScale.x;
      y7 *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x13 += left;
      y7 += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x: x13,
    y: y7
  });
}
var topLayerSelectors = [":popover-open", ":modal"];
function isTopLayer(element) {
  return topLayerSelectors.some((selector) => {
    try {
      return element.matches(selector);
    } catch (e130) {
      return false;
    }
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x13 = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y7 = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x13 += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x: x13,
    y: y7
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x13 = 0;
  let y7 = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x13 = visualViewport.offsetLeft;
      y7 = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x13,
    y: y7
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x13 = left * scale.x;
  const y7 = top * scale.y;
  return {
    width,
    height,
    x: x13,
    y: y7
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x13 = rect.left + scroll.scrollLeft - offsets.x;
  const y7 = rect.top + scroll.scrollTop - offsets.y;
  return {
    x: x13,
    y: y7,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
var getElementRects = async function(data) {
  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
  const getDimensionsFn = this.getDimensions;
  const floatingDimensions = await getDimensionsFn(data.floating);
  return {
    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
    floating: {
      x: 0,
      y: 0,
      width: floatingDimensions.width,
      height: floatingDimensions.height
    }
  };
};
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
var platform = {
  convertOffsetParentRelativeRectToViewportRelativeRect,
  getDocumentElement,
  getClippingRect,
  getOffsetParent,
  getElementRects,
  getClientRects,
  getDimensions,
  getScale,
  isElement,
  isRTL
};
function observeMove(element, onMove) {
  let io = null;
  let timeoutId2;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId2);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  function refresh(skip, threshold) {
    if (skip === void 0) {
      skip = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId2 = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e130) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var offset2 = offset;
var shift2 = shift;
var flip2 = flip;
var arrow2 = arrow;
var inline2 = inline;
var computePosition2 = (reference, floating, options) => {
  const cache = /* @__PURE__ */ new Map();
  const mergedOptions = {
    platform,
    ...options
  };
  const platformWithCache = {
    ...mergedOptions.platform,
    _c: cache
  };
  return computePosition(reference, floating, {
    ...mergedOptions,
    platform: platformWithCache
  });
};

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
var React = __toESM(require_react(), 1);
var import_react10 = __toESM(require_react(), 1);
var ReactDOM = __toESM(require_react_dom(), 1);
var index = typeof document !== "undefined" ? import_react10.useLayoutEffect : import_react10.useEffect;
function deepEqual(a74, b12) {
  if (a74 === b12) {
    return true;
  }
  if (typeof a74 !== typeof b12) {
    return false;
  }
  if (typeof a74 === "function" && a74.toString() === b12.toString()) {
    return true;
  }
  let length;
  let i58;
  let keys;
  if (a74 && b12 && typeof a74 === "object") {
    if (Array.isArray(a74)) {
      length = a74.length;
      if (length !== b12.length) return false;
      for (i58 = length; i58-- !== 0; ) {
        if (!deepEqual(a74[i58], b12[i58])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a74);
    length = keys.length;
    if (length !== Object.keys(b12).length) {
      return false;
    }
    for (i58 = length; i58-- !== 0; ) {
      if (!{}.hasOwnProperty.call(b12, keys[i58])) {
        return false;
      }
    }
    for (i58 = length; i58-- !== 0; ) {
      const key = keys[i58];
      if (key === "_owner" && a74.$$typeof) {
        continue;
      }
      if (!deepEqual(a74[key], b12[key])) {
        return false;
      }
    }
    return true;
  }
  return a74 !== a74 && b12 !== b12;
}
function getDPR(element) {
  if (typeof window === "undefined") {
    return 1;
  }
  const win = element.ownerDocument.defaultView || window;
  return win.devicePixelRatio || 1;
}
function roundByDPR(element, value) {
  const dpr = getDPR(element);
  return Math.round(value * dpr) / dpr;
}
function useLatestRef(value) {
  const ref = React.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    elements: {
      reference: externalReference,
      floating: externalFloating
    } = {},
    transform = true,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React.useState({
    x: 0,
    y: 0,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const [_reference, _setReference] = React.useState(null);
  const [_floating, _setFloating] = React.useState(null);
  const setReference = React.useCallback((node) => {
    if (node !== referenceRef.current) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React.useCallback((node) => {
    if (node !== floatingRef.current) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const referenceEl = externalReference || _reference;
  const floatingEl = externalFloating || _floating;
  const referenceRef = React.useRef(null);
  const floatingRef = React.useRef(null);
  const dataRef = React.useRef(data);
  const hasWhileElementsMounted = whileElementsMounted != null;
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const update = React.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (referenceEl) referenceRef.current = referenceEl;
    if (floatingEl) floatingRef.current = floatingEl;
    if (referenceEl && floatingEl) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(referenceEl, floatingEl, update);
      }
      update();
    }
  }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
  const refs = React.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React.useMemo(() => ({
    reference: referenceEl,
    floating: floatingEl
  }), [referenceEl, floatingEl]);
  const floatingStyles = React.useMemo(() => {
    const initialStyles = {
      position: strategy,
      left: 0,
      top: 0
    };
    if (!elements.floating) {
      return initialStyles;
    }
    const x13 = roundByDPR(elements.floating, data.x);
    const y7 = roundByDPR(elements.floating, data.y);
    if (transform) {
      return {
        ...initialStyles,
        transform: "translate(" + x13 + "px, " + y7 + "px)",
        ...getDPR(elements.floating) >= 1.5 && {
          willChange: "transform"
        }
      };
    }
    return {
      position: strategy,
      left: x13,
      top: y7
    };
  }, [strategy, transform, elements.floating, data.x, data.y]);
  return React.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    floatingStyles
  }), [data, update, refs, elements, floatingStyles]);
}
var arrow$1 = (options) => {
  function isRef(value) {
    return {}.hasOwnProperty.call(value, "current");
  }
  return {
    name: "arrow",
    options,
    fn(state) {
      const {
        element,
        padding
      } = typeof options === "function" ? options(state) : options;
      if (element && isRef(element)) {
        if (element.current != null) {
          return arrow2({
            element: element.current,
            padding
          }).fn(state);
        }
        return {};
      }
      if (element) {
        return arrow2({
          element,
          padding
        }).fn(state);
      }
      return {};
    }
  };
};
var offset3 = (options, deps) => ({
  ...offset2(options),
  options: [options, deps]
});
var shift3 = (options, deps) => ({
  ...shift2(options),
  options: [options, deps]
});
var flip3 = (options, deps) => ({
  ...flip2(options),
  options: [options, deps]
});
var inline3 = (options, deps) => ({
  ...inline2(options),
  options: [options, deps]
});
var arrow3 = (options, deps) => ({
  ...arrow$1(options),
  options: [options, deps]
});

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var React2 = __toESM(require_react());
var import_react11 = __toESM(require_react());

// node_modules/tabbable/dist/index.esm.js
var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
var candidateSelector = candidateSelectors.join(",");
var NoElement = typeof Element === "undefined";
var matches = NoElement ? function() {
} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
  var _element$getRootNode;
  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
} : function(element) {
  return element === null || element === void 0 ? void 0 : element.ownerDocument;
};
var isInert = function isInert2(node, lookUp) {
  var _node$getAttribute;
  if (lookUp === void 0) {
    lookUp = true;
  }
  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
  var inert = inertAtt === "" || inertAtt === "true";
  var result = inert || lookUp && node && isInert2(node.parentNode);
  return result;
};
var isContentEditable = function isContentEditable2(node) {
  var _node$getAttribute2;
  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
  return attValue === "" || attValue === "true";
};
var getCandidates = function getCandidates2(el, includeContainer, filter) {
  if (isInert(el)) {
    return [];
  }
  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
  if (includeContainer && matches.call(el, candidateSelector)) {
    candidates.unshift(el);
  }
  candidates = candidates.filter(filter);
  return candidates;
};
var getCandidatesIteratively = function getCandidatesIteratively2(elements, includeContainer, options) {
  var candidates = [];
  var elementsToCheck = Array.from(elements);
  while (elementsToCheck.length) {
    var element = elementsToCheck.shift();
    if (isInert(element, false)) {
      continue;
    }
    if (element.tagName === "SLOT") {
      var assigned = element.assignedElements();
      var content = assigned.length ? assigned : element.children;
      var nestedCandidates = getCandidatesIteratively2(content, true, options);
      if (options.flatten) {
        candidates.push.apply(candidates, nestedCandidates);
      } else {
        candidates.push({
          scopeParent: element,
          candidates: nestedCandidates
        });
      }
    } else {
      var validCandidate = matches.call(element, candidateSelector);
      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
        candidates.push(element);
      }
      var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
      typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
      if (shadowRoot && validShadowRoot) {
        var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
        if (options.flatten) {
          candidates.push.apply(candidates, _nestedCandidates);
        } else {
          candidates.push({
            scopeParent: element,
            candidates: _nestedCandidates
          });
        }
      } else {
        elementsToCheck.unshift.apply(elementsToCheck, element.children);
      }
    }
  }
  return candidates;
};
var hasTabIndex = function hasTabIndex2(node) {
  return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
};
var getTabIndex = function getTabIndex2(node) {
  if (!node) {
    throw new Error("No node provided");
  }
  if (node.tabIndex < 0) {
    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
      return 0;
    }
  }
  return node.tabIndex;
};
var getSortOrderTabIndex = function getSortOrderTabIndex2(node, isScope) {
  var tabIndex = getTabIndex(node);
  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
    return 0;
  }
  return tabIndex;
};
var sortOrderedTabbables = function sortOrderedTabbables2(a74, b12) {
  return a74.tabIndex === b12.tabIndex ? a74.documentOrder - b12.documentOrder : a74.tabIndex - b12.tabIndex;
};
var isInput = function isInput2(node) {
  return node.tagName === "INPUT";
};
var isHiddenInput = function isHiddenInput2(node) {
  return isInput(node) && node.type === "hidden";
};
var isDetailsWithSummary = function isDetailsWithSummary2(node) {
  var r123 = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
    return child.tagName === "SUMMARY";
  });
  return r123;
};
var getCheckedRadio = function getCheckedRadio2(nodes, form) {
  for (var i58 = 0; i58 < nodes.length; i58++) {
    if (nodes[i58].checked && nodes[i58].form === form) {
      return nodes[i58];
    }
  }
};
var isTabbableRadio = function isTabbableRadio2(node) {
  if (!node.name) {
    return true;
  }
  var radioScope = node.form || getRootNode(node);
  var queryRadios = function queryRadios2(name) {
    return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
  };
  var radioSet;
  if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
    radioSet = queryRadios(window.CSS.escape(node.name));
  } else {
    try {
      radioSet = queryRadios(node.name);
    } catch (err) {
      console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
      return false;
    }
  }
  var checked = getCheckedRadio(radioSet, node.form);
  return !checked || checked === node;
};
var isRadio = function isRadio2(node) {
  return isInput(node) && node.type === "radio";
};
var isNonTabbableRadio = function isNonTabbableRadio2(node) {
  return isRadio(node) && !isTabbableRadio(node);
};
var isNodeAttached = function isNodeAttached2(node) {
  var _nodeRoot;
  var nodeRoot = node && getRootNode(node);
  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
  var attached = false;
  if (nodeRoot && nodeRoot !== node) {
    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
    while (!attached && nodeRootHost) {
      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
      nodeRoot = getRootNode(nodeRootHost);
      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
    }
  }
  return attached;
};
var isZeroArea = function isZeroArea2(node) {
  var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
  return width === 0 && height === 0;
};
var isHidden = function isHidden2(node, _ref) {
  var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
  if (getComputedStyle(node).visibility === "hidden") {
    return true;
  }
  var isDirectSummary = matches.call(node, "details>summary:first-of-type");
  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
  if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
    return true;
  }
  if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
    if (typeof getShadowRoot === "function") {
      var originalNode = node;
      while (node) {
        var parentElement = node.parentElement;
        var rootNode = getRootNode(node);
        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
          return isZeroArea(node);
        } else if (node.assignedSlot) {
          node = node.assignedSlot;
        } else if (!parentElement && rootNode !== node.ownerDocument) {
          node = rootNode.host;
        } else {
          node = parentElement;
        }
      }
      node = originalNode;
    }
    if (isNodeAttached(node)) {
      return !node.getClientRects().length;
    }
    if (displayCheck !== "legacy-full") {
      return true;
    }
  } else if (displayCheck === "non-zero-area") {
    return isZeroArea(node);
  }
  return false;
};
var isDisabledFromFieldset = function isDisabledFromFieldset2(node) {
  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
    var parentNode = node.parentElement;
    while (parentNode) {
      if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
        for (var i58 = 0; i58 < parentNode.children.length; i58++) {
          var child = parentNode.children.item(i58);
          if (child.tagName === "LEGEND") {
            return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
          }
        }
        return true;
      }
      parentNode = parentNode.parentElement;
    }
  }
  return false;
};
var isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable2(options, node) {
  if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
  //  because we're limited in the type of selectors we can use in JSDom (see related
  //  note related to `candidateSelectors`)
  isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
    return false;
  }
  return true;
};
var isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable2(options, node) {
  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
    return false;
  }
  return true;
};
var isValidShadowRootTabbable = function isValidShadowRootTabbable2(shadowHostNode) {
  var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
  if (isNaN(tabIndex) || tabIndex >= 0) {
    return true;
  }
  return false;
};
var sortByOrder = function sortByOrder2(candidates) {
  var regularTabbables = [];
  var orderedTabbables = [];
  candidates.forEach(function(item, i58) {
    var isScope = !!item.scopeParent;
    var element = isScope ? item.scopeParent : item;
    var candidateTabindex = getSortOrderTabIndex(element, isScope);
    var elements = isScope ? sortByOrder2(item.candidates) : element;
    if (candidateTabindex === 0) {
      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
    } else {
      orderedTabbables.push({
        documentOrder: i58,
        tabIndex: candidateTabindex,
        item,
        isScope,
        content: elements
      });
    }
  });
  return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc, sortable) {
    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);
    return acc;
  }, []).concat(regularTabbables);
};
var tabbable = function tabbable2(container, options) {
  options = options || {};
  var candidates;
  if (options.getShadowRoot) {
    candidates = getCandidatesIteratively([container], options.includeContainer, {
      filter: isNodeMatchingSelectorTabbable.bind(null, options),
      flatten: false,
      getShadowRoot: options.getShadowRoot,
      shadowRootFilter: isValidShadowRootTabbable
    });
  } else {
    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
  }
  return sortByOrder(candidates);
};
var focusableCandidateSelector = candidateSelectors.concat("iframe").join(",");

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var import_react_dom3 = __toESM(require_react_dom());
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function(target) {
    for (var i58 = 1; i58 < arguments.length; i58++) {
      var source = arguments[i58];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
var index2 = typeof document !== "undefined" ? import_react11.useLayoutEffect : import_react11.useEffect;
var serverHandoffComplete = false;
var count = 0;
var genId = () => "floating-ui-" + count++;
function useFloatingId() {
  const [id, setId] = React2.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React2.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id;
}
var useReactId = React2["useId".toString()];
var useId = useReactId || useFloatingId;
var FloatingArrow = React2.forwardRef(function FloatingArrow2(_ref, ref) {
  let {
    context: {
      placement,
      elements: {
        floating
      },
      middlewareData: {
        arrow: arrow4
      }
    },
    width = 14,
    height = 7,
    tipRadius = 0,
    strokeWidth = 0,
    staticOffset,
    stroke,
    d: d44,
    style: {
      transform,
      ...restStyle
    } = {},
    ...rest
  } = _ref;
  if (true) {
    if (!ref) {
      console.warn("Floating UI: The `ref` prop is required for the `FloatingArrow`", "component.");
    }
  }
  const clipPathId = useId();
  if (!floating) {
    return null;
  }
  strokeWidth *= 2;
  const halfStrokeWidth = strokeWidth / 2;
  const svgX = width / 2 * (tipRadius / -8 + 1);
  const svgY = height / 2 * tipRadius / 4;
  const [side, alignment] = placement.split("-");
  const isRTL2 = platform.isRTL(floating);
  const isCustomShape = !!d44;
  const isVerticalSide = side === "top" || side === "bottom";
  const yOffsetProp = staticOffset && alignment === "end" ? "bottom" : "top";
  let xOffsetProp = staticOffset && alignment === "end" ? "right" : "left";
  if (staticOffset && isRTL2) {
    xOffsetProp = alignment === "end" ? "left" : "right";
  }
  const arrowX = (arrow4 == null ? void 0 : arrow4.x) != null ? staticOffset || arrow4.x : "";
  const arrowY = (arrow4 == null ? void 0 : arrow4.y) != null ? staticOffset || arrow4.y : "";
  const dValue = d44 || "M0,0" + (" H" + width) + (" L" + (width - svgX) + "," + (height - svgY)) + (" Q" + width / 2 + "," + height + " " + svgX + "," + (height - svgY)) + " Z";
  const rotation = {
    top: isCustomShape ? "rotate(180deg)" : "",
    left: isCustomShape ? "rotate(90deg)" : "rotate(-90deg)",
    bottom: isCustomShape ? "" : "rotate(180deg)",
    right: isCustomShape ? "rotate(-90deg)" : "rotate(90deg)"
  }[side];
  return React2.createElement("svg", _extends({}, rest, {
    "aria-hidden": true,
    ref,
    width: isCustomShape ? width : width + strokeWidth,
    height: width,
    viewBox: "0 0 " + width + " " + (height > width ? height : width),
    style: {
      position: "absolute",
      pointerEvents: "none",
      [xOffsetProp]: arrowX,
      [yOffsetProp]: arrowY,
      [side]: isVerticalSide || isCustomShape ? "100%" : "calc(100% - " + strokeWidth / 2 + "px)",
      transform: "" + rotation + (transform != null ? transform : ""),
      ...restStyle
    }
  }), strokeWidth > 0 && React2.createElement("path", {
    clipPath: "url(#" + clipPathId + ")",
    fill: "none",
    stroke,
    strokeWidth: strokeWidth + (d44 ? 0 : 1),
    d: dValue
  }), React2.createElement("path", {
    stroke: strokeWidth && !d44 ? rest.fill : "none",
    d: dValue
  }), React2.createElement("clipPath", {
    id: clipPathId
  }, React2.createElement("rect", {
    x: -halfStrokeWidth,
    y: halfStrokeWidth * (isCustomShape ? -1 : 1),
    width: width + strokeWidth,
    height: width
  })));
});
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach((handler) => handler(data));
    },
    on(event, listener) {
      map.set(event, [...map.get(event) || [], listener]);
    },
    off(event, listener) {
      var _map$get2;
      map.set(event, ((_map$get2 = map.get(event)) == null ? void 0 : _map$get2.filter((l50) => l50 !== listener)) || []);
    }
  };
}
var FloatingNodeContext = React2.createContext(null);
var FloatingTreeContext = React2.createContext(null);
var useFloatingParentNodeId = () => {
  var _React$useContext;
  return ((_React$useContext = React2.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
};
var useFloatingTree = () => React2.useContext(FloatingTreeContext);
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version
      } = _ref;
      return brand + "/" + version;
    }).join(" ");
  }
  return navigator.userAgent;
}
function getWindow2(value) {
  return getDocument(value).defaultView || window;
}
function isElement2(value) {
  return value ? value instanceof Element || value instanceof getWindow2(value).Element : false;
}
function isHTMLElement2(value) {
  return value ? value instanceof HTMLElement || value instanceof getWindow2(value).HTMLElement : false;
}
function isShadowRoot2(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow2(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  const androidRe = /Android/i;
  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function isReactEvent(event) {
  return "nativeEvent" in event;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  }
  if (rootNode && isShadowRoot2(rootNode)) {
    let next = child;
    while (next) {
      if (parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    }
  }
  return false;
}
function createAttribute(name) {
  return "data-floating-ui-" + name;
}
function useLatestRef2(value) {
  const ref = (0, import_react11.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
var safePolygonIdentifier = createAttribute("safe-polygon");
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function useHover(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    elements: {
      domReference,
      floating
    },
    refs
  } = context;
  const {
    enabled = true,
    delay = 0,
    handleClose = null,
    mouseOnly = false,
    restMs = 0,
    move = true
  } = props;
  const tree = useFloatingTree();
  const parentId = useFloatingParentNodeId();
  const handleCloseRef = useLatestRef2(handleClose);
  const delayRef = useLatestRef2(delay);
  const pointerTypeRef = React2.useRef();
  const timeoutRef = React2.useRef();
  const handlerRef = React2.useRef();
  const restTimeoutRef = React2.useRef();
  const blockMouseMoveRef = React2.useRef(true);
  const performedPointerEventsMutationRef = React2.useRef(false);
  const unbindMouseMoveRef = React2.useRef(() => {
  });
  const isHoverOpen = React2.useCallback(() => {
    var _dataRef$current$open;
    const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
    return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
  }, [dataRef]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss() {
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      blockMouseMoveRef.current = true;
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [enabled, events]);
  React2.useEffect(() => {
    if (!enabled || !handleCloseRef.current || !open) {
      return;
    }
    function onLeave(event) {
      if (isHoverOpen()) {
        onOpenChange(false, event);
      }
    }
    const html = getDocument(floating).documentElement;
    html.addEventListener("mouseleave", onLeave);
    return () => {
      html.removeEventListener("mouseleave", onLeave);
    };
  }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
  const closeWithDelay = React2.useCallback(function(event, runElseBranch) {
    if (runElseBranch === void 0) {
      runElseBranch = true;
    }
    const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
    if (closeDelay && !handlerRef.current) {
      clearTimeout(timeoutRef.current);
      timeoutRef.current = setTimeout(() => onOpenChange(false, event), closeDelay);
    } else if (runElseBranch) {
      clearTimeout(timeoutRef.current);
      onOpenChange(false, event);
    }
  }, [delayRef, onOpenChange]);
  const cleanupMouseMoveHandler = React2.useCallback(() => {
    unbindMouseMoveRef.current();
    handlerRef.current = void 0;
  }, []);
  const clearPointerEvents = React2.useCallback(() => {
    if (performedPointerEventsMutationRef.current) {
      const body = getDocument(refs.floating.current).body;
      body.style.pointerEvents = "";
      body.removeAttribute(safePolygonIdentifier);
      performedPointerEventsMutationRef.current = false;
    }
  }, [refs]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function isClickLikeOpenEvent() {
      return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
    }
    function onMouseEnter(event) {
      clearTimeout(timeoutRef.current);
      blockMouseMoveRef.current = false;
      if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, "open") === 0) {
        return;
      }
      const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
      if (openDelay) {
        timeoutRef.current = setTimeout(() => {
          onOpenChange(true, event);
        }, openDelay);
      } else {
        onOpenChange(true, event);
      }
    }
    function onMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      unbindMouseMoveRef.current();
      const doc = getDocument(floating);
      clearTimeout(restTimeoutRef.current);
      if (handleCloseRef.current) {
        if (!open) {
          clearTimeout(timeoutRef.current);
        }
        handlerRef.current = handleCloseRef.current({
          ...context,
          tree,
          x: event.clientX,
          y: event.clientY,
          onClose() {
            clearPointerEvents();
            cleanupMouseMoveHandler();
            closeWithDelay(event);
          }
        });
        const handler = handlerRef.current;
        doc.addEventListener("mousemove", handler);
        unbindMouseMoveRef.current = () => {
          doc.removeEventListener("mousemove", handler);
        };
        return;
      }
      const shouldClose = pointerTypeRef.current === "touch" ? !contains(floating, event.relatedTarget) : true;
      if (shouldClose) {
        closeWithDelay(event);
      }
    }
    function onScrollMouseLeave(event) {
      if (isClickLikeOpenEvent()) {
        return;
      }
      handleCloseRef.current == null ? void 0 : handleCloseRef.current({
        ...context,
        tree,
        x: event.clientX,
        y: event.clientY,
        onClose() {
          clearPointerEvents();
          cleanupMouseMoveHandler();
          closeWithDelay(event);
        }
      })(event);
    }
    if (isElement2(domReference)) {
      const ref = domReference;
      open && ref.addEventListener("mouseleave", onScrollMouseLeave);
      floating == null ? void 0 : floating.addEventListener("mouseleave", onScrollMouseLeave);
      move && ref.addEventListener("mousemove", onMouseEnter, {
        once: true
      });
      ref.addEventListener("mouseenter", onMouseEnter);
      ref.addEventListener("mouseleave", onMouseLeave);
      return () => {
        open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
        floating == null ? void 0 : floating.removeEventListener("mouseleave", onScrollMouseLeave);
        move && ref.removeEventListener("mousemove", onMouseEnter);
        ref.removeEventListener("mouseenter", onMouseEnter);
        ref.removeEventListener("mouseleave", onMouseLeave);
      };
    }
  }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
  index2(() => {
    var _handleCloseRef$curre;
    if (!enabled) {
      return;
    }
    if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
      const body = getDocument(floating).body;
      body.setAttribute(safePolygonIdentifier, "");
      body.style.pointerEvents = "none";
      performedPointerEventsMutationRef.current = true;
      if (isElement2(domReference) && floating) {
        var _tree$nodesRef$curren, _tree$nodesRef$curren2;
        const ref = domReference;
        const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
        if (parentFloating) {
          parentFloating.style.pointerEvents = "";
        }
        ref.style.pointerEvents = "auto";
        floating.style.pointerEvents = "auto";
        return () => {
          ref.style.pointerEvents = "";
          floating.style.pointerEvents = "";
        };
      }
    }
  }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
  index2(() => {
    if (!open) {
      pointerTypeRef.current = void 0;
      cleanupMouseMoveHandler();
      clearPointerEvents();
    }
  }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
  React2.useEffect(() => {
    return () => {
      cleanupMouseMoveHandler();
      clearTimeout(timeoutRef.current);
      clearTimeout(restTimeoutRef.current);
      clearPointerEvents();
    };
  }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    function setPointerRef(event) {
      pointerTypeRef.current = event.pointerType;
    }
    return {
      reference: {
        onPointerDown: setPointerRef,
        onPointerEnter: setPointerRef,
        onMouseMove(event) {
          if (open || restMs === 0) {
            return;
          }
          clearTimeout(restTimeoutRef.current);
          restTimeoutRef.current = setTimeout(() => {
            if (!blockMouseMoveRef.current) {
              onOpenChange(true, event.nativeEvent);
            }
          }, restMs);
        }
      },
      floating: {
        onMouseEnter() {
          clearTimeout(timeoutRef.current);
        },
        onMouseLeave(event) {
          events.emit("dismiss", {
            type: "mouseLeave",
            data: {
              returnFocus: false
            }
          });
          closeWithDelay(event.nativeEvent, false);
        }
      }
    };
  }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);
}
var FloatingDelayGroupContext = React2.createContext({
  delay: 0,
  initialDelay: 0,
  timeoutMs: 0,
  currentId: null,
  setCurrentId: () => {
  },
  setState: () => {
  },
  isInstantPhase: false
});
function activeElement(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {
    var _activeElement, _activeElement$shadow;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  });
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n94) => {
        var _node$context2;
        return node.parentId === n94.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    });
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
var TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
function isTypeableElement(element) {
  return isHTMLElement2(element) && element.matches(TYPEABLE_SELECTOR);
}
var getTabbableOptions = () => ({
  getShadowRoot: true,
  displayCheck: (
    // JSDOM does not support the `tabbable` library. To solve this we can
    // check if `ResizeObserver` is a real function (not polyfilled), which
    // determines if the current environment is JSDOM-like.
    typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
  )
});
function getTabbableIn(container, direction) {
  const allTabbable = tabbable(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = tabbable(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
var HIDDEN_STYLES = {
  border: 0,
  clip: "rect(0 0 0 0)",
  height: "1px",
  margin: "-1px",
  overflow: "hidden",
  padding: 0,
  position: "fixed",
  whiteSpace: "nowrap",
  width: "1px",
  top: 0,
  left: 0
};
var timeoutId;
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    event.target;
    clearTimeout(timeoutId);
  }
}
var FocusGuard = React2.forwardRef(function FocusGuard2(props, ref) {
  const [role, setRole] = React2.useState();
  index2(() => {
    if (isSafari()) {
      setRole("button");
    }
    document.addEventListener("keydown", setActiveElementOnTab);
    return () => {
      document.removeEventListener("keydown", setActiveElementOnTab);
    };
  }, []);
  const restProps = {
    ref,
    tabIndex: 0,
    // Role is only for VoiceOver
    role,
    "aria-hidden": role ? void 0 : true,
    [createAttribute("focus-guard")]: "",
    style: HIDDEN_STYLES
  };
  return React2.createElement("span", _extends({}, props, restProps));
});
var PortalContext = React2.createContext(null);
function useFloatingPortalNode(_temp) {
  let {
    id,
    root
  } = _temp === void 0 ? {} : _temp;
  const [portalNode, setPortalNode] = React2.useState(null);
  const uniqueId = useId();
  const portalContext = usePortalContext();
  const data = React2.useMemo(() => ({
    id,
    root,
    portalContext,
    uniqueId
  }), [id, root, portalContext, uniqueId]);
  const dataRef = React2.useRef();
  index2(() => {
    return () => {
      portalNode == null ? void 0 : portalNode.remove();
    };
  }, [portalNode, data]);
  index2(() => {
    if (dataRef.current === data) return;
    dataRef.current = data;
    const {
      id: id2,
      root: root2,
      portalContext: portalContext2,
      uniqueId: uniqueId2
    } = data;
    const existingIdRoot = id2 ? document.getElementById(id2) : null;
    const attr = createAttribute("portal");
    if (existingIdRoot) {
      const subRoot = document.createElement("div");
      subRoot.id = uniqueId2;
      subRoot.setAttribute(attr, "");
      existingIdRoot.appendChild(subRoot);
      setPortalNode(subRoot);
    } else {
      let container = root2 || (portalContext2 == null ? void 0 : portalContext2.portalNode);
      if (container && !isElement2(container)) container = container.current;
      container = container || document.body;
      let idWrapper = null;
      if (id2) {
        idWrapper = document.createElement("div");
        idWrapper.id = id2;
        container.appendChild(idWrapper);
      }
      const subRoot = document.createElement("div");
      subRoot.id = uniqueId2;
      subRoot.setAttribute(attr, "");
      container = idWrapper || container;
      container.appendChild(subRoot);
      setPortalNode(subRoot);
    }
  }, [data]);
  return portalNode;
}
function FloatingPortal(_ref) {
  let {
    children,
    id,
    root = null,
    preserveTabOrder = true
  } = _ref;
  const portalNode = useFloatingPortalNode({
    id,
    root
  });
  const [focusManagerState, setFocusManagerState] = React2.useState(null);
  const beforeOutsideRef = React2.useRef(null);
  const afterOutsideRef = React2.useRef(null);
  const beforeInsideRef = React2.useRef(null);
  const afterInsideRef = React2.useRef(null);
  const shouldRenderGuards = (
    // The FocusManager and therefore floating element are currently open/
    // rendered.
    !!focusManagerState && // Guards are only for non-modal focus management.
    !focusManagerState.modal && // Don't render if unmount is transitioning.
    focusManagerState.open && preserveTabOrder && !!(root || portalNode)
  );
  React2.useEffect(() => {
    if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
      return;
    }
    function onFocus(event) {
      if (portalNode && isOutsideEvent(event)) {
        const focusing = event.type === "focusin";
        const manageFocus = focusing ? enableFocusInside : disableFocusInside;
        manageFocus(portalNode);
      }
    }
    portalNode.addEventListener("focusin", onFocus, true);
    portalNode.addEventListener("focusout", onFocus, true);
    return () => {
      portalNode.removeEventListener("focusin", onFocus, true);
      portalNode.removeEventListener("focusout", onFocus, true);
    };
  }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
  return React2.createElement(PortalContext.Provider, {
    value: React2.useMemo(() => ({
      preserveTabOrder,
      beforeOutsideRef,
      afterOutsideRef,
      beforeInsideRef,
      afterInsideRef,
      portalNode,
      setFocusManagerState
    }), [preserveTabOrder, portalNode])
  }, shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
    "data-type": "outside",
    ref: beforeOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _beforeInsideRef$curr;
        (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
      } else {
        const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        prevTabbable == null ? void 0 : prevTabbable.focus();
      }
    }
  }), shouldRenderGuards && portalNode && React2.createElement("span", {
    "aria-owns": portalNode.id,
    style: HIDDEN_STYLES
  }), portalNode && (0, import_react_dom3.createPortal)(children, portalNode), shouldRenderGuards && portalNode && React2.createElement(FocusGuard, {
    "data-type": "outside",
    ref: afterOutsideRef,
    onFocus: (event) => {
      if (isOutsideEvent(event, portalNode)) {
        var _afterInsideRef$curre;
        (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
      } else {
        const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
        nextTabbable == null ? void 0 : nextTabbable.focus();
        (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false, event.nativeEvent));
      }
    }
  }));
}
var usePortalContext = () => React2.useContext(PortalContext);
var VisuallyHiddenDismiss = React2.forwardRef(function VisuallyHiddenDismiss2(props, ref) {
  return React2.createElement("button", _extends({}, props, {
    type: "button",
    ref,
    tabIndex: -1,
    style: HIDDEN_STYLES
  }));
});
var FloatingListContext = React2.createContext({
  register: () => {
  },
  unregister: () => {
  },
  map: /* @__PURE__ */ new Map(),
  elementsRef: {
    current: []
  }
});
var identifier = createAttribute("scroll-lock");
var FloatingOverlay = React2.forwardRef(function FloatingOverlay2(_ref, ref) {
  let {
    lockScroll = false,
    ...rest
  } = _ref;
  index2(() => {
    var _window$visualViewpor, _window$visualViewpor2;
    if (!lockScroll) {
      return;
    }
    const alreadyLocked = document.body.hasAttribute(identifier);
    if (alreadyLocked) {
      return;
    }
    document.body.setAttribute(identifier, "");
    const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
    const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
    const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
    if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
      Object.assign(document.body.style, {
        overflow: "hidden",
        [paddingProp]: scrollbarWidth + "px"
      });
      return () => {
        document.body.removeAttribute(identifier);
        Object.assign(document.body.style, {
          overflow: "",
          [paddingProp]: ""
        });
      };
    }
    const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
    const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
    const scrollX = window.pageXOffset;
    const scrollY = window.pageYOffset;
    Object.assign(document.body.style, {
      position: "fixed",
      overflow: "hidden",
      top: -(scrollY - Math.floor(offsetTop)) + "px",
      left: -(scrollX - Math.floor(offsetLeft)) + "px",
      right: "0",
      [paddingProp]: scrollbarWidth + "px"
    });
    return () => {
      Object.assign(document.body.style, {
        position: "",
        overflow: "",
        top: "",
        left: "",
        right: "",
        [paddingProp]: ""
      });
      document.body.removeAttribute(identifier);
      window.scrollTo(scrollX, scrollY);
    };
  }, [lockScroll]);
  return React2.createElement("div", _extends({
    ref
  }, rest, {
    style: {
      position: "fixed",
      overflow: "auto",
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      ...rest.style
    }
  }));
});
function isButtonTarget(event) {
  return isHTMLElement2(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function useClick(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    elements: {
      domReference
    }
  } = context;
  const {
    enabled = true,
    event: eventOption = "click",
    toggle = true,
    ignoreMouse = false,
    keyboardHandlers = true
  } = props;
  const pointerTypeRef = React2.useRef();
  const didKeyDownRef = React2.useRef(false);
  return React2.useMemo(() => {
    if (!enabled) return {};
    return {
      reference: {
        onPointerDown(event) {
          pointerTypeRef.current = event.pointerType;
        },
        onMouseDown(event) {
          if (event.button !== 0) {
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (eventOption === "click") {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "mousedown" : true)) {
            onOpenChange(false, event.nativeEvent);
          } else {
            event.preventDefault();
            onOpenChange(true, event.nativeEvent);
          }
        },
        onClick(event) {
          if (eventOption === "mousedown" && pointerTypeRef.current) {
            pointerTypeRef.current = void 0;
            return;
          }
          if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
            return;
          }
          if (open && toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "click" : true)) {
            onOpenChange(false, event.nativeEvent);
          } else {
            onOpenChange(true, event.nativeEvent);
          }
        },
        onKeyDown(event) {
          pointerTypeRef.current = void 0;
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event)) {
            return;
          }
          if (event.key === " " && !isSpaceIgnored(domReference)) {
            event.preventDefault();
            didKeyDownRef.current = true;
          }
          if (event.key === "Enter") {
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent);
            } else {
              onOpenChange(true, event.nativeEvent);
            }
          }
        },
        onKeyUp(event) {
          if (event.defaultPrevented || !keyboardHandlers || isButtonTarget(event) || isSpaceIgnored(domReference)) {
            return;
          }
          if (event.key === " " && didKeyDownRef.current) {
            didKeyDownRef.current = false;
            if (open && toggle) {
              onOpenChange(false, event.nativeEvent);
            } else {
              onOpenChange(true, event.nativeEvent);
            }
          }
        }
      }
    };
  }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
}
var useInsertionEffect = React2["useInsertionEffect".toString()];
var useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
function useEffectEvent(callback) {
  const ref = React2.useRef(() => {
    if (true) {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React2.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e130 = event;
  return e130.target != null && node.contains(e130.target);
}
var bubbleHandlerKeys = {
  pointerdown: "onPointerDown",
  mousedown: "onMouseDown",
  click: "onClick"
};
var captureHandlerKeys = {
  pointerdown: "onPointerDownCapture",
  mousedown: "onMouseDownCapture",
  click: "onClickCapture"
};
var normalizeBubblesProp = (bubbles) => {
  var _bubbles$escapeKey, _bubbles$outsidePress;
  return {
    escapeKeyBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$escapeKey = bubbles == null ? void 0 : bubbles.escapeKey) != null ? _bubbles$escapeKey : false,
    outsidePressBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$outsidePress = bubbles == null ? void 0 : bubbles.outsidePress) != null ? _bubbles$outsidePress : true
  };
};
function useDismiss(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    events,
    nodeId,
    elements: {
      reference,
      domReference,
      floating
    },
    dataRef
  } = context;
  const {
    enabled = true,
    escapeKey = true,
    outsidePress: unstable_outsidePress = true,
    outsidePressEvent = "pointerdown",
    referencePress = false,
    referencePressEvent = "pointerdown",
    ancestorScroll = false,
    bubbles
  } = props;
  const tree = useFloatingTree();
  const nested = useFloatingParentNodeId() != null;
  const outsidePressFn = useEffectEvent(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
  const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
  const insideReactTreeRef = React2.useRef(false);
  const {
    escapeKeyBubbles,
    outsidePressBubbles
  } = normalizeBubblesProp(bubbles);
  const closeOnEscapeKeyDown = useEffectEvent((event) => {
    if (!open || !enabled || !escapeKey || event.key !== "Escape") {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (!escapeKeyBubbles) {
      event.stopPropagation();
      if (children.length > 0) {
        let shouldDismiss = true;
        children.forEach((child) => {
          var _child$context;
          if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
            shouldDismiss = false;
            return;
          }
        });
        if (!shouldDismiss) {
          return;
        }
      }
    }
    events.emit("dismiss", {
      type: "escapeKey",
      data: {
        returnFocus: {
          preventScroll: false
        }
      }
    });
    onOpenChange(false, isReactEvent(event) ? event.nativeEvent : event);
  });
  const closeOnPressOutside = useEffectEvent((event) => {
    const insideReactTree = insideReactTreeRef.current;
    insideReactTreeRef.current = false;
    if (insideReactTree) {
      return;
    }
    if (typeof outsidePress === "function" && !outsidePress(event)) {
      return;
    }
    const target = getTarget(event);
    if (isHTMLElement2(target) && floating) {
      const canScrollX = target.clientWidth > 0 && target.scrollWidth > target.clientWidth;
      const canScrollY = target.clientHeight > 0 && target.scrollHeight > target.clientHeight;
      let xCond = canScrollY && event.offsetX > target.clientWidth;
      if (canScrollY) {
        const isRTL2 = getWindow2(floating).getComputedStyle(target).direction === "rtl";
        if (isRTL2) {
          xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
        }
      }
      if (xCond || canScrollX && event.offsetY > target.clientHeight) {
        return;
      }
    }
    const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node) => {
      var _node$context;
      return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
    });
    if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
      return;
    }
    const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
    if (children.length > 0) {
      let shouldDismiss = true;
      children.forEach((child) => {
        var _child$context2;
        if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
          shouldDismiss = false;
          return;
        }
      });
      if (!shouldDismiss) {
        return;
      }
    }
    events.emit("dismiss", {
      type: "outsidePress",
      data: {
        returnFocus: nested ? {
          preventScroll: true
        } : isVirtualClick(event) || isVirtualPointerEvent(event)
      }
    });
    onOpenChange(false, event);
  });
  React2.useEffect(() => {
    if (!open || !enabled) {
      return;
    }
    dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
    dataRef.current.__outsidePressBubbles = outsidePressBubbles;
    function onScroll(event) {
      onOpenChange(false, event);
    }
    const doc = getDocument(floating);
    escapeKey && doc.addEventListener("keydown", closeOnEscapeKeyDown);
    outsidePress && doc.addEventListener(outsidePressEvent, closeOnPressOutside);
    let ancestors = [];
    if (ancestorScroll) {
      if (isElement2(domReference)) {
        ancestors = getOverflowAncestors(domReference);
      }
      if (isElement2(floating)) {
        ancestors = ancestors.concat(getOverflowAncestors(floating));
      }
      if (!isElement2(reference) && reference && reference.contextElement) {
        ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
      }
    }
    ancestors = ancestors.filter((ancestor) => {
      var _doc$defaultView;
      return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
    });
    ancestors.forEach((ancestor) => {
      ancestor.addEventListener("scroll", onScroll, {
        passive: true
      });
    });
    return () => {
      escapeKey && doc.removeEventListener("keydown", closeOnEscapeKeyDown);
      outsidePress && doc.removeEventListener(outsidePressEvent, closeOnPressOutside);
      ancestors.forEach((ancestor) => {
        ancestor.removeEventListener("scroll", onScroll);
      });
    };
  }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, closeOnEscapeKeyDown, closeOnPressOutside]);
  React2.useEffect(() => {
    insideReactTreeRef.current = false;
  }, [outsidePress, outsidePressEvent]);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onKeyDown: closeOnEscapeKeyDown,
        [bubbleHandlerKeys[referencePressEvent]]: (event) => {
          if (referencePress) {
            events.emit("dismiss", {
              type: "referencePress",
              data: {
                returnFocus: false
              }
            });
            onOpenChange(false, event.nativeEvent);
          }
        }
      },
      floating: {
        onKeyDown: closeOnEscapeKeyDown,
        [captureHandlerKeys[outsidePressEvent]]: () => {
          insideReactTreeRef.current = true;
        }
      }
    };
  }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange, closeOnEscapeKeyDown]);
}
function useFloating2(options) {
  var _options$elements;
  if (options === void 0) {
    options = {};
  }
  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options;
  const [_domReference, setDomReference] = React2.useState(null);
  const domReference = ((_options$elements = options.elements) == null ? void 0 : _options$elements.reference) || _domReference;
  const position = useFloating(options);
  const tree = useFloatingTree();
  const onOpenChange = useEffectEvent((open2, event) => {
    if (open2) {
      dataRef.current.openEvent = event;
    }
    unstable_onOpenChange == null ? void 0 : unstable_onOpenChange(open2, event);
  });
  const domReferenceRef = React2.useRef(null);
  const dataRef = React2.useRef({});
  const events = React2.useState(() => createPubSub())[0];
  const floatingId = useId();
  const setPositionReference = React2.useCallback((node) => {
    const positionReference = isElement2(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    position.refs.setReference(positionReference);
  }, [position.refs]);
  const setReference = React2.useCallback((node) => {
    if (isElement2(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement2(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement2(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React2.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React2.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const context = React2.useMemo(() => ({
    ...position,
    refs,
    elements,
    dataRef,
    nodeId,
    floatingId,
    events,
    open,
    onOpenChange
  }), [position, nodeId, floatingId, events, open, onOpenChange, refs, elements]);
  index2(() => {
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React2.useMemo(() => ({
    ...position,
    context,
    refs,
    elements
  }), [position, refs, elements, context]);
}
function useFocus(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    onOpenChange,
    dataRef,
    events,
    refs,
    elements: {
      floating,
      domReference
    }
  } = context;
  const {
    enabled = true,
    keyboardOnly = true
  } = props;
  const pointerTypeRef = React2.useRef("");
  const blockFocusRef = React2.useRef(false);
  const timeoutRef = React2.useRef();
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    const doc = getDocument(floating);
    const win = doc.defaultView || window;
    function onBlur() {
      if (!open && isHTMLElement2(domReference) && domReference === activeElement(getDocument(domReference))) {
        blockFocusRef.current = true;
      }
    }
    win.addEventListener("blur", onBlur);
    return () => {
      win.removeEventListener("blur", onBlur);
    };
  }, [floating, domReference, open, enabled]);
  React2.useEffect(() => {
    if (!enabled) {
      return;
    }
    function onDismiss(payload) {
      if (payload.type === "referencePress" || payload.type === "escapeKey") {
        blockFocusRef.current = true;
      }
    }
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
    };
  }, [events, enabled]);
  React2.useEffect(() => {
    return () => {
      clearTimeout(timeoutRef.current);
    };
  }, []);
  return React2.useMemo(() => {
    if (!enabled) {
      return {};
    }
    return {
      reference: {
        onPointerDown(_ref) {
          let {
            pointerType
          } = _ref;
          pointerTypeRef.current = pointerType;
          blockFocusRef.current = !!(pointerType && keyboardOnly);
        },
        onMouseLeave() {
          blockFocusRef.current = false;
        },
        onFocus(event) {
          var _dataRef$current$open;
          if (blockFocusRef.current) {
            return;
          }
          if (event.type === "focus" && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === "mousedown" && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
            return;
          }
          onOpenChange(true, event.nativeEvent);
        },
        onBlur(event) {
          blockFocusRef.current = false;
          const relatedTarget = event.relatedTarget;
          const movedToFocusGuard = isElement2(relatedTarget) && relatedTarget.hasAttribute(createAttribute("focus-guard")) && relatedTarget.getAttribute("data-type") === "outside";
          timeoutRef.current = setTimeout(() => {
            if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
              return;
            }
            onOpenChange(false, event.nativeEvent);
          });
        }
      }
    };
  }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...userProps,
    ...propsList.map((value) => value ? value[elementKey] : null).concat(userProps).reduce((acc, props) => {
      if (!props) {
        return acc;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);
            acc[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              return (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.map((fn) => fn(...args)).find((val) => val !== void 0);
            };
          }
        } else {
          acc[key] = value;
        }
      });
      return acc;
    }, {})
  };
}
function useInteractions(propsList) {
  if (propsList === void 0) {
    propsList = [];
  }
  const deps = propsList;
  const getReferenceProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "reference"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getFloatingProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "floating"),
    // eslint-disable-next-line react-hooks/exhaustive-deps
    deps
  );
  const getItemProps = React2.useCallback(
    (userProps) => mergeProps(userProps, propsList, "item"),
    // Granularly check for `item` changes, because the `getItemProps` getter
    // should be as referentially stable as possible since it may be passed as
    // a prop to many components. All `item` key values must therefore be
    // memoized.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    propsList.map((key) => key == null ? void 0 : key.item)
  );
  return React2.useMemo(() => ({
    getReferenceProps,
    getFloatingProps,
    getItemProps
  }), [getReferenceProps, getFloatingProps, getItemProps]);
}
function useMergeRefs(refs) {
  return React2.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
function useRole(context, props) {
  if (props === void 0) {
    props = {};
  }
  const {
    open,
    floatingId
  } = context;
  const {
    enabled = true,
    role = "dialog"
  } = props;
  const referenceId = useId();
  return React2.useMemo(() => {
    const floatingProps = {
      id: floatingId,
      role
    };
    if (!enabled) {
      return {};
    }
    if (role === "tooltip") {
      return {
        reference: {
          "aria-describedby": open ? floatingId : void 0
        },
        floating: floatingProps
      };
    }
    return {
      reference: {
        "aria-expanded": open ? "true" : "false",
        "aria-haspopup": role === "alertdialog" ? "dialog" : role,
        "aria-controls": open ? floatingId : void 0,
        ...role === "listbox" && {
          role: "combobox"
        },
        ...role === "menu" && {
          id: referenceId
        }
      },
      floating: {
        ...floatingProps,
        ...role === "menu" && {
          "aria-labelledby": referenceId
        }
      }
    };
  }, [enabled, role, open, floatingId, referenceId]);
}
function isPointInPolygon(point, polygon) {
  const [x13, y7] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i58 = 0, j9 = length - 1; i58 < length; j9 = i58++) {
    const [xi, yi] = polygon[i58] || [0, 0];
    const [xj, yj] = polygon[j9] || [0, 0];
    const intersect = yi >= y7 !== yj >= y7 && x13 <= (xj - xi) * (y7 - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    buffer = 0.5,
    blockPointerEvents = false,
    requireIntent = true
  } = options;
  let timeoutId2;
  let hasLanded = false;
  let lastX = null;
  let lastY = null;
  let lastCursorTime = performance.now();
  function getCursorSpeed(x13, y7) {
    const currentTime = performance.now();
    const elapsedTime = currentTime - lastCursorTime;
    if (lastX === null || lastY === null || elapsedTime === 0) {
      lastX = x13;
      lastY = y7;
      lastCursorTime = currentTime;
      return null;
    }
    const deltaX = x13 - lastX;
    const deltaY = y7 - lastY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const speed = distance / elapsedTime;
    lastX = x13;
    lastY = y7;
    lastCursorTime = currentTime;
    return speed;
  }
  const fn = (_ref) => {
    let {
      x: x13,
      y: y7,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId2);
        onClose();
      }
      clearTimeout(timeoutId2);
      if (!elements.domReference || !elements.floating || placement == null || x13 == null || y7 == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x13 > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y7 > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      const isFloatingWider = rect.width > refRect.width;
      const isFloatingTaller = rect.height > refRect.height;
      const left = (isFloatingWider ? refRect : rect).left;
      const right = (isFloatingWider ? refRect : rect).right;
      const top = (isFloatingTaller ? refRect : rect).top;
      const bottom = (isFloatingTaller ? refRect : rect).bottom;
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement2(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context
        } = _ref2;
        return context == null ? void 0 : context.open;
      })) {
        return;
      }
      if (side === "top" && y7 >= refRect.bottom - 1 || side === "bottom" && y7 <= refRect.top + 1 || side === "left" && x13 >= refRect.right - 1 || side === "right" && x13 <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[left, refRect.top + 1], [left, rect.bottom - 1], [right, rect.bottom - 1], [right, refRect.top + 1]];
          break;
        case "bottom":
          rectPoly = [[left, rect.top + 1], [left, refRect.bottom - 1], [right, refRect.bottom - 1], [right, rect.top + 1]];
          break;
        case "left":
          rectPoly = [[rect.right - 1, bottom], [rect.right - 1, top], [refRect.left + 1, top], [refRect.left + 1, bottom]];
          break;
        case "right":
          rectPoly = [[refRect.right - 1, bottom], [refRect.right - 1, top], [rect.left + 1, top], [rect.left + 1, bottom]];
          break;
      }
      function getPolygon(_ref3) {
        let [x14, y8] = _ref3;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x14 + buffer / 2 : cursorLeaveFromRight ? x14 + buffer * 4 : x14 - buffer * 4, y8 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x14 - buffer / 2 : cursorLeaveFromRight ? x14 + buffer * 4 : x14 - buffer * 4, y8 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x14 + buffer / 2 : cursorLeaveFromRight ? x14 + buffer * 4 : x14 - buffer * 4, y8 - buffer];
            const cursorPointTwo = [isFloatingWider ? x14 - buffer / 2 : cursorLeaveFromRight ? x14 + buffer * 4 : x14 - buffer * 4, y8 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x14 + buffer + 1, isFloatingTaller ? y8 + buffer / 2 : cursorLeaveFromBottom ? y8 + buffer * 4 : y8 - buffer * 4];
            const cursorPointTwo = [x14 + buffer + 1, isFloatingTaller ? y8 - buffer / 2 : cursorLeaveFromBottom ? y8 + buffer * 4 : y8 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x14 - buffer, isFloatingTaller ? y8 + buffer / 2 : cursorLeaveFromBottom ? y8 + buffer * 4 : y8 - buffer * 4];
            const cursorPointTwo = [x14 - buffer, isFloatingTaller ? y8 - buffer / 2 : cursorLeaveFromBottom ? y8 + buffer * 4 : y8 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      if (isPointInPolygon([clientX, clientY], rectPoly)) {
        return;
      } else if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isLeave && requireIntent) {
        const cursorSpeed = getCursorSpeed(event.clientX, event.clientY);
        const cursorSpeedThreshold = 0.1;
        if (cursorSpeed !== null && cursorSpeed < cursorSpeedThreshold) {
          return close();
        }
      }
      if (!isPointInPolygon([clientX, clientY], getPolygon([x13, y7]))) {
        close();
      } else if (!hasLanded && requireIntent) {
        timeoutId2 = window.setTimeout(close, 40);
      }
    };
  };
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}

// node_modules/@rewind-ui/core/dist/components/Spinner/Spinner.js
var import_jsx_runtime14 = __toESM(require_jsx_runtime());
var o21 = (o123) => {
  const i58 = H("Spinner"), { size: a74 = "sm", className: c63 = "" } = o123, l50 = twMerge(i58({ size: a74, className: c63 }));
  return (0, import_jsx_runtime14.jsxs)("svg", Object.assign({ className: l50, xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24" }, { children: [(0, import_jsx_runtime14.jsx)("circle", { style: { opacity: 0.25 }, className: "opacity-25", cx: "12", cy: "12", r: "10", stroke: "currentColor", strokeWidth: "4" }), (0, import_jsx_runtime14.jsx)("path", { style: { opacity: 0.75 }, fill: "currentColor", d: "M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" })] }));
};
o21.displayName = "Spinner";

// node_modules/@rewind-ui/core/dist/components/Alert/Alert.js
var w2 = { accent: "none", color: "dark", dismissable: false, dismissableAnimation: true, radius: "lg", shadow: "none", shadowColor: "none", size: "sm", tone: "light" };
var O = { error: (0, import_jsx_runtime15.jsx)(c3, {}), info: (0, import_jsx_runtime15.jsx)(s11, {}), question: (0, import_jsx_runtime15.jsx)(t19, {}), success: (0, import_jsx_runtime15.jsx)(e15, {}), warning: (0, import_jsx_runtime15.jsx)(s12, {}), loading: (0, import_jsx_runtime15.jsx)(o21, { size: "xl" }) };
var z2 = (0, import_react12.forwardRef)((r123, a74) => {
  const n94 = d6("Alert", r123.variant), t150 = H("Alert"), c63 = Object.assign(Object.assign(Object.assign({}, w2), n94), r123), { accent: p35, children: N2, className: z6 = "", color: v8, dismissable: C3, dismissableAnimation: x13 = false, icon: A2, iconType: k3, radius: y7, shadow: W2, shadowColor: I, size: S3, title: T2, tone: q3, variant: E3 } = c63, M3 = __rest(c63, ["accent", "children", "className", "color", "dismissable", "dismissableAnimation", "icon", "iconType", "radius", "shadow", "shadowColor", "size", "title", "tone", "variant"]), [P3, Q2] = (0, import_react12.useState)(true), X2 = (0, import_react12.useRef)(null), B2 = useMergeRefs([a74 || null, X2]);
  e14({ ref: X2, visible: P3, enabled: x13 });
  const D = (0, import_react12.useMemo)(() => twMerge(t150.base({ accent: p35, className: z6, color: v8, radius: y7, shadow: W2, shadowColor: I, size: S3, tone: q3 })), [t150, p35, z6, v8, y7, W2, I, S3, q3]), F2 = t17(r123.id);
  return (0, import_jsx_runtime15.jsxs)("div", Object.assign({ id: F2, role: "alert", ref: B2, className: D }, M3, { children: [(A2 || k3) && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t150.iconWrapper() }, { children: k3 ? O[k3] : A2 })), (0, import_jsx_runtime15.jsxs)("div", Object.assign({ className: t150.infoWrapper({ size: S3 }) }, { children: [T2 && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t150.title({ size: S3, color: v8, tone: q3 }) }, { children: T2 })), N2 && (0, import_jsx_runtime15.jsx)("span", Object.assign({ className: t150.text() }, { children: N2 }))] })), C3 && (0, import_jsx_runtime15.jsx)("button", Object.assign({ type: "button", "aria-label": "Close alert", role: "button", title: "Close alert", className: t150.iconWrapper(), onClick: () => Q2(false) }, { children: (0, import_jsx_runtime15.jsx)(c8, { className: t150.dismissIcon({ size: S3 }) }) }))] }));
});
z2.displayName = "Alert";

// node_modules/@rewind-ui/core/dist/components/Avatar/Avatar.js
var import_jsx_runtime17 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Avatar/AvatarGroup/AvatarGroup.js
var import_jsx_runtime16 = __toESM(require_jsx_runtime());
var import_react14 = __toESM(require_react());
var m4 = (0, import_react14.forwardRef)((a74, m62) => {
  const i58 = H("Avatar"), o123 = Object.assign({}, a74), { children: c63, className: l50 = "" } = o123, n94 = __rest(o123, ["children", "className"]), p35 = t17(a74.id);
  return (0, import_jsx_runtime16.jsx)("div", Object.assign({ id: p35, ref: m62, className: i58.group({ className: l50 }) }, n94, { children: c63 }));
});
m4.displayName = "AvatarGroup";

// node_modules/@rewind-ui/core/dist/components/Avatar/Avatar.js
var import_react15 = __toESM(require_react());
var m5 = { color: "gray", outlined: true, radius: "full", shadow: "none", shadowColor: "none", size: "lg", status: "none", statusPosition: "bottom-right", tone: "solid" };
var u2 = (0, import_react15.forwardRef)((a74, e130) => {
  const u29 = H("Avatar"), c63 = Object.assign(Object.assign({}, m5), a74), { alt: p35, children: h21, className: f22 = "", color: g18, initials: w12 = "", outlined: j9, radius: b12, shadow: N2, shadowColor: v8, size: z6, src: A2, status: C3, statusPosition: O6, tone: P3 } = c63, x13 = __rest(c63, ["alt", "children", "className", "color", "initials", "outlined", "radius", "shadow", "shadowColor", "size", "src", "status", "statusPosition", "tone"]), [G3, y7] = (0, import_react15.useState)(false), E3 = (0, import_react15.useMemo)(() => twMerge(u29.base({ className: f22, color: g18, radius: b12, shadow: N2, shadowColor: v8, size: z6, tone: P3, outlined: j9 })), [u29, f22, g18, b12, N2, v8, z6, P3, j9]), I = t17(a74.id);
  return (0, import_jsx_runtime17.jsxs)("div", Object.assign({ id: I, ref: e130, className: E3 }, x13, { children: [A2 && !G3 && (0, import_jsx_runtime17.jsx)("img", { onError: () => y7(true), className: u29.image({ radius: b12 }), src: A2, alt: p35 || w12 }), (!A2 || A2 && G3) && w12, "none" !== C3 && (0, import_jsx_runtime17.jsx)("span", { className: u29.status({ radius: b12, status: C3, size: z6, position: O6 }) })] }));
});
u2.displayName = "Avatar";
var c9 = Object.assign(u2, { Group: m4 });

// node_modules/@rewind-ui/core/dist/components/Badge/Badge.js
var import_jsx_runtime18 = __toESM(require_jsx_runtime());
var import_react16 = __toESM(require_react());
var d7 = { color: "dark", radius: "lg", shadow: "none", shadowColor: "none", size: "sm", tone: "solid" };
var m6 = (0, import_react16.forwardRef)((t150, m62) => {
  const l50 = d6("Badge", t150.variant), c63 = H("Badge"), h21 = Object.assign(Object.assign(Object.assign({}, d7), l50), t150), { children: p35, className: f22 = "", color: g18, radius: u29, shadow: w12, shadowColor: j9, size: b12, tone: N2, variant: v8 } = h21, x13 = __rest(h21, ["children", "className", "color", "radius", "shadow", "shadowColor", "size", "tone", "variant"]), z6 = (0, import_react16.useMemo)(() => twMerge(c63({ className: f22, color: g18, radius: u29, shadow: w12, shadowColor: j9, size: b12, tone: N2 })), [c63, f22, g18, u29, w12, j9, b12, N2]), C3 = t17(t150.id);
  return (0, import_jsx_runtime18.jsx)("span", Object.assign({ id: C3, ref: m62, className: z6 }, x13, { children: p35 }));
});
m6.displayName = "Badge";

// node_modules/@rewind-ui/core/dist/components/Breadcrumbs/Breadcrumbs.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime());
var import_react18 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.js
var import_jsx_runtime19 = __toESM(require_jsx_runtime());
var import_react17 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Breadcrumbs/Breadcrumbs.context.js
var [e20, n13] = t("Breadcrumbs compound components cannot be rendered outside the Breadcrumbs component");

// node_modules/@rewind-ui/core/dist/components/Breadcrumbs/BreadcrumbsItem/BreadcrumbsItem.js
var a16 = (0, import_react17.forwardRef)((m62, a74) => {
  const l50 = H("Breadcrumbs"), { children: n94, className: d44 = "", href: f22 } = m62, h21 = __rest(m62, ["children", "className", "href"]), { color: p35 } = n13(), u29 = t17(m62.id), b12 = (0, import_react17.useMemo)(() => twMerge(l50.item({ className: d44, color: p35, isLink: !!f22 })), [d44, p35, f22, l50]);
  return (0, import_jsx_runtime19.jsx)("li", Object.assign({ id: u29, ref: a74, className: b12 }, h21, { children: f22 ? (0, import_jsx_runtime19.jsx)("a", Object.assign({ href: f22, className: l50.anchor() }, { children: n94 })) : n94 }));
});
a16.displayName = "BreadcrumbsItem";

// node_modules/@rewind-ui/core/dist/components/Breadcrumbs/Breadcrumbs.js
var n14 = { color: "gray", size: "md" };
var d8 = (0, import_react18.forwardRef)((s74, i58) => {
  const d44 = H("Breadcrumbs"), u29 = Object.assign(Object.assign({}, n14), s74), { children: b12, className: p35 = "", color: f22, separator: h21 = "/", size: j9 } = u29, g18 = __rest(u29, ["children", "className", "color", "separator", "size"]), B2 = t17(s74.id), O6 = { color: f22 }, N2 = (0, import_react18.useMemo)(() => twMerge(d44.base({ className: p35, color: f22, size: j9 })), [p35, f22, j9, d44]), x13 = [];
  return import_react18.Children.forEach(b12, (r123, s75) => {
    x13.push(r123), s75 < import_react18.Children.count(b12) - 1 && x13.push((0, import_jsx_runtime20.jsx)("li", { children: h21 }, s75));
  }), (0, import_jsx_runtime20.jsx)(e20, Object.assign({ value: O6 }, { children: (0, import_jsx_runtime20.jsx)("nav", Object.assign({ "aria-label": "Breadcrumb" }, { children: (0, import_jsx_runtime20.jsx)("ul", Object.assign({ id: B2, ref: i58, className: N2 }, g18, { children: x13 })) })) }));
});
d8.displayName = "Breadcrumbs";
var u3 = Object.assign(d8, { Item: a16 });

// node_modules/@rewind-ui/core/dist/components/Button/Button.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-independent-context.hook.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime());
var import_react19 = __toESM(require_react());
function i8() {
  const i58 = (0, import_react19.createContext)({});
  return [({ children: e130, value: t150 }) => (0, import_jsx_runtime21.jsx)(i58.Provider, Object.assign({ value: t150 }, { children: e130 })), () => (0, import_react19.useContext)(i58)];
}

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.context.js
var [e24, t27] = i8();

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.context.js
var [e25, t28] = i8();

// node_modules/@rewind-ui/core/dist/components/Button/Button.js
var import_react20 = __toESM(require_react());
var h4 = { animation: "none", color: "dark", disabled: false, icon: false, loading: false, radius: "lg", shadow: "none", shadowColor: "none", size: "md", tone: "solid", withRing: true };
var u4 = (0, import_react20.forwardRef)((c63, u29) => {
  const b12 = d6("Button", c63.variant), w12 = H("Button"), g18 = Object.assign(Object.assign(Object.assign(Object.assign({}, h4), t28()), b12), c63), { animation: j9, as: f22, children: v8, className: N2 = "", color: x13, disabled: z6, icon: C3, loading: O6, radius: R2, shadow: y7, shadowColor: B2, size: D, tone: I, variant: G3, withRing: S3 } = g18, k3 = __rest(g18, ["animation", "as", "children", "className", "color", "disabled", "icon", "loading", "radius", "shadow", "shadowColor", "size", "tone", "variant", "withRing"]), { open: P3, withChevron: q3, chevronRotation: A2 } = Object.assign({}, t27()), E3 = (0, import_react20.useMemo)(() => twMerge(w12.base({ animation: j9, className: N2, color: x13, disabled: z6, icon: C3, loading: O6, radius: R2, shadow: y7, shadowColor: B2, size: D, tone: I, withRing: S3 })), [j9, N2, x13, z6, C3, O6, R2, y7, B2, D, w12, I, S3]), F2 = q3 ? w12.chevron({ open: P3, size: D, chevronRotation: A2 }) : "", H3 = O6 ? w12.spinner({ size: D }) : "", J2 = f22 || "button", K2 = t17(c63.id), L = c63.type || "button" === J2 ? "button" : void 0;
  return (0, import_jsx_runtime22.jsxs)(J2, Object.assign({ id: K2, ref: u29, type: L, className: E3, disabled: z6 || O6, "aria-disabled": z6 || O6 }, k3, { children: [O6 && (0, import_jsx_runtime22.jsx)(o21, { className: H3 }), v8, q3 && (0, import_jsx_runtime22.jsx)(n7, { className: F2 })] }));
});
u4.displayName = "Button";

// node_modules/@rewind-ui/core/dist/components/Card/Card.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Card/CardBody/CardBody.js
var import_jsx_runtime23 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Card/Card.context.js
var [e26, n16] = t("Card compound components cannot be rendered outside the Card component");

// node_modules/@rewind-ui/core/dist/components/Card/CardBody/CardBody.js
var import_react21 = __toESM(require_react());
var d9 = (0, import_react21.forwardRef)((o123, d44) => {
  const c63 = H("Card"), { children: l50, className: n94 = "" } = o123, p35 = __rest(o123, ["children", "className"]), { size: f22, withDivider: h21 } = n16(), j9 = t17(o123.id), N2 = (0, import_react21.useMemo)(() => twMerge(c63.body({ className: n94, size: f22, withDivider: h21 })), [c63, n94, f22, h21]);
  return (0, import_jsx_runtime23.jsx)("div", Object.assign({ id: j9, ref: d44, className: N2 }, p35, { children: l50 }));
});
d9.displayName = "CardBody";

// node_modules/@rewind-ui/core/dist/components/Card/CardFooter/CardFooter.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime());
var import_react22 = __toESM(require_react());
var c11 = (0, import_react22.forwardRef)((s74, c63) => {
  const d44 = H("Card"), { children: l50, className: n94 = "" } = s74, p35 = __rest(s74, ["children", "className"]), { size: f22, radius: u29 } = n16(), h21 = t17(s74.id), j9 = (0, import_react22.useMemo)(() => twMerge(d44.footer({ className: n94, radius: u29, size: f22 })), [d44, n94, u29, f22]);
  return (0, import_jsx_runtime24.jsx)("div", Object.assign({ id: h21, ref: c63, className: j9 }, p35, { children: l50 }));
});
c11.displayName = "CardFooter";

// node_modules/@rewind-ui/core/dist/components/Card/CardHeader/CardHeader.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime());
var import_react23 = __toESM(require_react());
var d10 = (0, import_react23.forwardRef)((m62, d44) => {
  const n94 = H("Card"), { children: l50, actions: p35, className: f22 = "" } = m62, h21 = __rest(m62, ["children", "actions", "className"]), { size: j9, radius: u29 } = n16(), N2 = t17(m62.id), x13 = (0, import_react23.useMemo)(() => twMerge(n94.header({ className: f22, radius: u29, size: j9 })), [n94, f22, u29, j9]);
  return (0, import_jsx_runtime25.jsxs)("div", Object.assign({ id: N2, ref: d44, className: x13 }, h21, { children: [l50, p35 && (0, import_jsx_runtime25.jsx)("div", Object.assign({ className: "flex" }, { children: p35 }))] }));
});
d10.displayName = "CardHeader";

// node_modules/@rewind-ui/core/dist/components/Card/CardImage/CardImage.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Image/Image.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime());
var import_react24 = __toESM(require_react());
var c12 = { fit: "contain", height: "auto", loading: "lazy", mode: "dark", radius: "none", width: "100%" };
var d11 = (0, import_react24.forwardRef)((r123, d44) => {
  const l50 = H("Image"), n94 = Object.assign(Object.assign({}, c12), r123), { alt: g18 = "", caption: p35, children: h21, wrapperClassName: f22 = "", className: u29 = "", fit: N2, radius: w12, src: j9, width: b12, height: O6, imageRef: x13, loading: I, mode: y7 } = n94, C3 = __rest(n94, ["alt", "caption", "children", "wrapperClassName", "className", "fit", "radius", "src", "width", "height", "imageRef", "loading", "mode"]), R2 = t17(r123.id), k3 = (0, import_react24.useMemo)(() => twMerge(l50.base({ className: u29, fit: N2, radius: w12 })), [l50, u29, N2, w12]);
  return (0, import_jsx_runtime26.jsxs)("div", Object.assign({ id: R2, ref: d44, className: twMerge(l50.wrapper({ className: f22 })) }, C3, { children: [(0, import_jsx_runtime26.jsx)("img", { className: k3, src: j9, alt: g18, height: O6, width: b12, loading: I, ref: x13 }), p35 && (0, import_jsx_runtime26.jsx)("figcaption", Object.assign({ className: l50.caption({ mode: y7 }) }, { children: p35 }))] }));
});
d11.displayName = "Image";

// node_modules/@rewind-ui/core/dist/components/Card/CardImage/CardImage.js
var import_react25 = __toESM(require_react());
var i11 = (0, import_react25.forwardRef)((s74, i58) => {
  const c63 = H("Card"), { caption: d44, children: p35, src: l50, alt: n94 = "", className: f22 = "", mode: g18 = "light" } = s74, j9 = __rest(s74, ["caption", "children", "src", "alt", "className", "mode"]), { radius: u29 } = n16(), h21 = t17(s74.id), x13 = c63.image({ radius: u29 });
  return (0, import_jsx_runtime27.jsx)(d11, Object.assign({ id: h21, ref: i58, className: x13, src: l50, alt: n94, caption: d44, mode: g18 }, j9));
});
i11.displayName = "CardImage";

// node_modules/@rewind-ui/core/dist/components/Card/Card.js
var import_react26 = __toESM(require_react());
var h5 = { bordered: true, color: "white", radius: "md", shadow: "sm", size: "base", withDivider: true };
var p5 = (0, import_react26.forwardRef)((i58, o123) => {
  const d44 = H("Card"), s74 = Object.assign(Object.assign({}, h5), i58), { bordered: m62, children: p35, className: f22 = "", color: j9, radius: b12, shadow: u29, size: w12, withDivider: C3 } = s74, g18 = __rest(s74, ["bordered", "children", "className", "color", "radius", "shadow", "size", "withDivider"]), v8 = t17(i58.id), D = { radius: b12, size: w12, withDivider: C3 }, N2 = (0, import_react26.useMemo)(() => twMerge(d44.base({ bordered: m62, className: f22, color: j9, radius: b12, shadow: u29, withDivider: C3 })), [m62, f22, j9, b12, u29, C3, d44]);
  return (0, import_jsx_runtime28.jsx)(e26, Object.assign({ value: D }, { children: (0, import_jsx_runtime28.jsx)("div", Object.assign({ id: v8, ref: o123, className: N2 }, g18, { children: p35 })) }));
});
p5.displayName = "Card";
var f5 = Object.assign(p5, { Header: d10, Image: i11, Body: d9, Footer: c11 });

// node_modules/@rewind-ui/core/dist/components/Calendar/Calendar.js
var import_jsx_runtime31 = __toESM(require_jsx_runtime());
var import_react45 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/_lib/formatDistance/index.js
var o25 = { lessThanXSeconds: { one: "less than a second", other: "less than {{count}} seconds" }, xSeconds: { one: "1 second", other: "{{count}} seconds" }, halfAMinute: "half a minute", lessThanXMinutes: { one: "less than a minute", other: "less than {{count}} minutes" }, xMinutes: { one: "1 minute", other: "{{count}} minutes" }, aboutXHours: { one: "about 1 hour", other: "about {{count}} hours" }, xHours: { one: "1 hour", other: "{{count}} hours" }, xDays: { one: "1 day", other: "{{count}} days" }, aboutXWeeks: { one: "about 1 week", other: "about {{count}} weeks" }, xWeeks: { one: "1 week", other: "{{count}} weeks" }, aboutXMonths: { one: "about 1 month", other: "about {{count}} months" }, xMonths: { one: "1 month", other: "{{count}} months" }, aboutXYears: { one: "about 1 year", other: "about {{count}} years" }, xYears: { one: "1 year", other: "{{count}} years" }, overXYears: { one: "over 1 year", other: "over {{count}} years" }, almostXYears: { one: "almost 1 year", other: "almost {{count}} years" } };
var e31 = function(e130, t150, n94) {
  var s74, a74 = o25[e130];
  return s74 = "string" == typeof a74 ? a74 : 1 === t150 ? a74.one : a74.other.replace("{{count}}", t150.toString()), null != n94 && n94.addSuffix ? n94.comparison && n94.comparison > 0 ? "in " + s74 : s74 + " ago" : s74;
};

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/_lib/formatRelative/index.js
var e32 = { lastWeek: "'last' eeee 'at' p", yesterday: "'yesterday at' p", today: "'today at' p", tomorrow: "'tomorrow at' p", nextWeek: "eeee 'at' p", other: "P" };
var t30 = function(t150, a74, o123, r123) {
  return e32[t150];
};

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/_lib/buildLocalizeFn/index.js
function t31(t150) {
  return function(a74, n94) {
    var l50;
    if ("formatting" === (null != n94 && n94.context ? String(n94.context) : "standalone") && t150.formattingValues) {
      var e130 = t150.defaultFormattingWidth || t150.defaultWidth, i58 = null != n94 && n94.width ? String(n94.width) : e130;
      l50 = t150.formattingValues[i58] || t150.formattingValues[e130];
    } else {
      var u29 = t150.defaultWidth, r123 = null != n94 && n94.width ? String(n94.width) : t150.defaultWidth;
      l50 = t150.values[r123] || t150.values[u29];
    }
    return l50[t150.argumentCallback ? t150.argumentCallback(a74) : a74];
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/_lib/localize/index.js
var e33 = { ordinalNumber: function(n94, e130) {
  var i58 = Number(n94), t150 = i58 % 100;
  if (t150 > 20 || t150 < 10) switch (t150 % 10) {
    case 1:
      return i58 + "st";
    case 2:
      return i58 + "nd";
    case 3:
      return i58 + "rd";
  }
  return i58 + "th";
}, era: t31({ values: { narrow: ["B", "A"], abbreviated: ["BC", "AD"], wide: ["Before Christ", "Anno Domini"] }, defaultWidth: "wide" }), quarter: t31({ values: { narrow: ["1", "2", "3", "4"], abbreviated: ["Q1", "Q2", "Q3", "Q4"], wide: ["1st quarter", "2nd quarter", "3rd quarter", "4th quarter"] }, defaultWidth: "wide", argumentCallback: function(n94) {
  return n94 - 1;
} }), month: t31({ values: { narrow: ["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], abbreviated: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], wide: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"] }, defaultWidth: "wide" }), day: t31({ values: { narrow: ["S", "M", "T", "W", "T", "F", "S"], short: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"], abbreviated: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], wide: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"] }, defaultWidth: "wide" }), dayPeriod: t31({ values: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "morning", afternoon: "afternoon", evening: "evening", night: "night" } }, defaultWidth: "wide", formattingValues: { narrow: { am: "a", pm: "p", midnight: "mi", noon: "n", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, abbreviated: { am: "AM", pm: "PM", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" }, wide: { am: "a.m.", pm: "p.m.", midnight: "midnight", noon: "noon", morning: "in the morning", afternoon: "in the afternoon", evening: "in the evening", night: "at night" } }, defaultFormattingWidth: "wide" }) };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/_lib/buildMatchFn/index.js
function t32(t150) {
  return function(r123) {
    var a74 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, e130 = a74.width, n94 = e130 && t150.matchPatterns[e130] || t150.matchPatterns[t150.defaultMatchWidth], u29 = r123.match(n94);
    if (!u29) return null;
    var l50, i58 = u29[0], c63 = e130 && t150.parsePatterns[e130] || t150.parsePatterns[t150.defaultParseWidth], f22 = Array.isArray(c63) ? function(t151, r124) {
      for (var a75 = 0; a75 < t151.length; a75++) if (r124(t151[a75])) return a75;
      return;
    }(c63, function(t151) {
      return t151.test(i58);
    }) : function(t151, r124) {
      for (var a75 in t151) if (t151.hasOwnProperty(a75) && r124(t151[a75])) return a75;
      return;
    }(c63, function(t151) {
      return t151.test(i58);
    });
    return l50 = t150.valueCallback ? t150.valueCallback(f22) : f22, { value: l50 = a74.valueCallback ? a74.valueCallback(l50) : l50, rest: r123.slice(i58.length) };
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/_lib/buildMatchPatternFn/index.js
function a18(a74) {
  return function(l50) {
    var e130 = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : {}, t150 = l50.match(a74.matchPattern);
    if (!t150) return null;
    var r123 = t150[0], n94 = l50.match(a74.parsePattern);
    if (!n94) return null;
    var u29 = a74.valueCallback ? a74.valueCallback(n94[0]) : n94[0];
    return { value: u29 = e130.valueCallback ? e130.valueCallback(u29) : u29, rest: l50.slice(r123.length) };
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/_lib/match/index.js
var t33 = { ordinalNumber: a18({ matchPattern: /^(\d+)(th|st|nd|rd)?/i, parsePattern: /\d+/i, valueCallback: function(a74) {
  return parseInt(a74, 10);
} }), era: t32({ matchPatterns: { narrow: /^(b|a)/i, abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i, wide: /^(before christ|before common era|anno domini|common era)/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/^b/i, /^(a|c)/i] }, defaultParseWidth: "any" }), quarter: t32({ matchPatterns: { narrow: /^[1234]/i, abbreviated: /^q[1234]/i, wide: /^[1234](th|st|nd|rd)? quarter/i }, defaultMatchWidth: "wide", parsePatterns: { any: [/1/i, /2/i, /3/i, /4/i] }, defaultParseWidth: "any", valueCallback: function(a74) {
  return a74 + 1;
} }), month: t32({ matchPatterns: { narrow: /^[jfmasond]/i, abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i, wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^j/i, /^f/i, /^m/i, /^a/i, /^m/i, /^j/i, /^j/i, /^a/i, /^s/i, /^o/i, /^n/i, /^d/i], any: [/^ja/i, /^f/i, /^mar/i, /^ap/i, /^may/i, /^jun/i, /^jul/i, /^au/i, /^s/i, /^o/i, /^n/i, /^d/i] }, defaultParseWidth: "any" }), day: t32({ matchPatterns: { narrow: /^[smtwf]/i, short: /^(su|mo|tu|we|th|fr|sa)/i, abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i, wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i }, defaultMatchWidth: "wide", parsePatterns: { narrow: [/^s/i, /^m/i, /^t/i, /^w/i, /^t/i, /^f/i, /^s/i], any: [/^su/i, /^m/i, /^tu/i, /^w/i, /^th/i, /^f/i, /^sa/i] }, defaultParseWidth: "any" }), dayPeriod: t32({ matchPatterns: { narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i, any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i }, defaultMatchWidth: "any", parsePatterns: { any: { am: /^a/i, pm: /^p/i, midnight: /^mi/i, noon: /^no/i, morning: /morning/i, afternoon: /afternoon/i, evening: /evening/i, night: /night/i } }, defaultParseWidth: "any" }) };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/_lib/buildFormatLongFn/index.js
function t34(t150) {
  return function() {
    var r123 = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : {}, d44 = r123.width ? String(r123.width) : t150.defaultWidth;
    return t150.formats[d44] || t150.formats[t150.defaultWidth];
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-GB/_lib/formatLong/index.js
var m12 = { date: t34({ formats: { full: "EEEE, d MMMM yyyy", long: "d MMMM yyyy", medium: "d MMM yyyy", short: "dd/MM/yyyy" }, defaultWidth: "full" }), time: t34({ formats: { full: "HH:mm:ss zzzz", long: "HH:mm:ss z", medium: "HH:mm:ss", short: "HH:mm" }, defaultWidth: "full" }), dateTime: t34({ formats: { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, defaultWidth: "full" }) };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-GB/index.js
var r21 = { code: "en-GB", formatDistance: e31, formatLong: m12, formatRelative: t30, localize: e33, match: t33, options: { weekStartsOn: 1, firstWeekContainsDate: 4 } };

// node_modules/@rewind-ui/core/dist/icons/AngleLeft.js
var import_jsx_runtime29 = __toESM(require_jsx_runtime());
var e34 = () => (0, import_jsx_runtime29.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "1em", viewBox: "0 0 320 512" }, { children: (0, import_jsx_runtime29.jsx)("path", { d: "M47 239c-9.4 9.4-9.4 24.6 0 33.9L207 433c9.4 9.4 24.6 9.4 33.9 0s9.4-24.6 0-33.9L97.9 256 241 113c9.4-9.4 9.4-24.6 0-33.9s-24.6-9.4-33.9 0L47 239z" }) }));

// node_modules/@rewind-ui/core/dist/icons/AngleRight.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime());
var e35 = () => (0, import_jsx_runtime30.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, height: "1em", viewBox: "0 0 320 512" }, { children: (0, import_jsx_runtime30.jsx)("path", { d: "M273 239c9.4 9.4 9.4 24.6 0 33.9L113 433c-9.4 9.4-24.6 9.4-33.9 0s-9.4-24.6 0-33.9l143-143L79 113c-9.4-9.4-9.4-24.6 0-33.9s24.6-9.4 33.9 0L273 239z" }) }));

// node_modules/@rewind-ui/core/dist/node_modules/@babel/runtime/helpers/esm/typeof.js
function o26(t150) {
  "@babel/helpers - typeof";
  return o26 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o123) {
    return typeof o123;
  } : function(o123) {
    return o123 && "function" == typeof Symbol && o123.constructor === Symbol && o123 !== Symbol.prototype ? "symbol" : typeof o123;
  }, o26(t150);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/requiredArgs/index.js
function e36(e130, r123) {
  if (r123.length < e130) throw new TypeError(e130 + " argument" + (e130 > 1 ? "s" : "") + " required, but only " + r123.length + " present");
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/toDate/index.js
function r22(r123) {
  e36(1, arguments);
  var n94 = Object.prototype.toString.call(r123);
  return r123 instanceof Date || "object" === o26(r123) && "[object Date]" === n94 ? new Date(r123.getTime()) : "number" == typeof r123 || "[object Number]" === n94 ? new Date(r123) : ("string" != typeof r123 && "[object String]" !== n94 || "undefined" == typeof console || (console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"), console.warn(new Error().stack)), /* @__PURE__ */ new Date(NaN));
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/eachDayOfInterval/index.js
function t37(t150, a74) {
  var i58;
  e36(1, arguments);
  var o123 = t150 || {}, n94 = r22(o123.start), s74 = r22(o123.end).getTime();
  if (!(n94.getTime() <= s74)) throw new RangeError("Invalid interval");
  var u29 = [], m62 = n94;
  m62.setHours(0, 0, 0, 0);
  var d44 = Number(null !== (i58 = null == a74 ? void 0 : a74.step) && void 0 !== i58 ? i58 : 1);
  if (d44 < 1 || isNaN(d44)) throw new RangeError("`options.step` must be a number greater than 1");
  for (; m62.getTime() <= s74; ) u29.push(r22(m62)), m62.setDate(m62.getDate() + d44), m62.setHours(0, 0, 0, 0);
  return u29;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isMonday/index.js
function t38(t150) {
  return e36(1, arguments), 1 === r22(t150).getDay();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/startOfMonth/index.js
function t39(t150) {
  e36(1, arguments);
  var o123 = r22(t150);
  return o123.setDate(1), o123.setHours(0, 0, 0, 0), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/getDay/index.js
function t40(t150) {
  return e36(1, arguments), r22(t150).getDay();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/toInteger/index.js
function r23(r123) {
  if (null === r123 || true === r123 || false === r123) return NaN;
  var a74 = Number(r123);
  return isNaN(a74) ? a74 : a74 < 0 ? Math.ceil(a74) : Math.floor(a74);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/addDays/index.js
function i12(i58, o123) {
  e36(2, arguments);
  var a74 = r22(i58), n94 = r23(o123);
  return isNaN(n94) ? /* @__PURE__ */ new Date(NaN) : n94 ? (a74.setDate(a74.getDate() + n94), a74) : a74;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/subDays/index.js
function o27(o123, t150) {
  e36(2, arguments);
  var d44 = r23(t150);
  return i12(o123, -d44);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/previousDay/index.js
function o28(o123, t150) {
  e36(2, arguments);
  var s74 = t40(o123) - t150;
  return s74 <= 0 && (s74 += 7), o27(o123, s74);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/previousMonday/index.js
function i13(i58) {
  return e36(1, arguments), o28(i58, 1);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isSunday/index.js
function t41(t150) {
  return e36(1, arguments), 0 === r22(t150).getDay();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/endOfMonth/index.js
function t42(t150) {
  e36(1, arguments);
  var o123 = r22(t150), i58 = o123.getMonth();
  return o123.setFullYear(o123.getFullYear(), i58 + 1, 0), o123.setHours(23, 59, 59, 999), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/nextDay/index.js
function o29(o123, t150) {
  e36(2, arguments);
  var d44 = t150 - t40(o123);
  return d44 <= 0 && (d44 += 7), i12(o123, d44);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/nextSunday/index.js
function i14(i58) {
  return e36(1, arguments), o29(i58, 0);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isWeekend/index.js
function t43(t150) {
  e36(1, arguments);
  var i58 = r22(t150).getDay();
  return 0 === i58 || 6 === i58;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/startOfDay/index.js
function t44(t150) {
  e36(1, arguments);
  var o123 = r22(t150);
  return o123.setHours(0, 0, 0, 0), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isSameDay/index.js
function t45(t150, i58) {
  e36(2, arguments);
  var m62 = t44(t150), o123 = t44(i58);
  return m62.getTime() === o123.getTime();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isBefore/index.js
function t46(t150, i58) {
  e36(2, arguments);
  var o123 = r22(t150), m62 = r22(i58);
  return o123.getTime() < m62.getTime();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isAfter/index.js
function t47(t150, i58) {
  e36(2, arguments);
  var o123 = r22(t150), m62 = r22(i58);
  return o123.getTime() > m62.getTime();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/defaultOptions/index.js
var r24 = {};
function n17() {
  return r24;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/startOfWeek/index.js
function n18(n94, i58) {
  var r123, a74, d44, s74, u29, v8, m62, f22;
  e36(1, arguments);
  var p35 = n17(), w12 = r23(null !== (r123 = null !== (a74 = null !== (d44 = null !== (s74 = null == i58 ? void 0 : i58.weekStartsOn) && void 0 !== s74 ? s74 : null == i58 || null === (u29 = i58.locale) || void 0 === u29 || null === (v8 = u29.options) || void 0 === v8 ? void 0 : v8.weekStartsOn) && void 0 !== d44 ? d44 : p35.weekStartsOn) && void 0 !== a74 ? a74 : null === (m62 = p35.locale) || void 0 === m62 || null === (f22 = m62.options) || void 0 === f22 ? void 0 : f22.weekStartsOn) && void 0 !== r123 ? r123 : 0);
  if (!(w12 >= 0 && w12 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var O6 = r22(n94), b12 = O6.getDay(), g18 = (b12 < w12 ? 7 : 0) + b12 - w12;
  return O6.setDate(O6.getDate() - g18), O6.setHours(0, 0, 0, 0), O6;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/endOfWeek/index.js
function n19(n94, i58) {
  var r123, a74, d44, s74, u29, v8, m62, f22;
  e36(1, arguments);
  var p35 = n17(), w12 = r23(null !== (r123 = null !== (a74 = null !== (d44 = null !== (s74 = null == i58 ? void 0 : i58.weekStartsOn) && void 0 !== s74 ? s74 : null == i58 || null === (u29 = i58.locale) || void 0 === u29 || null === (v8 = u29.options) || void 0 === v8 ? void 0 : v8.weekStartsOn) && void 0 !== d44 ? d44 : p35.weekStartsOn) && void 0 !== a74 ? a74 : null === (m62 = p35.locale) || void 0 === m62 || null === (f22 = m62.options) || void 0 === f22 ? void 0 : f22.weekStartsOn) && void 0 !== r123 ? r123 : 0);
  if (!(w12 >= 0 && w12 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var O6 = r22(n94), b12 = O6.getDay(), g18 = 6 + (b12 < w12 ? -7 : 0) - (b12 - w12);
  return O6.setDate(O6.getDate() + g18), O6.setHours(23, 59, 59, 999), O6;
}

// node_modules/@rewind-ui/core/dist/components/Calendar/use-week.hook.js
function p6({ month: p35, disabledWeekends: x13, disabledDates: j9, minDate: _2, maxDate: D, blueDates: w12, redDates: v8, greenDates: y7, purpleDates: k3, yellowDates: h21 }) {
  const O6 = t37({ start: t38(t39(p35)) ? t39(p35) : i13(t39(p35)), end: t41(t42(p35)) ? t42(p35) : i14(t42(p35)) }).map((e130) => {
    const s74 = x13 && t43(e130) || (null == j9 ? void 0 : j9.some((s75) => t45(s75, e130))) || _2 && t46(e130, _2) || D && t47(e130, D), o123 = null == w12 ? void 0 : w12.some((s75) => t45(s75, e130)), d44 = null == v8 ? void 0 : v8.some((s75) => t45(s75, e130)), n94 = null == y7 ? void 0 : y7.some((s75) => t45(s75, e130)), m62 = null == h21 ? void 0 : h21.some((s75) => t45(s75, e130)), t150 = null == k3 ? void 0 : k3.some((s75) => t45(s75, e130));
    return { value: e130, disabled: !!s74, color: o123 ? "blue" : d44 ? "red" : n94 ? "green" : m62 ? "yellow" : t150 ? "purple" : "white" };
  }), c63 = [];
  for (let e130 = 0; e130 < O6.length; e130 += 7) c63.push(O6.slice(e130, e130 + 7));
  return { weekRows: c63, weekdays: t37({ start: n18(/* @__PURE__ */ new Date(), { weekStartsOn: 1 }), end: n19(/* @__PURE__ */ new Date(), { weekStartsOn: 1 }) }) };
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/eachMonthOfInterval/index.js
function r25(r123) {
  e36(1, arguments);
  var i58 = r123 || {}, o123 = r22(i58.start), n94 = r22(i58.end).getTime(), a74 = [];
  if (!(o123.getTime() <= n94)) throw new RangeError("Invalid interval");
  var s74 = o123;
  for (s74.setHours(0, 0, 0, 0), s74.setDate(1); s74.getTime() <= n94; ) a74.push(r22(s74)), s74.setMonth(s74.getMonth() + 1);
  return a74;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/startOfYear/index.js
function t48(t150) {
  e36(1, arguments);
  var o123 = r22(t150), a74 = /* @__PURE__ */ new Date(0);
  return a74.setFullYear(o123.getFullYear(), 0, 1), a74.setHours(0, 0, 0, 0), a74;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/endOfYear/index.js
function t49(t150) {
  e36(1, arguments);
  var o123 = r22(t150), i58 = o123.getFullYear();
  return o123.setFullYear(i58 + 1, 0, 0), o123.setHours(23, 59, 59, 999), o123;
}

// node_modules/@rewind-ui/core/dist/components/Calendar/use-months.hook.js
function s21(s74) {
  const o123 = r25({ start: t48(/* @__PURE__ */ new Date()), end: t49(/* @__PURE__ */ new Date()) }).map((e130) => (e130.setFullYear(s74.getFullYear()), e130)), r123 = [];
  for (let e130 = 0; e130 < o123.length; e130 += 3) r123.push(o123.slice(e130, e130 + 3));
  return r123;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/eachYearOfInterval/index.js
function t50(t150) {
  e36(1, arguments);
  var i58 = t150 || {}, o123 = r22(i58.start), a74 = r22(i58.end).getTime();
  if (!(o123.getTime() <= a74)) throw new RangeError("Invalid interval");
  var n94 = [], s74 = o123;
  for (s74.setHours(0, 0, 0, 0), s74.setMonth(0, 1); s74.getTime() <= a74; ) n94.push(r22(s74)), s74.setFullYear(s74.getFullYear() + 1);
  return n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/addMonths/index.js
function i15(i58, n94) {
  e36(2, arguments);
  var a74 = r22(i58), o123 = r23(n94);
  if (isNaN(o123)) return /* @__PURE__ */ new Date(NaN);
  if (!o123) return a74;
  var g18 = a74.getDate(), s74 = new Date(a74.getTime());
  return s74.setMonth(a74.getMonth() + o123 + 1, 0), g18 >= s74.getDate() ? s74 : (a74.setFullYear(s74.getFullYear(), s74.getMonth(), g18), a74);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/addYears/index.js
function o30(o123, t150) {
  e36(2, arguments);
  var n94 = r23(t150);
  return i15(o123, 12 * n94);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/subYears/index.js
function o31(o123, t150) {
  e36(2, arguments);
  var d44 = r23(t150);
  return o30(o123, -d44);
}

// node_modules/@rewind-ui/core/dist/components/Calendar/use-years.hook.js
function n20(n94) {
  const o123 = t50({ start: o31(n94, 4), end: o30(n94, 7) }).map((e130) => (e130.setMonth(n94.getMonth()), e130)), d44 = [];
  for (let e130 = 0; e130 < o123.length; e130 += 3) d44.push(o123.slice(e130, e130 + 3));
  return d44;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isDate/index.js
function r26(r123) {
  return e36(1, arguments), r123 instanceof Date || "object" === o26(r123) && "[object Date]" === Object.prototype.toString.call(r123);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isValid/index.js
function t51(t150) {
  if (e36(1, arguments), !r26(t150) && "number" != typeof t150) return false;
  var o123 = r22(t150);
  return !isNaN(Number(o123));
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/subMonths/index.js
function o32(o123, t150) {
  e36(2, arguments);
  var n94 = r23(t150);
  return i15(o123, -n94);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/addMilliseconds/index.js
function i16(i58, o123) {
  e36(2, arguments);
  var n94 = r22(i58).getTime(), m62 = r23(o123);
  return new Date(n94 + m62);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/subMilliseconds/index.js
function o33(o123, t150) {
  e36(2, arguments);
  var d44 = r23(t150);
  return i16(o123, -d44);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getUTCDayOfYear/index.js
function t52(t150) {
  e36(1, arguments);
  var o123 = r22(t150), i58 = o123.getTime();
  o123.setUTCMonth(0, 1), o123.setUTCHours(0, 0, 0, 0);
  var s74 = i58 - o123.getTime();
  return Math.floor(s74 / 864e5) + 1;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/startOfUTCISOWeek/index.js
function r27(r123) {
  e36(1, arguments);
  var o123 = r22(r123), a74 = o123.getUTCDay(), s74 = (a74 < 1 ? 7 : 0) + a74 - 1;
  return o123.setUTCDate(o123.getUTCDate() - s74), o123.setUTCHours(0, 0, 0, 0), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getUTCISOWeekYear/index.js
function a19(a74) {
  e36(1, arguments);
  var i58 = r22(a74), s74 = i58.getUTCFullYear(), o123 = /* @__PURE__ */ new Date(0);
  o123.setUTCFullYear(s74 + 1, 0, 4), o123.setUTCHours(0, 0, 0, 0);
  var m62 = r27(o123), T2 = /* @__PURE__ */ new Date(0);
  T2.setUTCFullYear(s74, 0, 4), T2.setUTCHours(0, 0, 0, 0);
  var u29 = r27(T2);
  return i58.getTime() >= m62.getTime() ? s74 + 1 : i58.getTime() >= u29.getTime() ? s74 : s74 - 1;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/startOfUTCISOWeekYear/index.js
function o34(o123) {
  e36(1, arguments);
  var s74 = a19(o123), i58 = /* @__PURE__ */ new Date(0);
  return i58.setUTCFullYear(s74, 0, 4), i58.setUTCHours(0, 0, 0, 0), r27(i58);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getUTCISOWeek/index.js
function o35(o123) {
  e36(1, arguments);
  var m62 = r22(o123), a74 = r27(m62).getTime() - o34(m62).getTime();
  return Math.round(a74 / 6048e5) + 1;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/startOfUTCWeek/index.js
function l15(l50, r123) {
  var i58, a74, d44, s74, u29, v8, m62, f22;
  e36(1, arguments);
  var p35 = n17(), w12 = r23(null !== (i58 = null !== (a74 = null !== (d44 = null !== (s74 = null == r123 ? void 0 : r123.weekStartsOn) && void 0 !== s74 ? s74 : null == r123 || null === (u29 = r123.locale) || void 0 === u29 || null === (v8 = u29.options) || void 0 === v8 ? void 0 : v8.weekStartsOn) && void 0 !== d44 ? d44 : p35.weekStartsOn) && void 0 !== a74 ? a74 : null === (m62 = p35.locale) || void 0 === m62 || null === (f22 = m62.options) || void 0 === f22 ? void 0 : f22.weekStartsOn) && void 0 !== i58 ? i58 : 0);
  if (!(w12 >= 0 && w12 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  var O6 = r22(l50), g18 = O6.getUTCDay(), k3 = (g18 < w12 ? 7 : 0) + g18 - w12;
  return O6.setUTCDate(O6.getUTCDate() - k3), O6.setUTCHours(0, 0, 0, 0), O6;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getUTCWeekYear/index.js
function r28(r123, l50) {
  var a74, s74, u29, d44, v8, f22, m62, C3;
  e36(1, arguments);
  var T2 = r22(r123), p35 = T2.getUTCFullYear(), g18 = n17(), D = r23(null !== (a74 = null !== (s74 = null !== (u29 = null !== (d44 = null == l50 ? void 0 : l50.firstWeekContainsDate) && void 0 !== d44 ? d44 : null == l50 || null === (v8 = l50.locale) || void 0 === v8 || null === (f22 = v8.options) || void 0 === f22 ? void 0 : f22.firstWeekContainsDate) && void 0 !== u29 ? u29 : g18.firstWeekContainsDate) && void 0 !== s74 ? s74 : null === (m62 = g18.locale) || void 0 === m62 || null === (C3 = m62.options) || void 0 === C3 ? void 0 : C3.firstWeekContainsDate) && void 0 !== a74 ? a74 : 1);
  if (!(D >= 1 && D <= 7)) throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  var k3 = /* @__PURE__ */ new Date(0);
  k3.setUTCFullYear(p35 + 1, 0, D), k3.setUTCHours(0, 0, 0, 0);
  var x13 = l15(k3, l50), U = /* @__PURE__ */ new Date(0);
  U.setUTCFullYear(p35, 0, D), U.setUTCHours(0, 0, 0, 0);
  var W2 = l15(U, l50);
  return T2.getTime() >= x13.getTime() ? p35 + 1 : T2.getTime() >= W2.getTime() ? p35 : p35 - 1;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/startOfUTCWeekYear/index.js
function l16(l50, r123) {
  var s74, a74, d44, u29, f22, v8, m62, p35;
  e36(1, arguments);
  var C3 = n17(), k3 = r23(null !== (s74 = null !== (a74 = null !== (d44 = null !== (u29 = null == r123 ? void 0 : r123.firstWeekContainsDate) && void 0 !== u29 ? u29 : null == r123 || null === (f22 = r123.locale) || void 0 === f22 || null === (v8 = f22.options) || void 0 === v8 ? void 0 : v8.firstWeekContainsDate) && void 0 !== d44 ? d44 : C3.firstWeekContainsDate) && void 0 !== a74 ? a74 : null === (m62 = C3.locale) || void 0 === m62 || null === (p35 = m62.options) || void 0 === p35 ? void 0 : p35.firstWeekContainsDate) && void 0 !== s74 ? s74 : 1), x13 = r28(l50, r123), W2 = /* @__PURE__ */ new Date(0);
  return W2.setUTCFullYear(x13, 0, k3), W2.setUTCHours(0, 0, 0, 0), l15(W2, r123);
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getUTCWeek/index.js
function o36(o123, m62) {
  e36(1, arguments);
  var a74 = r22(o123), f22 = l15(a74, m62).getTime() - l16(a74, m62).getTime();
  return Math.round(f22 / 6048e5) + 1;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/addLeadingZeros/index.js
function t53(t150, r123) {
  for (var a74 = t150 < 0 ? "-" : "", n94 = Math.abs(t150).toString(); n94.length < r123; ) n94 = "0" + n94;
  return a74 + n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/format/lightFormatters/index.js
var e37 = { y: function(e130, n94) {
  var r123 = e130.getUTCFullYear(), a74 = r123 > 0 ? r123 : 1 - r123;
  return t53("yy" === n94 ? a74 % 100 : a74, n94.length);
}, M: function(e130, n94) {
  var r123 = e130.getUTCMonth();
  return "M" === n94 ? String(r123 + 1) : t53(r123 + 1, 2);
}, d: function(e130, n94) {
  return t53(e130.getUTCDate(), n94.length);
}, a: function(t150, e130) {
  var n94 = t150.getUTCHours() / 12 >= 1 ? "pm" : "am";
  switch (e130) {
    case "a":
    case "aa":
      return n94.toUpperCase();
    case "aaa":
      return n94;
    case "aaaaa":
      return n94[0];
    default:
      return "am" === n94 ? "a.m." : "p.m.";
  }
}, h: function(e130, n94) {
  return t53(e130.getUTCHours() % 12 || 12, n94.length);
}, H: function(e130, n94) {
  return t53(e130.getUTCHours(), n94.length);
}, m: function(e130, n94) {
  return t53(e130.getUTCMinutes(), n94.length);
}, s: function(e130, n94) {
  return t53(e130.getUTCSeconds(), n94.length);
}, S: function(e130, n94) {
  var r123 = n94.length, a74 = e130.getUTCMilliseconds(), u29 = Math.floor(a74 * Math.pow(10, r123 - 3));
  return t53(u29, n94.length);
} };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/format/formatters/index.js
var u5 = "midnight";
var c14 = "noon";
var d12 = "morning";
var s22 = "afternoon";
var f6 = "evening";
var h6 = "night";
function g2(t150, e130) {
  var r123 = t150 > 0 ? "-" : "+", n94 = Math.abs(t150), a74 = Math.floor(n94 / 60), o123 = n94 % 60;
  if (0 === o123) return r123 + String(a74);
  var u29 = e130 || "";
  return r123 + String(a74) + u29 + t53(o123, 2);
}
function w3(t150, e130) {
  return t150 % 60 == 0 ? (t150 > 0 ? "-" : "+") + t53(Math.abs(t150) / 60, 2) : m13(t150, e130);
}
function m13(t150, e130) {
  var r123 = e130 || "", n94 = t150 > 0 ? "-" : "+", a74 = Math.abs(t150);
  return n94 + t53(Math.floor(a74 / 60), 2) + r123 + t53(a74 % 60, 2);
}
var l17 = { G: function(t150, e130, r123) {
  var n94 = t150.getUTCFullYear() > 0 ? 1 : 0;
  switch (e130) {
    case "G":
    case "GG":
    case "GGG":
      return r123.era(n94, { width: "abbreviated" });
    case "GGGGG":
      return r123.era(n94, { width: "narrow" });
    default:
      return r123.era(n94, { width: "wide" });
  }
}, y: function(t150, e130, r123) {
  if ("yo" === e130) {
    var n94 = t150.getUTCFullYear(), a74 = n94 > 0 ? n94 : 1 - n94;
    return r123.ordinalNumber(a74, { unit: "year" });
  }
  return e37.y(t150, e130);
}, Y: function(t150, e130, r123, n94) {
  var o123 = r28(t150, n94), u29 = o123 > 0 ? o123 : 1 - o123;
  return "YY" === e130 ? t53(u29 % 100, 2) : "Yo" === e130 ? r123.ordinalNumber(u29, { unit: "year" }) : t53(u29, e130.length);
}, R: function(t150, e130) {
  var n94 = a19(t150);
  return t53(n94, e130.length);
}, u: function(t150, e130) {
  var r123 = t150.getUTCFullYear();
  return t53(r123, e130.length);
}, Q: function(t150, e130, r123) {
  var n94 = Math.ceil((t150.getUTCMonth() + 1) / 3);
  switch (e130) {
    case "Q":
      return String(n94);
    case "QQ":
      return t53(n94, 2);
    case "Qo":
      return r123.ordinalNumber(n94, { unit: "quarter" });
    case "QQQ":
      return r123.quarter(n94, { width: "abbreviated", context: "formatting" });
    case "QQQQQ":
      return r123.quarter(n94, { width: "narrow", context: "formatting" });
    default:
      return r123.quarter(n94, { width: "wide", context: "formatting" });
  }
}, q: function(t150, e130, r123) {
  var n94 = Math.ceil((t150.getUTCMonth() + 1) / 3);
  switch (e130) {
    case "q":
      return String(n94);
    case "qq":
      return t53(n94, 2);
    case "qo":
      return r123.ordinalNumber(n94, { unit: "quarter" });
    case "qqq":
      return r123.quarter(n94, { width: "abbreviated", context: "standalone" });
    case "qqqqq":
      return r123.quarter(n94, { width: "narrow", context: "standalone" });
    default:
      return r123.quarter(n94, { width: "wide", context: "standalone" });
  }
}, M: function(t150, e130, r123) {
  var n94 = t150.getUTCMonth();
  switch (e130) {
    case "M":
    case "MM":
      return e37.M(t150, e130);
    case "Mo":
      return r123.ordinalNumber(n94 + 1, { unit: "month" });
    case "MMM":
      return r123.month(n94, { width: "abbreviated", context: "formatting" });
    case "MMMMM":
      return r123.month(n94, { width: "narrow", context: "formatting" });
    default:
      return r123.month(n94, { width: "wide", context: "formatting" });
  }
}, L: function(t150, e130, r123) {
  var n94 = t150.getUTCMonth();
  switch (e130) {
    case "L":
      return String(n94 + 1);
    case "LL":
      return t53(n94 + 1, 2);
    case "Lo":
      return r123.ordinalNumber(n94 + 1, { unit: "month" });
    case "LLL":
      return r123.month(n94, { width: "abbreviated", context: "standalone" });
    case "LLLLL":
      return r123.month(n94, { width: "narrow", context: "standalone" });
    default:
      return r123.month(n94, { width: "wide", context: "standalone" });
  }
}, w: function(t150, e130, r123, a74) {
  var o123 = o36(t150, a74);
  return "wo" === e130 ? r123.ordinalNumber(o123, { unit: "week" }) : t53(o123, e130.length);
}, I: function(t150, r123, n94) {
  var a74 = o35(t150);
  return "Io" === r123 ? n94.ordinalNumber(a74, { unit: "week" }) : t53(a74, r123.length);
}, d: function(t150, e130, r123) {
  return "do" === e130 ? r123.ordinalNumber(t150.getUTCDate(), { unit: "date" }) : e37.d(t150, e130);
}, D: function(e130, r123, n94) {
  var a74 = t52(e130);
  return "Do" === r123 ? n94.ordinalNumber(a74, { unit: "dayOfYear" }) : t53(a74, r123.length);
}, E: function(t150, e130, r123) {
  var n94 = t150.getUTCDay();
  switch (e130) {
    case "E":
    case "EE":
    case "EEE":
      return r123.day(n94, { width: "abbreviated", context: "formatting" });
    case "EEEEE":
      return r123.day(n94, { width: "narrow", context: "formatting" });
    case "EEEEEE":
      return r123.day(n94, { width: "short", context: "formatting" });
    default:
      return r123.day(n94, { width: "wide", context: "formatting" });
  }
}, e: function(t150, e130, r123, n94) {
  var a74 = t150.getUTCDay(), o123 = (a74 - n94.weekStartsOn + 8) % 7 || 7;
  switch (e130) {
    case "e":
      return String(o123);
    case "ee":
      return t53(o123, 2);
    case "eo":
      return r123.ordinalNumber(o123, { unit: "day" });
    case "eee":
      return r123.day(a74, { width: "abbreviated", context: "formatting" });
    case "eeeee":
      return r123.day(a74, { width: "narrow", context: "formatting" });
    case "eeeeee":
      return r123.day(a74, { width: "short", context: "formatting" });
    default:
      return r123.day(a74, { width: "wide", context: "formatting" });
  }
}, c: function(t150, e130, r123, n94) {
  var a74 = t150.getUTCDay(), o123 = (a74 - n94.weekStartsOn + 8) % 7 || 7;
  switch (e130) {
    case "c":
      return String(o123);
    case "cc":
      return t53(o123, e130.length);
    case "co":
      return r123.ordinalNumber(o123, { unit: "day" });
    case "ccc":
      return r123.day(a74, { width: "abbreviated", context: "standalone" });
    case "ccccc":
      return r123.day(a74, { width: "narrow", context: "standalone" });
    case "cccccc":
      return r123.day(a74, { width: "short", context: "standalone" });
    default:
      return r123.day(a74, { width: "wide", context: "standalone" });
  }
}, i: function(t150, e130, r123) {
  var n94 = t150.getUTCDay(), a74 = 0 === n94 ? 7 : n94;
  switch (e130) {
    case "i":
      return String(a74);
    case "ii":
      return t53(a74, e130.length);
    case "io":
      return r123.ordinalNumber(a74, { unit: "day" });
    case "iii":
      return r123.day(n94, { width: "abbreviated", context: "formatting" });
    case "iiiii":
      return r123.day(n94, { width: "narrow", context: "formatting" });
    case "iiiiii":
      return r123.day(n94, { width: "short", context: "formatting" });
    default:
      return r123.day(n94, { width: "wide", context: "formatting" });
  }
}, a: function(t150, e130, r123) {
  var n94 = t150.getUTCHours() / 12 >= 1 ? "pm" : "am";
  switch (e130) {
    case "a":
    case "aa":
      return r123.dayPeriod(n94, { width: "abbreviated", context: "formatting" });
    case "aaa":
      return r123.dayPeriod(n94, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "aaaaa":
      return r123.dayPeriod(n94, { width: "narrow", context: "formatting" });
    default:
      return r123.dayPeriod(n94, { width: "wide", context: "formatting" });
  }
}, b: function(t150, e130, r123) {
  var n94, a74 = t150.getUTCHours();
  switch (n94 = 12 === a74 ? c14 : 0 === a74 ? u5 : a74 / 12 >= 1 ? "pm" : "am", e130) {
    case "b":
    case "bb":
      return r123.dayPeriod(n94, { width: "abbreviated", context: "formatting" });
    case "bbb":
      return r123.dayPeriod(n94, { width: "abbreviated", context: "formatting" }).toLowerCase();
    case "bbbbb":
      return r123.dayPeriod(n94, { width: "narrow", context: "formatting" });
    default:
      return r123.dayPeriod(n94, { width: "wide", context: "formatting" });
  }
}, B: function(t150, e130, r123) {
  var n94, a74 = t150.getUTCHours();
  switch (n94 = a74 >= 17 ? f6 : a74 >= 12 ? s22 : a74 >= 4 ? d12 : h6, e130) {
    case "B":
    case "BB":
    case "BBB":
      return r123.dayPeriod(n94, { width: "abbreviated", context: "formatting" });
    case "BBBBB":
      return r123.dayPeriod(n94, { width: "narrow", context: "formatting" });
    default:
      return r123.dayPeriod(n94, { width: "wide", context: "formatting" });
  }
}, h: function(t150, e130, r123) {
  if ("ho" === e130) {
    var n94 = t150.getUTCHours() % 12;
    return 0 === n94 && (n94 = 12), r123.ordinalNumber(n94, { unit: "hour" });
  }
  return e37.h(t150, e130);
}, H: function(t150, e130, r123) {
  return "Ho" === e130 ? r123.ordinalNumber(t150.getUTCHours(), { unit: "hour" }) : e37.H(t150, e130);
}, K: function(t150, e130, r123) {
  var n94 = t150.getUTCHours() % 12;
  return "Ko" === e130 ? r123.ordinalNumber(n94, { unit: "hour" }) : t53(n94, e130.length);
}, k: function(t150, e130, r123) {
  var n94 = t150.getUTCHours();
  return 0 === n94 && (n94 = 24), "ko" === e130 ? r123.ordinalNumber(n94, { unit: "hour" }) : t53(n94, e130.length);
}, m: function(t150, e130, r123) {
  return "mo" === e130 ? r123.ordinalNumber(t150.getUTCMinutes(), { unit: "minute" }) : e37.m(t150, e130);
}, s: function(t150, e130, r123) {
  return "so" === e130 ? r123.ordinalNumber(t150.getUTCSeconds(), { unit: "second" }) : e37.s(t150, e130);
}, S: function(t150, e130) {
  return e37.S(t150, e130);
}, X: function(t150, e130, r123, n94) {
  var a74 = (n94._originalDate || t150).getTimezoneOffset();
  if (0 === a74) return "Z";
  switch (e130) {
    case "X":
      return w3(a74);
    case "XXXX":
    case "XX":
      return m13(a74);
    default:
      return m13(a74, ":");
  }
}, x: function(t150, e130, r123, n94) {
  var a74 = (n94._originalDate || t150).getTimezoneOffset();
  switch (e130) {
    case "x":
      return w3(a74);
    case "xxxx":
    case "xx":
      return m13(a74);
    default:
      return m13(a74, ":");
  }
}, O: function(t150, e130, r123, n94) {
  var a74 = (n94._originalDate || t150).getTimezoneOffset();
  switch (e130) {
    case "O":
    case "OO":
    case "OOO":
      return "GMT" + g2(a74, ":");
    default:
      return "GMT" + m13(a74, ":");
  }
}, z: function(t150, e130, r123, n94) {
  var a74 = (n94._originalDate || t150).getTimezoneOffset();
  switch (e130) {
    case "z":
    case "zz":
    case "zzz":
      return "GMT" + g2(a74, ":");
    default:
      return "GMT" + m13(a74, ":");
  }
}, t: function(t150, e130, r123, n94) {
  var a74 = n94._originalDate || t150, o123 = Math.floor(a74.getTime() / 1e3);
  return t53(o123, e130.length);
}, T: function(t150, e130, r123, n94) {
  var a74 = (n94._originalDate || t150).getTime();
  return t53(a74, e130.length);
} };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/format/longFormatters/index.js
var e38 = function(e130, t150) {
  switch (e130) {
    case "P":
      return t150.date({ width: "short" });
    case "PP":
      return t150.date({ width: "medium" });
    case "PPP":
      return t150.date({ width: "long" });
    default:
      return t150.date({ width: "full" });
  }
};
var t54 = function(e130, t150) {
  switch (e130) {
    case "p":
      return t150.time({ width: "short" });
    case "pp":
      return t150.time({ width: "medium" });
    case "ppp":
      return t150.time({ width: "long" });
    default:
      return t150.time({ width: "full" });
  }
};
var a20 = { p: t54, P: function(a74, i58) {
  var r123, d44 = a74.match(/(P+)(p+)?/) || [], u29 = d44[1], h21 = d44[2];
  if (!h21) return e38(a74, i58);
  switch (u29) {
    case "P":
      r123 = i58.dateTime({ width: "short" });
      break;
    case "PP":
      r123 = i58.dateTime({ width: "medium" });
      break;
    case "PPP":
      r123 = i58.dateTime({ width: "long" });
      break;
    default:
      r123 = i58.dateTime({ width: "full" });
  }
  return r123.replace("{{date}}", e38(u29, i58)).replace("{{time}}", t54(h21, i58));
} };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/getTimezoneOffsetInMilliseconds/index.js
function e39(e130) {
  var t150 = new Date(Date.UTC(e130.getFullYear(), e130.getMonth(), e130.getDate(), e130.getHours(), e130.getMinutes(), e130.getSeconds(), e130.getMilliseconds()));
  return t150.setUTCFullYear(e130.getFullYear()), e130.getTime() - t150.getTime();
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/_lib/protectedTokens/index.js
var t55 = ["D", "DD"];
var n21 = ["YY", "YYYY"];
function o37(n94) {
  return -1 !== t55.indexOf(n94);
}
function e40(t150) {
  return -1 !== n21.indexOf(t150);
}
function s23(t150, n94, o123) {
  if ("YYYY" === t150) throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(n94, "`) for formatting years to the input `").concat(o123, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("YY" === t150) throw new RangeError("Use `yy` instead of `YY` (in `".concat(n94, "`) for formatting years to the input `").concat(o123, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("D" === t150) throw new RangeError("Use `d` instead of `D` (in `".concat(n94, "`) for formatting days of the month to the input `").concat(o123, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
  if ("DD" === t150) throw new RangeError("Use `dd` instead of `DD` (in `".concat(n94, "`) for formatting days of the month to the input `").concat(o123, "`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/_lib/formatLong/index.js
var m14 = { date: t34({ formats: { full: "EEEE, MMMM do, y", long: "MMMM do, y", medium: "MMM d, y", short: "MM/dd/yyyy" }, defaultWidth: "full" }), time: t34({ formats: { full: "h:mm:ss a zzzz", long: "h:mm:ss a z", medium: "h:mm:ss a", short: "h:mm a" }, defaultWidth: "full" }), dateTime: t34({ formats: { full: "{{date}} 'at' {{time}}", long: "{{date}} 'at' {{time}}", medium: "{{date}}, {{time}}", short: "{{date}}, {{time}}" }, defaultWidth: "full" }) };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/locale/en-US/index.js
var r29 = { code: "en-US", formatDistance: e31, formatLong: m14, formatRelative: t30, localize: e33, match: t33, options: { weekStartsOn: 0, firstWeekContainsDate: 1 } };

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/format/index.js
var v = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
var c15 = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
var p7 = /^'([^]*?)'?$/;
var w4 = /''/g;
var g3 = /[a-zA-Z]/;
function k(k3, b12, h21) {
  var j9, x13, D, S3, O6, _2, W2, y7, C3, E3, R2, z6, A2, I, L, T2, M3, P3;
  e36(2, arguments);
  var Y2 = String(b12), $2 = n17(), q3 = null !== (j9 = null !== (x13 = null == h21 ? void 0 : h21.locale) && void 0 !== x13 ? x13 : $2.locale) && void 0 !== j9 ? j9 : r29, F2 = r23(null !== (D = null !== (S3 = null !== (O6 = null !== (_2 = null == h21 ? void 0 : h21.firstWeekContainsDate) && void 0 !== _2 ? _2 : null == h21 || null === (W2 = h21.locale) || void 0 === W2 || null === (y7 = W2.options) || void 0 === y7 ? void 0 : y7.firstWeekContainsDate) && void 0 !== O6 ? O6 : $2.firstWeekContainsDate) && void 0 !== S3 ? S3 : null === (C3 = $2.locale) || void 0 === C3 || null === (E3 = C3.options) || void 0 === E3 ? void 0 : E3.firstWeekContainsDate) && void 0 !== D ? D : 1);
  if (!(F2 >= 1 && F2 <= 7)) throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");
  var H3 = r23(null !== (R2 = null !== (z6 = null !== (A2 = null !== (I = null == h21 ? void 0 : h21.weekStartsOn) && void 0 !== I ? I : null == h21 || null === (L = h21.locale) || void 0 === L || null === (T2 = L.options) || void 0 === T2 ? void 0 : T2.weekStartsOn) && void 0 !== A2 ? A2 : $2.weekStartsOn) && void 0 !== z6 ? z6 : null === (M3 = $2.locale) || void 0 === M3 || null === (P3 = M3.options) || void 0 === P3 ? void 0 : P3.weekStartsOn) && void 0 !== R2 ? R2 : 0);
  if (!(H3 >= 0 && H3 <= 6)) throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");
  if (!q3.localize) throw new RangeError("locale must contain localize property");
  if (!q3.formatLong) throw new RangeError("locale must contain formatLong property");
  var K2 = r22(k3);
  if (!t51(K2)) throw new RangeError("Invalid time value");
  var Q2 = e39(K2), U = o33(K2, Q2), V = { firstWeekContainsDate: F2, weekStartsOn: H3, locale: q3, _originalDate: K2 };
  return Y2.match(c15).map(function(n94) {
    var e130 = n94[0];
    return "p" === e130 || "P" === e130 ? (0, a20[e130])(n94, q3.formatLong) : n94;
  }).join("").match(v).map(function(n94) {
    if ("''" === n94) return "'";
    var e130 = n94[0];
    if ("'" === e130) return function(n95) {
      var e131 = n95.match(p7);
      if (!e131) return n95;
      return e131[1].replace(w4, "'");
    }(n94);
    var o123 = l17[e130];
    if (o123) return null != h21 && h21.useAdditionalWeekYearTokens || !e40(n94) || s23(n94, b12, String(k3)), null != h21 && h21.useAdditionalDayOfYearTokens || !o37(n94) || s23(n94, b12, String(k3)), o123(U, n94, q3.localize, V);
    if (e130.match(g3)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + e130 + "`");
    return n94;
  }).join("");
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isToday/index.js
function i17(i58) {
  return e36(1, arguments), t45(i58, Date.now());
}

// node_modules/@rewind-ui/core/dist/node_modules/date-fns/esm/isSameMonth/index.js
function r30(r123, o123) {
  e36(2, arguments);
  var i58 = r22(r123), n94 = r22(o123);
  return i58.getFullYear() === n94.getFullYear() && i58.getMonth() === n94.getMonth();
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/index.js
var t64 = __toESM(require_react());
var import_react37 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionConfigContext.js
var import_react27 = __toESM(require_react());
var o38 = (0, import_react27.createContext)({ transformPagePoint: (t150) => t150, isStatic: false, reducedMotion: "never" });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/index.js
var import_react28 = __toESM(require_react());
var r31 = (0, import_react28.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
var import_react32 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/PresenceContext.js
var import_react29 = __toESM(require_react());
var r32 = (0, import_react29.createContext)(null);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var import_react30 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-browser.js
var e41 = "undefined" != typeof document;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-isomorphic-effect.js
var m15 = e41 ? import_react30.useLayoutEffect : import_react30.useEffect;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/LazyContext.js
var import_react31 = __toESM(require_react());
var r34 = (0, import_react31.createContext)({ strict: false });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-element.js
function s24(s74, p35, u29, f22) {
  const { visualElement: d44 } = (0, import_react32.useContext)(r31), x13 = (0, import_react32.useContext)(r34), C3 = (0, import_react32.useContext)(r32), l50 = (0, import_react32.useContext)(o38).reducedMotion, j9 = (0, import_react32.useRef)();
  f22 = f22 || x13.renderer, !j9.current && f22 && (j9.current = f22(s74, { visualState: p35, parent: d44, props: u29, presenceContext: C3, blockInitialAnimation: !!C3 && false === C3.initial, reducedMotionConfig: l50 }));
  const A2 = j9.current;
  (0, import_react32.useInsertionEffect)(() => {
    A2 && A2.update(u29, C3);
  });
  const S3 = (0, import_react32.useRef)(Boolean(window.HandoffAppearAnimations));
  return m15(() => {
    A2 && (A2.render(), S3.current && A2.animationState && A2.animationState.animateChanges());
  }), (0, import_react32.useEffect)(() => {
    A2 && (A2.updateFeatures(), !S3.current && A2.animationState && A2.animationState.animateChanges(), window.HandoffAppearAnimations = void 0, S3.current = false);
  }), A2;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
var import_react33 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-ref-object.js
function t59(t150) {
  return "object" == typeof t150 && Object.prototype.hasOwnProperty.call(t150, "current");
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-motion-ref.js
function n23(n94, r123, u29) {
  return (0, import_react33.useCallback)((t150) => {
    t150 && n94.mount && n94.mount(t150), r123 && (t150 ? r123.mount(t150) : r123.unmount()), u29 && ("function" == typeof u29 ? u29(t150) : t59(u29) && (u29.current = t150));
  }, [r123]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/create.js
var import_react34 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/is-variant-label.js
function r35(r123) {
  return "string" == typeof r123 || Array.isArray(r123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-animation-controls.js
function t61(t150) {
  return "object" == typeof t150 && "function" == typeof t150.start;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/variant-props.js
var i18 = ["animate", "whileInView", "whileFocus", "whileHover", "whileTap", "whileDrag", "exit"];
var e43 = ["initial", ...i18];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/is-controlling-variants.js
function r36(r123) {
  return t61(r123.animate) || e43.some((o123) => r35(r123[o123]));
}
function t62(o123) {
  return Boolean(r36(o123) || o123.variants);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/utils.js
function t63(t150, n94) {
  if (r36(t150)) {
    const { initial: r123, animate: n95 } = t150;
    return { initial: false === r123 || r35(r123) ? r123 : void 0, animate: r35(n95) ? n95 : void 0 };
  }
  return false !== t150.inherit ? n94 : {};
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/MotionContext/create.js
function o43(o123) {
  const { initial: m62, animate: e130 } = t63(o123, (0, import_react34.useContext)(r31));
  return (0, import_react34.useMemo)(() => ({ initial: m62, animate: e130 }), [a21(m62), a21(e130)]);
}
function a21(i58) {
  return Array.isArray(i58) ? i58.join(" ") : i58;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/definitions.js
var n24 = { animation: ["animate", "variants", "whileHover", "whileTap", "exit", "whileInView", "whileFocus", "whileDrag"], exit: ["exit"], drag: ["drag", "dragControls"], focus: ["whileFocus"], hover: ["whileHover", "onHoverStart", "onHoverEnd"], tap: ["whileTap", "onTap", "onTapStart", "onTapCancel"], pan: ["onPan", "onPanStart", "onPanSessionStart", "onPanEnd"], inView: ["whileInView", "onViewportEnter", "onViewportLeave"], layout: ["layout", "layoutId"] };
var o44 = {};
for (const a74 in n24) o44[a74] = { isEnabled: (o123) => n24[a74].some((n94) => !!o123[n94]) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/load-features.js
function i20(i58) {
  for (const n94 in i58) o44[n94] = { ...o44[n94], ...i58[n94] };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/LayoutGroupContext.js
var import_react35 = __toESM(require_react());
var r38 = (0, import_react35.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/context/SwitchLayoutGroupContext.js
var import_react36 = __toESM(require_react());
var r39 = (0, import_react36.createContext)({});

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/symbol.js
var o47 = Symbol.for("motionComponentSymbol");

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/index.js
function x2({ preloadedFeatures: a74, createVisualElement: x13, useRender: d44, useVisualState: j9, Component: E3 }) {
  a74 && i20(a74);
  const C3 = (0, import_react37.forwardRef)(function(e130, l50) {
    let p35;
    const C4 = { ...(0, import_react37.useContext)(o38), ...e130, layoutId: v2(e130) }, { isStatic: y7 } = C4, L = o43(e130), M3 = j9(e130, y7);
    if (!y7 && e41) {
      L.visualElement = s24(E3, M3, C4, x13);
      const t150 = (0, import_react37.useContext)(r39), e131 = (0, import_react37.useContext)(r34).strict;
      L.visualElement && (p35 = L.visualElement.loadFeatures(C4, e131, a74, t150));
    }
    return t64.createElement(r31.Provider, { value: L }, p35 && L.visualElement ? t64.createElement(p35, { visualElement: L.visualElement, ...C4 }) : null, d44(E3, e130, n23(M3, L.visualElement, l50), M3, y7, L.visualElement));
  });
  return C3[o47] = E3, C3;
}
function v2({ layoutId: t150 }) {
  const e130 = (0, import_react37.useContext)(r38).id;
  return e130 && void 0 !== t150 ? e130 + "-" + t150 : t150;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/motion-proxy.js
function e45(e130) {
  function t150(t151, o124 = {}) {
    return x2(e130(t151, o124));
  }
  if ("undefined" == typeof Proxy) return t150;
  const o123 = /* @__PURE__ */ new Map();
  return new Proxy(t150, { get: (n94, e131) => (o123.has(e131) || o123.set(e131, t150(e131)), o123.get(e131)) });
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/lowercase-elements.js
var e46 = ["animate", "circle", "defs", "desc", "ellipse", "g", "image", "line", "filter", "marker", "mask", "metadata", "path", "pattern", "polygon", "polyline", "rect", "stop", "switch", "symbol", "svg", "text", "tspan", "use", "view"];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-component.js
function t65(t150) {
  return "string" == typeof t150 && !t150.includes("-") && !!(e46.indexOf(t150) > -1 || /[A-Z]/.test(t150));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/use-render.js
var import_react40 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/use-props.js
var import_react38 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-correction.js
var n25 = {};
function t66(t150) {
  Object.assign(n25, t150);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/transform.js
var e47 = ["transformPerspective", "x", "y", "z", "translateX", "translateY", "translateZ", "scale", "scaleX", "scaleY", "rotate", "rotateX", "rotateY", "rotateZ", "skew", "skewX", "skewY"];
var t67 = new Set(e47);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/is-forced-motion-value.js
function r40(r123, { layout: i58, layoutId: s74 }) {
  return t67.has(r123) || r123.startsWith("origin") || (i58 || void 0 !== s74) && (!!n25[r123] || "opacity" === r123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/utils/is-motion-value.js
var o49 = (o123) => Boolean(o123 && o123.getVelocity);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/build-transform.js
var e48 = { x: "translateX", y: "translateY", z: "translateZ", transformPerspective: "perspective" };
var r41 = e47.length;
function n26(n94, { enableHardwareAcceleration: a74 = true, allowTransformNone: o123 = true }, s74, l50) {
  let i58 = "";
  for (let a75 = 0; a75 < r41; a75++) {
    const r123 = e47[a75];
    if (void 0 !== n94[r123]) {
      i58 += `${e48[r123] || r123}(${n94[r123]}) `;
    }
  }
  return a74 && !n94.z && (i58 += "translateZ(0)"), i58 = i58.trim(), l50 ? i58 = l50(n94, s74 ? "" : i58) : o123 && s74 && (i58 = "none"), i58;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-css-variable.js
var s25 = (s74) => (t150) => "string" == typeof t150 && t150.startsWith(s74);
var t68 = s25("--");
var r42 = s25("var(--");
var a22 = /var\s*\(\s*--[\w-]+(\s*,\s*(?:(?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)+)?\s*\)/g;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/get-as-type.js
var o50 = (o123, r123) => r123 && "number" == typeof o123 ? r123.transform(o123) : o123;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/clamp.js
var t69 = (t150, a74, h21) => Math.min(Math.max(h21, t150), a74);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/numbers/index.js
var r43 = { test: (t150) => "number" == typeof t150, parse: parseFloat, transform: (t150) => t150 };
var o51 = { ...r43, transform: (r123) => t69(0, 1, r123) };
var s26 = { ...r43, default: 1 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/utils.js
var s27 = (s74) => Math.round(1e5 * s74) / 1e5;
var d13 = /(-)?([\d]*\.?[\d])+/g;
var r44 = /(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))/gi;
var t70 = /^(#[0-9a-f]{3,8}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2}(-?[\d\.]+%?)\s*[\,\/]?\s*[\d\.]*%?\))$/i;
function n27(s74) {
  return "string" == typeof s74;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/numbers/units.js
var s28 = (s74) => ({ test: (t150) => n27(t150) && t150.endsWith(s74) && 1 === t150.split(" ").length, parse: parseFloat, transform: (r123) => `${r123}${s74}` });
var t71 = s28("deg");
var e49 = s28("%");
var a23 = s28("px");
var o52 = s28("vh");
var p8 = s28("vw");
var n28 = { ...e49, parse: (r123) => e49.parse(r123) / 100, transform: (r123) => e49.transform(100 * r123) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/type-int.js
var o53 = { ...r43, transform: Math.round };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/number.js
var d14 = { borderWidth: a23, borderTopWidth: a23, borderRightWidth: a23, borderBottomWidth: a23, borderLeftWidth: a23, borderRadius: a23, radius: a23, borderTopLeftRadius: a23, borderTopRightRadius: a23, borderBottomRightRadius: a23, borderBottomLeftRadius: a23, width: a23, maxWidth: a23, height: a23, maxHeight: a23, size: a23, top: a23, right: a23, bottom: a23, left: a23, padding: a23, paddingTop: a23, paddingRight: a23, paddingBottom: a23, paddingLeft: a23, margin: a23, marginTop: a23, marginRight: a23, marginBottom: a23, marginLeft: a23, rotate: t71, rotateX: t71, rotateY: t71, rotateZ: t71, scale: s26, scaleX: s26, scaleY: s26, scaleZ: s26, skew: t71, skewX: t71, skewY: t71, distance: a23, translateX: a23, translateY: a23, translateZ: a23, x: a23, y: a23, z: a23, perspective: a23, transformPerspective: a23, opacity: o51, originX: n28, originY: n28, originZ: a23, zIndex: o53, fillOpacity: o51, strokeOpacity: o51, numOctaves: o53 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/build-styles.js
function i21(i58, m62, f22, a74) {
  const { style: e130, vars: c63, transform: l50, transformOrigin: p35 } = i58;
  let u29 = false, g18 = false, d44 = true;
  for (const r123 in m62) {
    const i59 = m62[r123];
    if (t68(r123)) {
      c63[r123] = i59;
      continue;
    }
    const f23 = d14[r123], a75 = o50(i59, f23);
    if (t67.has(r123)) {
      if (u29 = true, l50[r123] = a75, !d44) continue;
      i59 !== (f23.default || 0) && (d44 = false);
    } else r123.startsWith("origin") ? (g18 = true, p35[r123] = a75) : e130[r123] = a75;
  }
  if (m62.transform || (u29 || a74 ? e130.transform = n26(i58.transform, f22, d44, a74) : e130.transform && (e130.transform = "none")), g18) {
    const { originX: r123 = "50%", originY: o123 = "50%", originZ: t150 = 0 } = p35;
    e130.transformOrigin = `${r123} ${o123} ${t150}`;
  }
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/create-render-state.js
var r45 = () => ({ style: {}, transform: {}, transformOrigin: {}, vars: {} });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/use-props.js
function a24(t150, o123, n94) {
  for (const a74 in o123) o49(o123[a74]) || r40(a74, n94) || (t150[a74] = o123[a74]);
}
function s29(e130, r123, s74) {
  const i58 = {};
  return a24(i58, e130.style || {}, e130), Object.assign(i58, function({ transformTemplate: e131 }, r124, a74) {
    return (0, import_react38.useMemo)(() => {
      const t150 = r45();
      return i21(t150, r124, { enableHardwareAcceleration: !a74 }, e131), Object.assign({}, t150.vars, t150.style);
    }, [r124]);
  }(e130, r123, s74)), e130.transformValues ? e130.transformValues(i58) : i58;
}
function i22(t150, e130, r123) {
  const o123 = {}, n94 = s29(t150, e130, r123);
  return t150.drag && false !== t150.dragListener && (o123.draggable = false, n94.userSelect = n94.WebkitUserSelect = n94.WebkitTouchCallout = "none", n94.touchAction = true === t150.drag ? "none" : "pan-" + ("x" === t150.drag ? "y" : "x")), void 0 === t150.tabIndex && (t150.onTap || t150.onTapStart || t150.whileTap) && (o123.tabIndex = 0), o123.style = n94, o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/valid-prop.js
var t73 = /* @__PURE__ */ new Set(["animate", "exit", "variants", "initial", "style", "values", "variants", "transition", "transformTemplate", "transformValues", "custom", "inherit", "onLayoutAnimationStart", "onLayoutAnimationComplete", "onLayoutMeasure", "onBeforeLayoutMeasure", "onAnimationStart", "onAnimationComplete", "onUpdate", "onDragStart", "onDrag", "onDragEnd", "onMeasureDragConstraints", "onDirectionLock", "onDragTransitionEnd", "_dragX", "_dragY", "onHoverStart", "onHoverEnd", "onViewportEnter", "onViewportLeave", "ignoreStrict", "viewport"]);
function n29(n94) {
  return n94.startsWith("while") || n94.startsWith("drag") && "draggable" !== n94 || n94.startsWith("layout") || n94.startsWith("onTap") || n94.startsWith("onPan") || t73.has(n94);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/filter-props.js
var o54 = (o123) => !n29(o123);
function r46(r123) {
  r123 && (o54 = (o123) => o123.startsWith("on") ? !n29(o123) : r123(o123));
}
try {
  r46((init_is_prop_valid_browser_esm(), __toCommonJS(is_prop_valid_browser_esm_exports)).default);
} catch (t150) {
}
function i23(r123, i58, e130) {
  const n94 = {};
  for (const a74 in r123) "values" === a74 && "object" == typeof r123.values || (o54(a74) || true === e130 && n29(a74) || !i58 && !n29(a74) || r123.draggable && a74.startsWith("onDrag")) && (n94[a74] = r123[a74]);
  return n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/use-props.js
var import_react39 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/transform-origin.js
function r47(r123, n94, e130) {
  return "string" == typeof r123 ? r123 : a23.transform(n94 + e130 * r123);
}
function n30(t150, n94, e130) {
  return `${r47(n94, t150.x, t150.width)} ${r47(e130, t150.y, t150.height)}`;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/path.js
var s30 = { offset: "stroke-dashoffset", array: "stroke-dasharray" };
var t74 = { offset: "strokeDashoffset", array: "strokeDasharray" };
function a25(a74, o123, f22 = 1, e130 = 0, n94 = true) {
  a74.pathLength = 1;
  const h21 = n94 ? s30 : t74;
  a74[h21.offset] = a23.transform(-e130);
  const m62 = a23.transform(o123), y7 = a23.transform(f22);
  a74[h21.array] = `${m62} ${y7}`;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/build-attrs.js
function i24(i58, { attrX: s74, attrY: a74, attrScale: e130, originX: n94, originY: m62, pathLength: f22, pathSpacing: d44 = 1, pathOffset: l50 = 0, ...v8 }, p35, y7, g18) {
  if (i21(i58, v8, p35, g18), y7) return void (i58.style.viewBox && (i58.attrs.viewBox = i58.style.viewBox));
  i58.attrs = i58.style, i58.style = {};
  const { attrs: h21, style: c63, dimensions: x13 } = i58;
  h21.transform && (x13 && (c63.transform = h21.transform), delete h21.transform), x13 && (void 0 !== n94 || void 0 !== m62 || c63.transform) && (c63.transformOrigin = n30(x13, void 0 !== n94 ? n94 : 0.5, void 0 !== m62 ? m62 : 0.5)), void 0 !== s74 && (h21.x = s74), void 0 !== a74 && (h21.y = a74), void 0 !== e130 && (h21.scale = e130), void 0 !== f22 && a25(h21, f22, d44, l50, false);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/create-render-state.js
var r48 = () => ({ ...r45(), attrs: {} });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/is-svg-tag.js
var o55 = (o123) => "string" == typeof o123 && "svg" === o123.toLowerCase();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/use-props.js
function l18(l50, i58, m62, a74) {
  const n94 = (0, import_react39.useMemo)(() => {
    const t150 = r48();
    return i24(t150, i58, { enableHardwareAcceleration: false }, o55(a74), l50.transformTemplate), { ...t150.attrs, style: { ...t150.style } };
  }, [i58]);
  if (l50.style) {
    const t150 = {};
    a24(t150, l50.style, l50), n94.style = { ...t150, ...n94.style };
  }
  return n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/use-render.js
function p9(p35 = false) {
  return (l50, n94, u29, { latestValues: f22 }, c63) => {
    const a74 = (t65(l50) ? l18 : i22)(n94, f22, c63, l50), j9 = { ...i23(n94, "string" == typeof l50, p35), ...a74, ref: u29 }, { children: g18 } = n94, v8 = (0, import_react40.useMemo)(() => o49(g18) ? g18.get() : g18, [g18]);
    return (0, import_react40.createElement)(l50, { ...j9, children: v8 });
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/camel-to-dash.js
var e50 = (e130) => e130.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/render.js
function t77(t150, { style: e130, vars: s74 }, o123, n94) {
  Object.assign(t150.style, e130, n94 && n94.getProjectionStyles(o123));
  for (const e131 in s74) t150.style.setProperty(e131, s74[e131]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/camel-case-attrs.js
var e51 = /* @__PURE__ */ new Set(["baseFrequency", "diffuseConstant", "kernelMatrix", "kernelUnitLength", "keySplines", "keyTimes", "limitingConeAngle", "markerHeight", "markerWidth", "numOctaves", "targetX", "targetY", "surfaceScale", "specularConstant", "specularExponent", "stdDeviation", "tableValues", "viewBox", "gradientTransform", "pathLength", "startOffset", "textLength", "lengthAdjust"]);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/render.js
function s31(s74, m62, i58, a74) {
  t77(s74, m62, void 0, a74);
  for (const r123 in m62.attrs) s74.setAttribute(e51.has(r123) ? r123 : e50(r123), m62.attrs[r123]);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/utils/scrape-motion-values.js
function i25(i58, s74) {
  const { style: e130 } = i58, n94 = {};
  for (const r123 in e130) (o49(e130[r123]) || s74.style && o49(s74.style[r123]) || r40(r123, i58)) && (n94[r123] = e130[r123]);
  return n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/utils/scrape-motion-values.js
function s32(s74, i58) {
  const m62 = i25(s74, i58);
  for (const o123 in s74) if (o49(s74[o123]) || o49(i58[o123])) {
    m62[-1 !== e47.indexOf(o123) ? "attr" + o123.charAt(0).toUpperCase() + o123.substring(1) : o123] = s74[o123];
  }
  return m62;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var import_react42 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/resolve-variants.js
function t78(t150, o123, n94, i58 = {}, f22 = {}) {
  return "function" == typeof o123 && (o123 = o123(void 0 !== n94 ? n94 : t150.custom, i58, f22)), "string" == typeof o123 && (o123 = t150.variants && t150.variants[o123]), "function" == typeof o123 && (o123 = o123(void 0 !== n94 ? n94 : t150.custom, i58, f22)), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-constant.js
var import_react41 = __toESM(require_react());
function n31(n94) {
  const t150 = (0, import_react41.useRef)(null);
  return null === t150.current && (t150.current = n94()), t150.current;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-keyframes-target.js
var r51 = (r123) => Array.isArray(r123);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/resolve-value.js
var o56 = (t150) => Boolean(t150 && "object" == typeof t150 && t150.mix && t150.toValue);
var e52 = (o123) => r51(o123) ? o123[o123.length - 1] || 0 : o123;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/utils/resolve-motion-value.js
function e53(e130) {
  const r123 = o49(e130) ? e130.get() : e130;
  return o56(r123) ? r123.toValue() : r123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/utils/use-visual-state.js
var c16 = (o123) => (r123, e130) => {
  const a74 = (0, import_react42.useContext)(r31), l50 = (0, import_react42.useContext)(r32), c63 = () => function({ scrapeMotionValuesFromProps: t150, createRenderState: o124, onMount: n94 }, r124, i58, e131) {
    const s74 = { latestValues: m16(r124, i58, e131, t150), renderState: o124() };
    return n94 && (s74.mount = (t151) => n94(r124, t151, s74)), s74;
  }(o123, r123, a74, l50);
  return e130 ? c63() : n31(c63);
};
function m16(t150, n94, i58, s74) {
  const c63 = {}, m62 = s74(t150, {});
  for (const t151 in m62) c63[t151] = e53(m62[t151]);
  let { initial: u29, animate: f22 } = t150;
  const p35 = r36(t150), d44 = t62(t150);
  n94 && d44 && !p35 && false !== t150.inherit && (void 0 === u29 && (u29 = n94.initial), void 0 === f22 && (f22 = n94.animate));
  let v8 = !!i58 && false === i58.initial;
  v8 = v8 || false === u29;
  const j9 = v8 ? f22 : u29;
  if (j9 && "boolean" != typeof j9 && !t61(j9)) {
    (Array.isArray(j9) ? j9 : [j9]).forEach((o123) => {
      const n95 = t78(t150, o123);
      if (!n95) return;
      const { transitionEnd: i59, transition: e130, ...s75 } = n95;
      for (const t151 in s75) {
        let o124 = s75[t151];
        if (Array.isArray(o124)) {
          o124 = o124[v8 ? o124.length - 1 : 0];
        }
        null !== o124 && (c63[t151] = o124);
      }
      for (const t151 in i59) c63[t151] = i59[t151];
    });
  }
  return c63;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/noop.js
var o57 = (o123) => o123;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/render-step.js
function e54(e130) {
  let n94 = [], t150 = [], s74 = 0, c63 = false, l50 = false;
  const o123 = /* @__PURE__ */ new WeakSet(), r123 = { schedule: (e131, l51 = false, r124 = false) => {
    const d44 = r124 && c63, h21 = d44 ? n94 : t150;
    return l51 && o123.add(e131), -1 === h21.indexOf(e131) && (h21.push(e131), d44 && c63 && (s74 = n94.length)), e131;
  }, cancel: (e131) => {
    const n95 = t150.indexOf(e131);
    -1 !== n95 && t150.splice(n95, 1), o123.delete(e131);
  }, process: (d44) => {
    if (c63) l50 = true;
    else {
      if (c63 = true, [n94, t150] = [t150, n94], t150.length = 0, s74 = n94.length, s74) for (let t151 = 0; t151 < s74; t151++) {
        const s75 = n94[t151];
        s75(d44), o123.has(s75) && (r123.schedule(s75), e130());
      }
      c63 = false, l50 && (l50 = false, r123.process(d44));
    }
  } };
  return r123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/batcher.js
var s33 = ["prepare", "read", "update", "preRender", "render", "postRender"];
function r52(r123, t150) {
  let c63 = false, n94 = true;
  const o123 = { delta: 0, timestamp: 0, isProcessing: false }, a74 = s33.reduce((s74, r124) => (s74[r124] = e54(() => c63 = true), s74), {}), i58 = (e130) => a74[e130].process(o123), p35 = () => {
    const e130 = performance.now();
    c63 = false, o123.delta = n94 ? 1e3 / 60 : Math.max(Math.min(e130 - o123.timestamp, 40), 1), o123.timestamp = e130, o123.isProcessing = true, s33.forEach(i58), o123.isProcessing = false, c63 && t150 && (n94 = false, r123(p35));
  };
  return { schedule: s33.reduce((e130, s74) => {
    const t151 = a74[s74];
    return e130[s74] = (e131, s75 = false, a75 = false) => (c63 || (c63 = true, n94 = true, o123.isProcessing || r123(p35)), t151.schedule(e131, s75, a75)), e130;
  }, {}), cancel: (e130) => s33.forEach((s74) => a74[s74].cancel(e130)), state: o123, steps: a74 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/frameloop/frame.js
var { schedule: o58, cancel: r53, state: s34, steps: n32 } = r52("undefined" != typeof requestAnimationFrame ? requestAnimationFrame : o57, true);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/config-motion.js
var m17 = { useVisualState: c16({ scrapeMotionValuesFromProps: s32, createRenderState: r48, onMount: (e130, r123, { renderState: o123, latestValues: m62 }) => {
  o58.read(() => {
    try {
      o123.dimensions = "function" == typeof r123.getBBox ? r123.getBBox() : r123.getBoundingClientRect();
    } catch (t150) {
      o123.dimensions = { x: 0, y: 0, width: 0, height: 0 };
    }
  }), o58.render(() => {
    i24(o123, m62, { enableHardwareAcceleration: false }, o55(r123.tagName), e130.transformTemplate), s31(r123, o123);
  });
} }) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/config-motion.js
var o59 = { useVisualState: c16({ scrapeMotionValuesFromProps: i25, createRenderState: r45 }) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/create-config.js
function n33(n94, { forwardMotionProps: m62 = false }, i58, s74) {
  return { ...t65(n94) ? m17 : o59, preloadedFeatures: i58, useRender: p9(m62), createVisualElement: s74, Component: n94 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/add-dom-event.js
function e55(e130, n94, t150, r123 = { passive: true }) {
  return e130.addEventListener(n94, t150, r123), () => e130.removeEventListener(n94, t150);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/utils/is-primary-pointer.js
var t80 = (t150) => "mouse" === t150.pointerType ? "number" != typeof t150.button || t150.button <= 0 : false !== t150.isPrimary;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/event-info.js
function t81(r123, t150 = "page") {
  return { point: { x: r123[t150 + "X"], y: r123[t150 + "Y"] } };
}
var i26 = (i58) => (o123) => t80(o123) && i58(o123, t81(o123));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/events/add-pointer-event.js
function t82(t150, e130, n94, m62) {
  return e55(t150, e130, i26(n94), m62);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/pipe.js
var e56 = (e130, c63) => (o123) => c63(e130(o123));
var c17 = (...c63) => c63.reduce(e56);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/utils/lock.js
function n34(n94) {
  let t150 = null;
  return () => {
    const r123 = () => {
      t150 = null;
    };
    return null === t150 && (t150 = n94, r123);
  };
}
var t83 = n34("dragHorizontal");
var r54 = n34("dragVertical");
function e57(n94) {
  let e130 = false;
  if ("y" === n94) e130 = r54();
  else if ("x" === n94) e130 = t83();
  else {
    const n95 = t83(), l50 = r54();
    n95 && l50 ? e130 = () => {
      n95(), l50();
    } : (n95 && n95(), l50 && l50());
  }
  return e130;
}
function l19() {
  const n94 = e57(true);
  return !n94 || (n94(), false);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/Feature.js
var t84 = class {
  constructor(t150) {
    this.isMounted = false, this.node = t150;
  }
  update() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/hover.js
function i27(e130, r123) {
  const i58 = "pointer" + (r123 ? "enter" : "leave"), s74 = "onHover" + (r123 ? "Start" : "End");
  return t82(e130.current, i58, (t150, i59) => {
    if ("touch" === t150.type || l19()) return;
    const m62 = e130.getProps();
    e130.animationState && m62.whileHover && e130.animationState.setActive("whileHover", r123), m62[s74] && o58.update(() => m62[s74](t150, i59));
  }, { passive: !e130.getProps()[s74] });
}
var s35 = class extends t84 {
  mount() {
    this.unmount = c17(i27(this.node, true), i27(this.node, false));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/focus.js
var s36 = class extends t84 {
  constructor() {
    super(...arguments), this.isActive = false;
  }
  onFocus() {
    let t150 = false;
    try {
      t150 = this.node.current.matches(":focus-visible");
    } catch (i58) {
      t150 = true;
    }
    t150 && this.node.animationState && (this.node.animationState.setActive("whileFocus", true), this.isActive = true);
  }
  onBlur() {
    this.isActive && this.node.animationState && (this.node.animationState.setActive("whileFocus", false), this.isActive = false);
  }
  mount() {
    this.unmount = c17(e55(this.node.current, "focus", () => this.onFocus()), e55(this.node.current, "blur", () => this.onBlur()));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/utils/is-node-or-child.js
var e58 = (t150, n94) => !!n94 && (t150 === n94 || e58(t150, n94.parentElement));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/press.js
function h7(s74, t150) {
  if (!t150) return;
  const r123 = new PointerEvent("pointer" + s74);
  t150(r123, t81(r123));
}
var p10 = class extends t84 {
  constructor() {
    super(...arguments), this.removeStartListeners = o57, this.removeEndListeners = o57, this.removeAccessibleListeners = o57, this.startPointerPress = (e130, s74) => {
      if (this.removeEndListeners(), this.isPressing) return;
      const r123 = this.node.getProps(), i58 = t82(window, "pointerup", (e131, s75) => {
        if (!this.checkPressEnd()) return;
        const { onTap: t150, onTapCancel: r124 } = this.node.getProps();
        o58.update(() => {
          e58(this.node.current, e131.target) ? t150 && t150(e131, s75) : r124 && r124(e131, s75);
        });
      }, { passive: !(r123.onTap || r123.onPointerUp) }), a74 = t82(window, "pointercancel", (e131, s75) => this.cancelPress(e131, s75), { passive: !(r123.onTapCancel || r123.onPointerCancel) });
      this.removeEndListeners = c17(i58, a74), this.startPress(e130, s74);
    }, this.startAccessiblePress = () => {
      const e130 = e55(this.node.current, "keydown", (e131) => {
        if ("Enter" !== e131.key || this.isPressing) return;
        this.removeEndListeners(), this.removeEndListeners = e55(this.node.current, "keyup", (e132) => {
          "Enter" === e132.key && this.checkPressEnd() && h7("up", (e133, s74) => {
            const { onTap: t151 } = this.node.getProps();
            t151 && o58.update(() => t151(e133, s74));
          });
        }), h7("down", (e132, s74) => {
          this.startPress(e132, s74);
        });
      }), t150 = e55(this.node.current, "blur", () => {
        this.isPressing && h7("cancel", (e131, s74) => this.cancelPress(e131, s74));
      });
      this.removeAccessibleListeners = c17(e130, t150);
    };
  }
  startPress(e130, s74) {
    this.isPressing = true;
    const { onTapStart: t150, whileTap: r123 } = this.node.getProps();
    r123 && this.node.animationState && this.node.animationState.setActive("whileTap", true), t150 && o58.update(() => t150(e130, s74));
  }
  checkPressEnd() {
    this.removeEndListeners(), this.isPressing = false;
    return this.node.getProps().whileTap && this.node.animationState && this.node.animationState.setActive("whileTap", false), !l19();
  }
  cancelPress(e130, s74) {
    if (!this.checkPressEnd()) return;
    const { onTapCancel: t150 } = this.node.getProps();
    t150 && o58.update(() => t150(e130, s74));
  }
  mount() {
    const e130 = this.node.getProps(), r123 = t82(this.node.current, "pointerdown", this.startPointerPress, { passive: !(e130.onTapStart || e130.onPointerStart) }), i58 = e55(this.node.current, "focus", this.startAccessiblePress);
    this.removeStartListeners = c17(r123, i58);
  }
  unmount() {
    this.removeStartListeners(), this.removeEndListeners(), this.removeAccessibleListeners();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/viewport/observers.js
var e59 = /* @__PURE__ */ new WeakMap();
var t85 = /* @__PURE__ */ new WeakMap();
var n35 = (t150) => {
  const n94 = e59.get(t150.target);
  n94 && n94(t150);
};
var o60 = (e130) => {
  e130.forEach(n35);
};
function r55(n94, r123, s74) {
  const c63 = function({ root: e130, ...n95 }) {
    const r124 = e130 || document;
    t85.has(r124) || t85.set(r124, {});
    const s75 = t85.get(r124), c64 = JSON.stringify(n95);
    return s75[c64] || (s75[c64] = new IntersectionObserver(o60, { root: e130, ...n95 })), s75[c64];
  }(r123);
  return e59.set(n94, s74), c63.observe(n94), () => {
    e59.delete(n94), c63.unobserve(n94);
  };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/viewport/index.js
var r56 = { some: 0, all: 1 };
var o61 = class extends t84 {
  constructor() {
    super(...arguments), this.hasEnteredView = false, this.isInView = false;
  }
  startObserver() {
    this.unmount();
    const { viewport: t150 = {} } = this.node.getProps(), { root: o123, margin: n94, amount: s74 = "some", once: i58 } = t150, a74 = { root: o123 ? o123.current : void 0, rootMargin: n94, threshold: "number" == typeof s74 ? s74 : r56[s74] };
    return r55(this.node.current, a74, (t151) => {
      const { isIntersecting: e130 } = t151;
      if (this.isInView === e130) return;
      if (this.isInView = e130, i58 && !e130 && this.hasEnteredView) return;
      e130 && (this.hasEnteredView = true), this.node.animationState && this.node.animationState.setActive("whileInView", e130);
      const { onViewportEnter: r123, onViewportLeave: o124 } = this.node.getProps(), n95 = e130 ? r123 : o124;
      n95 && n95(t151);
    });
  }
  mount() {
    this.startObserver();
  }
  update() {
    if ("undefined" == typeof IntersectionObserver) return;
    const { props: t150, prevProps: e130 } = this.node;
    ["amount", "margin", "root"].some(function({ viewport: t151 = {} }, { viewport: e131 = {} } = {}) {
      return (r123) => t151[r123] !== e131[r123];
    }(t150, e130)) && this.startObserver();
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/gestures.js
var t86 = { inView: { Feature: o61 }, tap: { Feature: p10 }, focus: { Feature: s36 }, hover: { Feature: s35 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/shallow-compare.js
function r57(r123, t150) {
  if (!Array.isArray(t150)) return false;
  const n94 = t150.length;
  if (n94 !== r123.length) return false;
  for (let e130 = 0; e130 < n94; e130++) if (t150[e130] !== r123[e130]) return false;
  return true;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/resolve-dynamic-variants.js
function o62(o123, r123, n94) {
  const e130 = o123.getProps();
  return t78(e130, r123, void 0 !== n94 ? n94 : e130.custom, function(t150) {
    const o124 = {};
    return t150.values.forEach((t151, r124) => o124[r124] = t151.get()), o124;
  }(o123), function(t150) {
    const o124 = {};
    return t150.values.forEach((t151, r124) => o124[r124] = t151.getVelocity()), o124;
  }(o123));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/optimized-appear/data-id.js
var a26 = "framerAppearId";
var e60 = "data-" + e50(a26);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/errors.js
var e61 = o57;
var r58 = o57;
e61 = (o123, e130) => {
  o123 || "undefined" == typeof console || console.warn(e130);
}, r58 = (o123, e130) => {
  if (!o123) throw new Error(e130);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/time-conversion.js
var e62 = (e130) => 1e3 * e130;
var o63 = (e130) => e130 / 1e3;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-instant-transition-state.js
var r59 = { current: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/is-bezier-definition.js
var r60 = (r123) => Array.isArray(r123) && "number" == typeof r123[0];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/easing.js
function r61(i58) {
  return Boolean(!i58 || "string" == typeof i58 && n36[i58] || r60(i58) || Array.isArray(i58) && i58.every(r61));
}
var i28 = ([e130, r123, i58, n94]) => `cubic-bezier(${e130}, ${r123}, ${i58}, ${n94})`;
var n36 = { linear: "linear", ease: "ease", easeIn: "ease-in", easeOut: "ease-out", easeInOut: "ease-in-out", circIn: i28([0, 0.65, 0.55, 1]), circOut: i28([0.55, 0, 1, 0.45]), backIn: i28([0.31, 0.01, 0.66, -0.59]), backOut: i28([0.33, 1.53, 0.69, 0.99]) };
function a27(r123) {
  if (r123) return r60(r123) ? i28(r123) : Array.isArray(r123) ? r123.map(a27) : n36[r123];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/index.js
function r62(r123, a74, t150, { delay: i58 = 0, duration: n94, repeat: o123 = 0, repeatType: s74 = "loop", ease: l50, times: y7 } = {}) {
  const p35 = { [a74]: t150 };
  y7 && (p35.offset = y7);
  const d44 = a27(l50);
  return Array.isArray(d44) && (p35.easing = d44), r123.animate(p35, { delay: i58, duration: n94, easing: Array.isArray(d44) ? "linear" : d44, fill: "both", iterations: o123 + 1, direction: "reverse" === s74 ? "alternate" : "normal" });
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/utils/get-final-keyframe.js
function e63(e130, { repeat: o123, repeatType: p35 = "loop" }) {
  return e130[o123 && "loop" !== p35 && o123 % 2 == 1 ? 0 : e130.length - 1];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/cubic-bezier.js
var n37 = (t150, n94, o123) => (((1 - 3 * o123 + 3 * n94) * t150 + (3 * o123 - 6 * n94)) * t150 + 3 * n94) * t150;
var o64 = 1e-7;
var r63 = 12;
function e64(e130, i58, u29, s74) {
  if (e130 === i58 && u29 === s74) return o57;
  const c63 = (t150) => function(t151, e131, i59, u30, s75) {
    let c64, f22, l50 = 0;
    do {
      f22 = e131 + (i59 - e131) / 2, c64 = n37(f22, u30, s75) - t151, c64 > 0 ? i59 = f22 : e131 = f22;
    } while (Math.abs(c64) > o64 && ++l50 < r63);
    return f22;
  }(t150, 0, 1, e130, u29);
  return (t150) => 0 === t150 || 1 === t150 ? t150 : n37(c63(t150), i58, s74);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/ease.js
var r64 = e64(0.42, 0, 1, 1);
var c18 = e64(0, 0, 0.58, 1);
var e65 = e64(0.42, 0, 0.58, 1);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/is-easing-array.js
var r65 = (r123) => Array.isArray(r123) && "number" != typeof r123[0];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/modifiers/mirror.js
var o65 = (o123) => (t150) => t150 <= 0.5 ? o123(2 * t150) / 2 : (2 - o123(2 * (1 - t150))) / 2;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/modifiers/reverse.js
var o66 = (o123) => (t150) => 1 - o123(1 - t150);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/circ.js
var i29 = (r123) => 1 - Math.sin(Math.acos(r123));
var s37 = o66(i29);
var m18 = o65(s37);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/back.js
var m19 = e64(0.33, 1.53, 0.69, 0.99);
var e66 = o66(m19);
var s38 = o65(e66);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/anticipate.js
var t87 = (t150) => (t150 *= 2) < 1 ? 0.5 * e66(t150) : 0.5 * (2 - Math.pow(2, -10 * (t150 - 1)));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/easing/utils/map.js
var b4 = { linear: o57, easeIn: r64, easeInOut: e65, easeOut: c18, circIn: i29, circInOut: m18, circOut: s37, backIn: e66, backInOut: s38, backOut: m19, anticipate: t87 };
var j2 = (t150) => {
  if (Array.isArray(t150)) {
    r58(4 === t150.length, "Cubic bezier arrays must contain four numerical values.");
    const [e130, o123, a74, s74] = t150;
    return e64(e130, o123, a74, s74);
  }
  return "string" == typeof t150 ? (r58(void 0 !== b4[t150], `Invalid easing type '${t150}'`), b4[t150]) : t150;
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/utils.js
var r66 = (o123, r123) => (e130) => Boolean(n27(e130) && t70.test(e130) && e130.startsWith(o123) || r123 && Object.prototype.hasOwnProperty.call(e130, r123));
var e67 = (a74, r123, e130) => (s74) => {
  if (!n27(s74)) return s74;
  const [p35, l50, n94, c63] = s74.match(d13);
  return { [a74]: parseFloat(p35), [r123]: parseFloat(l50), [e130]: parseFloat(n94), alpha: void 0 !== c63 ? parseFloat(c63) : 1 };
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/rgba.js
var a28 = { ...r43, transform: (t150) => Math.round(((t151) => t69(0, 255, t151))(t150)) };
var n38 = { test: r66("rgb", "red"), parse: e67("red", "green", "blue"), transform: ({ red: r123, green: t150, blue: m62, alpha: e130 = 1 }) => "rgba(" + a28.transform(r123) + ", " + a28.transform(t150) + ", " + a28.transform(m62) + ", " + s27(o51.transform(e130)) + ")" };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/hex.js
var t88 = { test: r66("#"), parse: function(s74) {
  let r123 = "", t150 = "", n94 = "", e130 = "";
  return s74.length > 5 ? (r123 = s74.substring(1, 3), t150 = s74.substring(3, 5), n94 = s74.substring(5, 7), e130 = s74.substring(7, 9)) : (r123 = s74.substring(1, 2), t150 = s74.substring(2, 3), n94 = s74.substring(3, 4), e130 = s74.substring(4, 5), r123 += r123, t150 += t150, n94 += n94, e130 += e130), { red: parseInt(r123, 16), green: parseInt(t150, 16), blue: parseInt(n94, 16), alpha: e130 ? parseInt(e130, 16) / 255 : 1 };
}, transform: n38.transform };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/hsla.js
var n39 = { test: r66("hsl", "hue"), parse: e67("hue", "saturation", "lightness"), transform: ({ hue: o123, saturation: m62, lightness: n94, alpha: a74 = 1 }) => "hsla(" + Math.round(o123) + ", " + e49.transform(s27(m62)) + ", " + e49.transform(s27(n94)) + ", " + s27(o51.transform(a74)) + ")" };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/color/index.js
var o67 = { test: (r123) => n38.test(r123) || t88.test(r123) || n39.test(r123), parse: (r123) => n38.test(r123) ? n38.parse(r123) : n39.test(r123) ? n39.parse(r123) : t88.parse(r123), transform: (t150) => n27(t150) ? t150 : t150.hasOwnProperty("red") ? n38.transform(t150) : n39.transform(t150) };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix.js
var o68 = (o123, t150, c63) => -c63 * o123 + c63 * t150 + o123;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/hsla-to-rgba.js
function n40(n94, t150, e130) {
  return e130 < 0 && (e130 += 1), e130 > 1 && (e130 -= 1), e130 < 1 / 6 ? n94 + 6 * (t150 - n94) * e130 : e130 < 0.5 ? t150 : e130 < 2 / 3 ? n94 + (t150 - n94) * (2 / 3 - e130) * 6 : n94;
}
function t89({ hue: t150, saturation: e130, lightness: r123, alpha: u29 }) {
  t150 /= 360, r123 /= 100;
  let a74 = 0, o123 = 0, h21 = 0;
  if (e130 /= 100) {
    const u30 = r123 < 0.5 ? r123 * (1 + e130) : r123 + e130 - r123 * e130, l50 = 2 * r123 - u30;
    a74 = n40(l50, u30, t150 + 1 / 3), o123 = n40(l50, u30, t150), h21 = n40(l50, u30, t150 - 1 / 3);
  } else a74 = o123 = h21 = r123;
  return { red: Math.round(255 * a74), green: Math.round(255 * o123), blue: Math.round(255 * h21), alpha: u29 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix-color.js
var n41 = (r123, o123, e130) => {
  const t150 = r123 * r123;
  return Math.sqrt(Math.max(0, e130 * (o123 * o123 - t150) + t150));
};
var l20 = [t88, n38, n39];
function m20(r123) {
  const t150 = (a74 = r123, l20.find((r124) => r124.test(a74)));
  var a74;
  r58(Boolean(t150), `'${r123}' is not an animatable color. Use the equivalent color code instead.`);
  let n94 = t150.parse(r123);
  return t150 === n39 && (n94 = t89(n94)), n94;
}
var p11 = (o123, e130) => {
  const t150 = m20(o123), s74 = m20(e130), l50 = { ...t150 };
  return (o124) => (l50.red = n41(t150.red, s74.red, o124), l50.green = n41(t150.green, s74.green, o124), l50.blue = n41(t150.blue, s74.blue, o124), l50.alpha = o68(t150.alpha, s74.alpha, o124), n38.transform(l50));
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/complex/index.js
var i30 = { regex: a22, countKey: "Vars", token: "${v}", parse: o57 };
var l21 = { regex: r44, countKey: "Colors", token: "${c}", parse: o67.parse };
var c19 = { regex: d13, countKey: "Numbers", token: "${n}", parse: r43.parse };
function m21(e130, { regex: n94, countKey: r123, token: t150, parse: o123 }) {
  const s74 = e130.tokenised.match(n94);
  s74 && (e130["num" + r123] = s74.length, e130.tokenised = e130.tokenised.replace(n94, t150), e130.values.push(...s74.map(o123)));
}
function p12(e130) {
  const n94 = e130.toString(), r123 = { value: n94, tokenised: n94, values: [], numVars: 0, numColors: 0, numNumbers: 0 };
  return r123.value.includes("var(--") && m21(r123, i30), m21(r123, l21), m21(r123, c19), r123;
}
function f7(e130) {
  return p12(e130).values;
}
function d15(e130) {
  const { values: n94, numColors: t150, numVars: o123, tokenised: s74 } = p12(e130), u29 = n94.length;
  return (e131) => {
    let n95 = s74;
    for (let s75 = 0; s75 < u29; s75++) n95 = s75 < o123 ? n95.replace(i30.token, e131[s75]) : s75 < o123 + t150 ? n95.replace(l21.token, o67.transform(e131[s75])) : n95.replace(c19.token, s27(e131[s75]));
    return n95;
  };
}
var v3 = (e130) => "number" == typeof e130 ? 0 : e130;
var k2 = { test: function(e130) {
  var n94, r123;
  return isNaN(e130) && n27(e130) && ((null === (n94 = e130.match(d13)) || void 0 === n94 ? void 0 : n94.length) || 0) + ((null === (r123 = e130.match(r44)) || void 0 === r123 ? void 0 : r123.length) || 0) > 0;
}, parse: f7, createTransformer: d15, getAnimatableNone: function(e130) {
  const n94 = f7(e130);
  return d15(e130)(n94.map(v3));
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/mix-complex.js
var a29 = (r123, o123) => (t150) => `${t150 > 0 ? o123 : r123}`;
function i31(t150, e130) {
  return "number" == typeof t150 ? (o123) => o68(t150, e130, o123) : o67.test(t150) ? p11(t150, e130) : t150.startsWith("var(") ? a29(t150, e130) : c20(t150, e130);
}
var u6 = (r123, o123) => {
  const t150 = [...r123], e130 = t150.length, n94 = r123.map((r124, t151) => i31(r124, o123[t151]));
  return (r124) => {
    for (let o124 = 0; o124 < e130; o124++) t150[o124] = n94[o124](r124);
    return t150;
  };
};
var l22 = (r123, o123) => {
  const t150 = { ...r123, ...o123 }, e130 = {};
  for (const n94 in t150) void 0 !== r123[n94] && void 0 !== o123[n94] && (e130[n94] = i31(r123[n94], o123[n94]));
  return (r124) => {
    for (const o124 in e130) t150[o124] = e130[o124](r124);
    return t150;
  };
};
var c20 = (r123, o123) => {
  const n94 = k2.createTransformer(o123), i58 = p12(r123), l50 = p12(o123);
  return i58.numVars === l50.numVars && i58.numColors === l50.numColors && i58.numNumbers >= l50.numNumbers ? c17(u6(i58.values, l50.values), n94) : (e61(true, `Complex values '${r123}' and '${o123}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`), a29(r123, o123));
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/progress.js
var t90 = (t150, n94, o123) => {
  const r123 = n94 - t150;
  return 0 === r123 ? 1 : (o123 - t150) / r123;
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/interpolate.js
var l23 = (r123, t150) => (o123) => o68(r123, t150, o123);
function u7(r123, o123, e130) {
  const f22 = [], u29 = e130 || ("number" == typeof (a74 = r123[0]) ? l23 : "string" == typeof a74 ? o67.test(a74) ? p11 : c20 : Array.isArray(a74) ? u6 : "object" == typeof a74 ? l22 : l23);
  var a74;
  const j9 = r123.length - 1;
  for (let t150 = 0; t150 < j9; t150++) {
    let e131 = u29(r123[t150], r123[t150 + 1]);
    if (o123) {
      const r124 = Array.isArray(o123) ? o123[t150] || o57 : o123;
      e131 = c17(r124, e131);
    }
    f22.push(e131);
  }
  return f22;
}
function a30(t150, e130, { clamp: s74 = true, ease: m62, mixer: n94 } = {}) {
  const i58 = t150.length;
  if (r58(i58 === e130.length, "Both input and output ranges must be the same length"), 1 === i58) return () => e130[0];
  t150[0] > t150[i58 - 1] && (t150 = [...t150].reverse(), e130 = [...e130].reverse());
  const p35 = u7(e130, m62, n94), c63 = p35.length, l50 = (r123) => {
    let o123 = 0;
    if (c63 > 1) for (; o123 < t150.length - 2 && !(r123 < t150[o123 + 1]); o123++) ;
    const e131 = t90(t150[o123], t150[o123 + 1], r123);
    return p35[o123](e131);
  };
  return s74 ? (r123) => l50(t69(t150[0], t150[i58 - 1], r123)) : l50;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/fill.js
function t91(t150, s74) {
  const m62 = t150[t150.length - 1];
  for (let n94 = 1; n94 <= s74; n94++) {
    const p35 = t90(0, s74, n94);
    t150.push(o68(m62, 1, p35));
  }
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/default.js
function n42(n94) {
  const o123 = [0];
  return t91(o123, n94.length - 1), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/offsets/time.js
function n43(n94, r123) {
  return n94.map((n95) => n95 * r123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/keyframes.js
function o69(t150, s74) {
  return t150.map(() => s74 || e65).splice(0, t150.length - 1);
}
function n44({ duration: e130 = 300, keyframes: n94, times: m62, ease: u29 = "easeInOut" }) {
  const l50 = r65(u29) ? u29.map(j2) : j2(u29), f22 = { done: false, value: n94[0] }, p35 = n43(m62 && m62.length === n94.length ? m62 : n42(n94), e130), g18 = a30(p35, n94, { ease: Array.isArray(l50) ? l50 : o69(n94, l50) });
  return { calculatedDuration: e130, next: (t150) => (f22.value = g18(t150), f22.done = t150 >= e130, f22) };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/velocity-per-second.js
function e68(e130, n94) {
  return n94 ? e130 * (1e3 / n94) : 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/utils/velocity.js
function o70(o123, r123, e130) {
  const n94 = Math.max(r123 - 5, 0);
  return e68(e130 - o123(n94), r123 - n94);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/spring/find.js
var s39 = 1e-3;
function p13({ duration: e130 = 800, bounce: i58 = 0.25, velocity: a74 = 0, mass: u29 = 1 }) {
  let p35, m62;
  e61(e130 <= e62(10), "Spring duration must be 10 seconds or less");
  let h21 = 1 - i58;
  h21 = t69(0.05, 1, h21), e130 = t69(0.01, 10, o63(e130)), h21 < 1 ? (p35 = (t150) => {
    const o123 = t150 * h21, r123 = o123 * e130, n94 = o123 - a74, i59 = f8(t150, h21), u30 = Math.exp(-r123);
    return s39 - n94 / i59 * u30;
  }, m62 = (t150) => {
    const o123 = t150 * h21 * e130, r123 = o123 * a74 + a74, n94 = Math.pow(h21, 2) * Math.pow(t150, 2) * e130, i59 = Math.exp(-o123), u30 = f8(Math.pow(t150, 2), h21);
    return (-p35(t150) + s39 > 0 ? -1 : 1) * ((r123 - n94) * i59) / u30;
  }) : (p35 = (t150) => Math.exp(-t150 * e130) * ((t150 - a74) * e130 + 1) - 1e-3, m62 = (t150) => Math.exp(-t150 * e130) * (e130 * e130 * (a74 - t150)));
  const l50 = function(t150, o123, r123) {
    let n94 = r123;
    for (let r124 = 1; r124 < c21; r124++) n94 -= t150(n94) / o123(n94);
    return n94;
  }(p35, m62, 5 / e130);
  if (e130 = e62(e130), isNaN(l50)) return { stiffness: 100, damping: 10, duration: e130 };
  {
    const t150 = Math.pow(l50, 2) * u29;
    return { stiffness: t150, damping: 2 * h21 * Math.sqrt(u29 * t150), duration: e130 };
  }
}
var c21 = 12;
function f8(t150, o123) {
  return t150 * Math.sqrt(1 - o123 * o123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/spring/index.js
var o71 = ["duration", "bounce"];
var i32 = ["stiffness", "damping", "mass"];
function a31(t150, s74) {
  return s74.some((s75) => void 0 !== t150[s75]);
}
function r67({ keyframes: r123, restDelta: l50, restSpeed: c63, ...u29 }) {
  const m62 = r123[0], f22 = r123[r123.length - 1], h21 = { done: false, value: m62 }, { stiffness: d44, damping: M3, mass: p35, velocity: v8, duration: x13, isResolvedFromDuration: y7 } = function(t150) {
    let s74 = { velocity: 0, stiffness: 100, damping: 10, mass: 1, isResolvedFromDuration: false, ...t150 };
    if (!a31(t150, i32) && a31(t150, o71)) {
      const n94 = p13(t150);
      s74 = { ...s74, ...n94, velocity: 0, mass: 1 }, s74.isResolvedFromDuration = true;
    }
    return s74;
  }(u29), D = v8 ? -o63(v8) : 0, b12 = M3 / (2 * Math.sqrt(d44 * p35)), g18 = f22 - m62, j9 = o63(Math.sqrt(d44 / p35)), q3 = Math.abs(g18) < 5;
  let F2;
  if (c63 || (c63 = q3 ? 0.01 : 2), l50 || (l50 = q3 ? 5e-3 : 0.5), b12 < 1) {
    const t150 = f8(j9, b12);
    F2 = (s74) => {
      const e130 = Math.exp(-b12 * j9 * s74);
      return f22 - e130 * ((D + b12 * j9 * g18) / t150 * Math.sin(t150 * s74) + g18 * Math.cos(t150 * s74));
    };
  } else if (1 === b12) F2 = (t150) => f22 - Math.exp(-j9 * t150) * (g18 + (D + j9 * g18) * t150);
  else {
    const t150 = j9 * Math.sqrt(b12 * b12 - 1);
    F2 = (s74) => {
      const e130 = Math.exp(-b12 * j9 * s74), n94 = Math.min(t150 * s74, 300);
      return f22 - e130 * ((D + b12 * j9 * g18) * Math.sinh(n94) + t150 * g18 * Math.cosh(n94)) / t150;
    };
  }
  return { calculatedDuration: y7 && x13 || null, next: (t150) => {
    const e130 = F2(t150);
    if (y7) h21.done = t150 >= x13;
    else {
      let n94 = D;
      0 !== t150 && (n94 = b12 < 1 ? o70(F2, t150, e130) : 0);
      const o123 = Math.abs(n94) <= c63, i58 = Math.abs(f22 - e130) <= l50;
      h21.done = o123 && i58;
    }
    return h21.value = h21.done ? f22 : e130, h21;
  } };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/inertia.js
function o72({ keyframes: o123, velocity: n94 = 0, power: a74 = 0.8, timeConstant: i58 = 325, bounceDamping: s74 = 10, bounceStiffness: r123 = 500, modifyTarget: l50, min: v8, max: d44, restDelta: u29 = 0.5, restSpeed: c63 }) {
  const m62 = o123[0], f22 = { done: false, value: m62 }, p35 = (e130) => void 0 === v8 ? d44 : void 0 === d44 || Math.abs(v8 - e130) < Math.abs(d44 - e130) ? v8 : d44;
  let x13 = a74 * n94;
  const y7 = m62 + x13, b12 = void 0 === l50 ? y7 : l50(y7);
  b12 !== y7 && (x13 = b12 - m62);
  const g18 = (e130) => -x13 * Math.exp(-e130 / i58), h21 = (e130) => b12 + g18(e130), D = (e130) => {
    const t150 = g18(e130), o124 = h21(e130);
    f22.done = Math.abs(t150) <= u29, f22.value = f22.done ? b12 : o124;
  };
  let M3, S3;
  const j9 = (o124) => {
    var n95;
    (n95 = f22.value, void 0 !== v8 && n95 < v8 || void 0 !== d44 && n95 > d44) && (M3 = o124, S3 = r67({ keyframes: [f22.value, p35(f22.value)], velocity: o70(h21, o124, f22.value), damping: s74, stiffness: r123, restDelta: u29, restSpeed: c63 }));
  };
  return j9(0), { calculatedDuration: null, next: (e130) => {
    let t150 = false;
    return S3 || void 0 !== M3 || (t150 = true, D(e130), j9(e130)), void 0 !== M3 && e130 > M3 ? S3.next(e130 - M3) : (!t150 && D(e130), f22);
  } };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/js/driver-frameloop.js
var e69 = (e130) => {
  const s74 = ({ timestamp: t150 }) => e130(t150);
  return { start: () => o58.update(s74, true), stop: () => r53(s74), now: () => s34.isProcessing ? s34.timestamp : performance.now() };
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/generators/utils/calc-duration.js
var e70 = 2e4;
function t92(t150) {
  let n94 = 0;
  let o123 = t150.next(n94);
  for (; !o123.done && n94 < e70; ) n94 += 50, o123 = t150.next(n94);
  return n94 >= e70 ? 1 / 0 : n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/js/index.js
var u8 = { decay: o72, inertia: o72, tween: n44, keyframes: n44, spring: r67 };
function m22({ autoplay: t150 = true, delay: n94 = 0, driver: m62 = e69, keyframes: c63, type: p35 = "keyframes", repeat: d44 = 0, repeatDelay: f22 = 0, repeatType: y7 = "loop", onPlay: h21, onStop: v8, onComplete: g18, onUpdate: j9, ...k3 }) {
  let D, M3, w12 = 1, x13 = false;
  const P3 = () => {
    M3 = new Promise((e130) => {
      D = e130;
    });
  };
  let b12;
  P3();
  const B2 = u8[p35] || n44;
  let C3;
  B2 !== n44 && "number" != typeof c63[0] && (C3 = a30([0, 100], c63, { clamp: false }), c63 = [0, 100]);
  const S3 = B2({ ...k3, keyframes: c63 });
  let T2;
  "mirror" === y7 && (T2 = B2({ ...k3, keyframes: [...c63].reverse(), velocity: -(k3.velocity || 0) }));
  let U = "idle", q3 = null, z6 = null, A2 = null;
  null === S3.calculatedDuration && d44 && (S3.calculatedDuration = t92(S3));
  const { calculatedDuration: E3 } = S3;
  let F2 = 1 / 0, G3 = 1 / 0;
  null !== E3 && (F2 = E3 + f22, G3 = F2 * (d44 + 1) - f22);
  let H3 = 0;
  const I = (e130) => {
    if (null === z6) return;
    w12 > 0 && (z6 = Math.min(z6, e130)), w12 < 0 && (z6 = Math.min(e130 - G3 / w12, z6)), H3 = null !== q3 ? q3 : Math.round(e130 - z6) * w12;
    const t151 = H3 - n94 * (w12 >= 0 ? 1 : -1), r123 = w12 >= 0 ? t151 < 0 : t151 > G3;
    H3 = Math.max(t151, 0), "finished" === U && null === q3 && (H3 = G3);
    let l50 = H3, i58 = S3;
    if (d44) {
      const e131 = H3 / F2;
      let t152 = Math.floor(e131), n95 = e131 % 1;
      !n95 && e131 >= 1 && (n95 = 1), 1 === n95 && t152--, t152 = Math.min(t152, d44 + 1);
      const r124 = Boolean(t152 % 2);
      r124 && ("reverse" === y7 ? (n95 = 1 - n95, f22 && (n95 -= f22 / F2)) : "mirror" === y7 && (i58 = T2));
      let a75 = t69(0, 1, n95);
      H3 > G3 && (a75 = "reverse" === y7 && r124 ? 1 : 0), l50 = a75 * F2;
    }
    const a74 = r123 ? { done: false, value: c63[0] } : i58.next(l50);
    C3 && (a74.value = C3(a74.value));
    let { done: s74 } = a74;
    r123 || null === E3 || (s74 = w12 >= 0 ? H3 >= G3 : H3 <= 0);
    const u29 = null === q3 && ("finished" === U || "running" === U && s74);
    return j9 && j9(a74.value), u29 && L(), a74;
  }, J2 = () => {
    b12 && b12.stop(), b12 = void 0;
  }, K2 = () => {
    U = "idle", J2(), D(), P3(), z6 = A2 = null;
  }, L = () => {
    U = "finished", g18 && g18(), J2(), D();
  }, N2 = () => {
    if (x13) return;
    b12 || (b12 = m62(I));
    const e130 = b12.now();
    h21 && h21(), null !== q3 ? z6 = e130 - q3 : z6 && "finished" !== U || (z6 = e130), "finished" === U && P3(), A2 = z6, q3 = null, U = "running", b12.start();
  };
  t150 && N2();
  const O6 = { then: (e130, t151) => M3.then(e130, t151), get time() {
    return o63(H3);
  }, set time(e130) {
    e130 = e62(e130), H3 = e130, null === q3 && b12 && 0 !== w12 ? z6 = b12.now() - e130 / w12 : q3 = e130;
  }, get duration() {
    const e130 = null === S3.calculatedDuration ? t92(S3) : S3.calculatedDuration;
    return o63(e130);
  }, get speed() {
    return w12;
  }, set speed(e130) {
    e130 !== w12 && b12 && (w12 = e130, O6.time = o63(H3));
  }, get state() {
    return U;
  }, play: N2, pause: () => {
    U = "paused", q3 = H3;
  }, stop: () => {
    x13 = true, "idle" !== U && (U = "idle", v8 && v8(), K2());
  }, cancel: () => {
    null !== A2 && I(A2), K2();
  }, complete: () => {
    U = "finished";
  }, sample: (e130) => (z6 = 0, I(e130)) };
  return O6;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/memo.js
function t93(t150) {
  let e130;
  return () => (void 0 === e130 && (e130 = t150()), e130);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/waapi/create-accelerated-animation.js
var p14 = t93(() => Object.hasOwnProperty.call(Element.prototype, "animate"));
var u9 = /* @__PURE__ */ new Set(["opacity", "clipPath", "filter", "transform", "backgroundColor"]);
function c22(a74, c63, { onUpdate: f22, onComplete: d44, ...y7 }) {
  if (!(p14() && u9.has(c63) && !y7.repeatDelay && "mirror" !== y7.repeatType && 0 !== y7.damping && "inertia" !== y7.type)) return false;
  let h21, j9, g18 = false;
  const k3 = () => {
    j9 = new Promise((e130) => {
      h21 = e130;
    });
  };
  k3();
  let { keyframes: v8, duration: b12 = 300, ease: T2, times: w12 } = y7;
  if (((e130, r123) => "spring" === r123.type || "backgroundColor" === e130 || !r61(r123.ease))(c63, y7)) {
    const e130 = m22({ ...y7, repeat: 0, delay: 0 });
    let t150 = { done: false, value: v8[0] };
    const r123 = [];
    let i58 = 0;
    for (; !t150.done && i58 < 2e4; ) t150 = e130.sample(i58), r123.push(t150.value), i58 += 10;
    w12 = void 0, v8 = r123, b12 = i58 - 10, T2 = "linear";
  }
  const x13 = r62(a74.owner.current, c63, v8, { ...y7, duration: b12, ease: T2, times: w12 }), C3 = () => x13.cancel(), P3 = () => {
    o58.update(C3), h21(), k3();
  };
  x13.onfinish = () => {
    a74.set(e63(v8, y7)), d44 && d44(), P3();
  };
  return { then: (e130, t150) => j9.then(e130, t150), attachTimeline: (e130) => (x13.timeline = e130, x13.onfinish = null, o57), get time() {
    return o63(x13.currentTime || 0);
  }, set time(e130) {
    x13.currentTime = e62(e130);
  }, get speed() {
    return x13.playbackRate;
  }, set speed(e130) {
    x13.playbackRate = e130;
  }, get duration() {
    return o63(b12);
  }, play: () => {
    g18 || (x13.play(), r53(C3));
  }, pause: () => x13.pause(), stop: () => {
    if (g18 = true, "idle" === x13.playState) return;
    const { currentTime: e130 } = x13;
    if (e130) {
      const t150 = m22({ ...y7, autoplay: false });
      a74.setWithVelocity(t150.sample(e130 - 10).value, t150.sample(e130).value, 10);
    }
    P3();
  }, complete: () => x13.finish(), cancel: P3 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/animators/instant.js
function t94({ keyframes: t150, delay: n94, onUpdate: r123, onComplete: p35 }) {
  const s74 = () => (r123 && r123(t150[t150.length - 1]), p35 && p35(), { time: 0, speed: 1, duration: 0, play: o57, pause: o57, stop: o57, then: (e130) => (e130(), Promise.resolve()), cancel: o57, complete: o57 });
  return n94 ? m22({ keyframes: [0, 1], duration: 0, delay: n94, onComplete: s74 }) : s74();
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/default-transitions.js
var s40 = { type: "spring", stiffness: 500, damping: 25, restSpeed: 10 };
var t95 = { type: "keyframes", duration: 0.8 };
var r68 = { type: "keyframes", ease: [0.25, 0.1, 0.35, 1], duration: 0.3 };
var a32 = (a74, { keyframes: n94 }) => n94.length > 2 ? t95 : t67.has(a74) ? a74.startsWith("scale") ? { type: "spring", stiffness: 550, damping: 0 === n94[1] ? 2 * Math.sqrt(550) : 30, restSpeed: 10 } : s40 : r68;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-animatable.js
var r69 = (r123, e130) => "zIndex" !== r123 && (!("number" != typeof e130 && !Array.isArray(e130)) || !("string" != typeof e130 || !k2.test(e130) && "0" !== e130 || e130.startsWith("url(")));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/types/complex/filter.js
var o73 = /* @__PURE__ */ new Set(["brightness", "contrast", "saturate", "opacity"]);
function r70(t150) {
  const [r123, e130] = t150.slice(0, -1).split("(");
  if ("drop-shadow" === r123) return t150;
  const [s74] = e130.match(d13) || [];
  if (!s74) return t150;
  const a74 = e130.replace(s74, "");
  let c63 = o73.has(r123) ? 1 : 0;
  return s74 !== e130 && (c63 *= 100), r123 + "(" + c63 + a74 + ")";
}
var e71 = /([a-z-]*)\(.*?\)/g;
var s41 = { ...k2, getAnimatableNone: (t150) => {
  const n94 = t150.match(e71);
  return n94 ? n94.map(r70).join(" ") : t150;
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/defaults.js
var l24 = { ...d14, color: o67, backgroundColor: o67, outlineColor: o67, fill: o67, stroke: o67, borderColor: o67, borderTopColor: o67, borderRightColor: o67, borderBottomColor: o67, borderLeftColor: o67, filter: s41, WebkitFilter: s41 };
var t96 = (o123) => l24[o123];

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/animatable-none.js
function m23(m62, r123) {
  let i58 = t96(m62);
  return i58 !== s41 && (i58 = k2), i58.getAnimatableNone ? i58.getAnimatableNone(r123) : void 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-zero-value-string.js
var t97 = (t150) => /^0[^.\s]+$/.test(t150);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/is-none.js
function o74(o123) {
  return "number" == typeof o123 ? 0 === o123 : null !== o123 ? "none" === o123 || "0" === o123 || t97(o123) : void 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/keyframes.js
function e72(e130, r123, l50, i58) {
  const s74 = r69(r123, l50);
  let m62;
  m62 = Array.isArray(l50) ? [...l50] : [null, l50];
  const f22 = void 0 !== i58.from ? i58.from : e130.get();
  let a74;
  const p35 = [];
  for (let t150 = 0; t150 < m62.length; t150++) null === m62[t150] && (m62[t150] = 0 === t150 ? f22 : m62[t150 - 1]), o74(m62[t150]) && p35.push(t150), "string" == typeof m62[t150] && "none" !== m62[t150] && "0" !== m62[t150] && (a74 = m62[t150]);
  if (s74 && p35.length && a74) for (let n94 = 0; n94 < p35.length; n94++) {
    m62[p35[n94]] = m23(r123, a74);
  }
  return m62;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/utils/transitions.js
function e73({ when: e130, delay: r123, delayChildren: t150, staggerChildren: n94, staggerDirection: a74, repeat: l50, repeatType: d44, repeatDelay: i58, from: p35, elapsed: g18, ...o123 }) {
  return !!Object.keys(o123).length;
}
function r71(e130, r123) {
  return e130[r123] || e130.default || e130;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/motion-value.js
var u10 = (u29, f22, d44, y7 = {}) => (c63) => {
  const j9 = r71(y7, u29) || {}, $2 = j9.delay || y7.delay || 0;
  let { elapsed: v8 = 0 } = y7;
  v8 -= e62($2);
  const b12 = e72(f22, u29, d44, j9), g18 = b12[0], w12 = b12[b12.length - 1], U = r69(u29, g18), h21 = r69(u29, w12);
  e61(U === h21, `You are trying to animate ${u29} from "${g18}" to "${w12}". ${g18} is not an animatable value - to enable this animation set ${g18} to a value animatable to ${w12} via the \`style\` property.`);
  let C3 = { keyframes: b12, velocity: f22.getVelocity(), ease: "easeOut", ...j9, delay: -v8, onUpdate: (t150) => {
    f22.set(t150), j9.onUpdate && j9.onUpdate(t150);
  }, onComplete: () => {
    c63(), j9.onComplete && j9.onComplete();
  } };
  if (e73(j9) || (C3 = { ...C3, ...a32(u29, C3) }), C3.duration && (C3.duration = e62(C3.duration)), C3.repeatDelay && (C3.repeatDelay = e62(C3.repeatDelay)), !U || !h21 || r59.current || false === j9.type) return t94(C3);
  if (f22.owner && f22.owner.current instanceof HTMLElement && !f22.owner.getProps().onUpdate) {
    const t150 = c22(f22, u29, C3);
    if (t150) return t150;
  }
  return m22(C3);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/use-will-change/is.js
function t98(t150) {
  return Boolean(o49(t150) && t150.add);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/is-numerical-string.js
var t99 = (t150) => /^\-?\d*\.?\d+$/.test(t150);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/array.js
function n45(n94, i58) {
  -1 === n94.indexOf(i58) && n94.push(i58);
}
function i33(n94, i58) {
  const c63 = n94.indexOf(i58);
  c63 > -1 && n94.splice(c63, 1);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/subscription-manager.js
var i34 = class {
  constructor() {
    this.subscriptions = [];
  }
  add(i58) {
    return n45(this.subscriptions, i58), () => i33(this.subscriptions, i58);
  }
  notify(s74, t150, i58) {
    const r123 = this.subscriptions.length;
    if (r123) if (1 === r123) this.subscriptions[0](s74, t150, i58);
    else for (let n94 = 0; n94 < r123; n94++) {
      const r124 = this.subscriptions[n94];
      r124 && r124(s74, t150, i58);
    }
  }
  getSize() {
    return this.subscriptions.length;
  }
  clear() {
    this.subscriptions.length = 0;
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/warn-once.js
var n46 = /* @__PURE__ */ new Set();
function o75(o123, e130, a74) {
  o123 || n46.has(e130) || (console.warn(e130), a74 && console.warn(a74), n46.add(e130));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/value/index.js
var a33 = class {
  constructor(t150, e130 = {}) {
    var s74;
    this.version = "10.16.1", this.timeDelta = 0, this.lastUpdated = 0, this.canTrackVelocity = false, this.events = {}, this.updateAndNotify = (t151, e131 = true) => {
      this.prev = this.current, this.current = t151;
      const { delta: s75, timestamp: a74 } = s34;
      this.lastUpdated !== a74 && (this.timeDelta = s75, this.lastUpdated = a74, o58.postRender(this.scheduleVelocityCheck)), this.prev !== this.current && this.events.change && this.events.change.notify(this.current), this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()), e131 && this.events.renderRequest && this.events.renderRequest.notify(this.current);
    }, this.scheduleVelocityCheck = () => o58.postRender(this.velocityCheck), this.velocityCheck = ({ timestamp: t151 }) => {
      t151 !== this.lastUpdated && (this.prev = this.current, this.events.velocityChange && this.events.velocityChange.notify(this.getVelocity()));
    }, this.hasAnimated = false, this.prev = this.current = t150, this.canTrackVelocity = (s74 = this.current, !isNaN(parseFloat(s74))), this.owner = e130.owner;
  }
  onChange(t150) {
    return o75(false, 'value.onChange(callback) is deprecated. Switch to value.on("change", callback).'), this.on("change", t150);
  }
  on(e130, s74) {
    this.events[e130] || (this.events[e130] = new i34());
    const n94 = this.events[e130].add(s74);
    return "change" === e130 ? () => {
      n94(), o58.read(() => {
        this.events.change.getSize() || this.stop();
      });
    } : n94;
  }
  clearListeners() {
    for (const t150 in this.events) this.events[t150].clear();
  }
  attach(t150, e130) {
    this.passiveEffect = t150, this.stopPassiveEffect = e130;
  }
  set(t150, e130 = true) {
    e130 && this.passiveEffect ? this.passiveEffect(t150, this.updateAndNotify) : this.updateAndNotify(t150, e130);
  }
  setWithVelocity(t150, e130, s74) {
    this.set(e130), this.prev = t150, this.timeDelta = s74;
  }
  jump(t150) {
    this.updateAndNotify(t150), this.prev = t150, this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
  get() {
    return this.current;
  }
  getPrevious() {
    return this.prev;
  }
  getVelocity() {
    return this.canTrackVelocity ? e68(parseFloat(this.current) - parseFloat(this.prev), this.timeDelta) : 0;
  }
  start(t150) {
    return this.stop(), new Promise((e130) => {
      this.hasAnimated = true, this.animation = t150(e130), this.events.animationStart && this.events.animationStart.notify();
    }).then(() => {
      this.events.animationComplete && this.events.animationComplete.notify(), this.clearAnimation();
    });
  }
  stop() {
    this.animation && (this.animation.stop(), this.events.animationCancel && this.events.animationCancel.notify()), this.clearAnimation();
  }
  isAnimating() {
    return !!this.animation;
  }
  clearAnimation() {
    delete this.animation;
  }
  destroy() {
    this.clearListeners(), this.stop(), this.stopPassiveEffect && this.stopPassiveEffect();
  }
};
function h8(t150, e130) {
  return new a33(t150, e130);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/test.js
var t100 = (t150) => (e130) => e130.test(t150);

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/type-auto.js
var t101 = { test: (t150) => "auto" === t150, parse: (t150) => t150 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/dimensions.js
var n47 = [r43, a23, e49, t71, p8, o52, t101];
var u11 = (t150) => n47.find(t100(t150));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/value-types/find.js
var s42 = [...n47, o67, k2];
var t102 = (o123) => s42.find(t100(o123));

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/setters.js
function a34(t150, e130, o123) {
  t150.hasValue(e130) ? t150.getValue(e130).set(o123) : t150.addValue(e130, h8(o123));
}
function u12(t150, e130) {
  const n94 = o62(t150, e130);
  let { transitionEnd: r123 = {}, transition: i58 = {}, ...l50 } = n94 ? t150.makeTargetAnimatable(n94, false) : {};
  l50 = { ...l50, ...r123 };
  for (const e131 in l50) {
    a34(t150, e131, e52(l50[e131]));
  }
}
function m24(o123, s74, a74) {
  var u29, m62;
  const f22 = Object.keys(s74).filter((t150) => !o123.hasValue(t150)), c63 = f22.length;
  if (c63) for (let d44 = 0; d44 < c63; d44++) {
    const c64 = f22[d44], p35 = s74[c64];
    let v8 = null;
    Array.isArray(p35) && (v8 = p35[0]), null === v8 && (v8 = null !== (m62 = null !== (u29 = a74[c64]) && void 0 !== u29 ? u29 : o123.readValue(c64)) && void 0 !== m62 ? m62 : s74[c64]), null != v8 && ("string" == typeof v8 && (t99(v8) || t97(v8)) ? v8 = parseFloat(v8) : !t102(v8) && k2.test(p35) && (v8 = m23(c64, p35)), o123.addValue(c64, h8(v8, { owner: o123 })), void 0 === a74[c64] && (a74[c64] = v8), null !== v8 && o123.setBaseTarget(c64, v8));
  }
}
function f9(t150, e130) {
  if (!e130) return;
  return (e130[t150] || e130.default || e130).from;
}
function c23(t150, e130, o123) {
  const n94 = {};
  for (const r123 in t150) {
    const t151 = f9(r123, e130);
    if (void 0 !== t151) n94[r123] = t151;
    else {
      const t152 = o123.getValue(r123);
      t152 && (n94[r123] = t152.get());
    }
  }
  return n94;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-target.js
function r72({ protectedKeys: t150, needsAnimating: e130 }, n94) {
  const o123 = t150.hasOwnProperty(n94) && true !== e130[n94];
  return e130[n94] = false, o123;
}
function s43(s74, m62, { delay: d44 = 0, transitionOverride: p35, type: l50 } = {}) {
  let { transition: f22 = s74.getDefaultTransition(), transitionEnd: u29, ...c63 } = s74.makeTargetAnimatable(m62);
  const h21 = s74.getValue("willChange");
  p35 && (f22 = p35);
  const g18 = [], w12 = l50 && s74.animationState && s74.animationState.getState()[l50];
  for (const a74 in c63) {
    const m63 = s74.getValue(a74), p36 = c63[a74];
    if (!m63 || void 0 === p36 || w12 && r72(w12, a74)) continue;
    const l51 = { delay: d44, elapsed: 0, ...f22 };
    if (window.HandoffAppearAnimations && !m63.hasAnimated) {
      const t150 = s74.getProps()[e60];
      t150 && (l51.elapsed = window.HandoffAppearAnimations(t150, a74, m63, o58));
    }
    m63.start(u10(a74, m63, p36, s74.shouldReduceMotion && t67.has(a74) ? { type: false } : l51));
    const u30 = m63.animation;
    t98(h21) && (h21.add(a74), u30.then(() => h21.remove(a74))), g18.push(u30);
  }
  return u29 && Promise.all(g18).then(() => {
    u29 && u12(s74, u29);
  }), g18;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element-variant.js
function t103(i58, o123, a74 = {}) {
  const s74 = o62(i58, o123, a74.custom);
  let { transition: l50 = i58.getDefaultTransition() || {} } = s74 || {};
  a74.transitionOverride && (l50 = a74.transitionOverride);
  const m62 = s74 ? () => Promise.all(s43(i58, s74, a74)) : () => Promise.resolve(), d44 = i58.variantChildren && i58.variantChildren.size ? (r123 = 0) => {
    const { delayChildren: e130 = 0, staggerChildren: s75, staggerDirection: m63 } = l50;
    return function(r124, e131, i59 = 0, o124 = 0, a75 = 1, s76) {
      const l51 = [], m64 = (r124.variantChildren.size - 1) * o124, d45 = 1 === a75 ? (r125 = 0) => r125 * o124 : (r125 = 0) => m64 - r125 * o124;
      return Array.from(r124.variantChildren).sort(n48).forEach((r125, n94) => {
        r125.notify("AnimationStart", e131), l51.push(t103(r125, e131, { ...s76, delay: i59 + d45(n94) }).then(() => r125.notify("AnimationComplete", e131)));
      }), Promise.all(l51);
    }(i58, o123, e130 + r123, s75, m63, a74);
  } : () => Promise.resolve(), { when: u29 } = l50;
  if (u29) {
    const [r123, e130] = "beforeChildren" === u29 ? [m62, d44] : [d44, m62];
    return r123().then(() => e130());
  }
  return Promise.all([m62(), d44(a74.delay)]);
}
function n48(r123, e130) {
  return r123.sortNodePosition(e130);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/visual-element.js
function r73(r123, o123, n94 = {}) {
  let s74;
  if (r123.notify("AnimationStart", o123), Array.isArray(o123)) {
    const t150 = o123.map((t151) => t103(r123, t151, n94));
    s74 = Promise.all(t150);
  } else if ("string" == typeof o123) s74 = t103(r123, o123, n94);
  else {
    const i58 = "function" == typeof o123 ? o62(r123, o123, n94.custom) : o123;
    s74 = Promise.all(s43(r123, i58, n94));
  }
  return s74.then(() => r123.notify("AnimationComplete", o123));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/animation-state.js
var a35 = [...i18].reverse();
var l25 = i18.length;
function c24(r123) {
  let c63 = /* @__PURE__ */ function(t150) {
    return (e130) => Promise.all(e130.map(({ animation: e131, options: n94 }) => r73(t150, e131, n94)));
  }(r123);
  const u29 = { animate: p15(true), whileInView: p15(), whileHover: p15(), whileTap: p15(), whileDrag: p15(), whileFocus: p15(), exit: p15() };
  let v8 = true;
  const f22 = (t150, e130) => {
    const n94 = o62(r123, e130);
    if (n94) {
      const { transition: e131, transitionEnd: i58, ...o123 } = n94;
      t150 = { ...t150, ...o123, ...i58 };
    }
    return t150;
  };
  function d44(o123, s74) {
    const p35 = r123.getProps(), d45 = r123.getVariantContext(true) || {}, A2 = [], y7 = /* @__PURE__ */ new Set();
    let h21 = {}, g18 = 1 / 0;
    for (let c64 = 0; c64 < l25; c64++) {
      const l50 = a35[c64], w13 = u29[l50], P3 = void 0 !== p35[l50] ? p35[l50] : d45[l50], j9 = r35(P3), K2 = l50 === s74 ? w13.isActive : null;
      false === K2 && (g18 = c64);
      let V = P3 === d45[l50] && P3 !== p35[l50] && j9;
      if (V && v8 && r123.manuallyAnimateOnMount && (V = false), w13.protectedKeys = { ...h21 }, !w13.isActive && null === K2 || !P3 && !w13.prevProp || t61(P3) || "boolean" == typeof P3) continue;
      const b12 = m25(w13.prevProp, P3);
      let x13 = b12 || l50 === s74 && w13.isActive && !V && j9 || c64 > g18 && j9;
      const C3 = Array.isArray(P3) ? P3 : [P3];
      let E3 = C3.reduce(f22, {});
      false === K2 && (E3 = {});
      const { prevResolvedValues: O6 = {} } = w13, R2 = { ...O6, ...E3 }, S3 = (t150) => {
        x13 = true, y7.delete(t150), w13.needsAnimating[t150] = true;
      };
      for (const t150 in R2) {
        const i58 = E3[t150], o124 = O6[t150];
        h21.hasOwnProperty(t150) || (i58 !== o124 ? r51(i58) && r51(o124) ? !r57(i58, o124) || b12 ? S3(t150) : w13.protectedKeys[t150] = true : void 0 !== i58 ? S3(t150) : y7.add(t150) : void 0 !== i58 && y7.has(t150) ? S3(t150) : w13.protectedKeys[t150] = true);
      }
      w13.prevProp = P3, w13.prevResolvedValues = E3, w13.isActive && (h21 = { ...h21, ...E3 }), v8 && r123.blockInitialAnimation && (x13 = false), x13 && !V && A2.push(...C3.map((t150) => ({ animation: t150, options: { type: l50, ...o123 } })));
    }
    if (y7.size) {
      const t150 = {};
      y7.forEach((e130) => {
        const n94 = r123.getBaseTarget(e130);
        void 0 !== n94 && (t150[e130] = n94);
      }), A2.push({ animation: t150 });
    }
    let w12 = Boolean(A2.length);
    return v8 && false === p35.initial && !r123.manuallyAnimateOnMount && (w12 = false), v8 = false, w12 ? c63(A2) : Promise.resolve();
  }
  return { animateChanges: d44, setActive: function(t150, e130, n94) {
    var i58;
    if (u29[t150].isActive === e130) return Promise.resolve();
    null === (i58 = r123.variantChildren) || void 0 === i58 || i58.forEach((n95) => {
      var i59;
      return null === (i59 = n95.animationState) || void 0 === i59 ? void 0 : i59.setActive(t150, e130);
    }), u29[t150].isActive = e130;
    const o123 = d44(n94, t150);
    for (const t151 in u29) u29[t151].protectedKeys = {};
    return o123;
  }, setAnimateFunction: function(t150) {
    c63 = t150(r123);
  }, getState: () => u29 };
}
function m25(t150, e130) {
  return "string" == typeof e130 ? e130 !== t150 : !!Array.isArray(e130) && !r57(e130, t150);
}
function p15(t150 = false) {
  return { isActive: t150, protectedKeys: {}, needsAnimating: {}, prevResolvedValues: {} };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animation/index.js
var i35 = class extends t84 {
  constructor(t150) {
    super(t150), t150.animationState || (t150.animationState = c24(t150));
  }
  updateAnimationControlsSubscription() {
    const { animate: n94 } = this.node.getProps();
    this.unmount(), t61(n94) && (this.unmount = n94.subscribe(this.node));
  }
  mount() {
    this.updateAnimationControlsSubscription();
  }
  update() {
    const { animate: t150 } = this.node.getProps(), { animate: n94 } = this.node.prevProps || {};
    t150 !== n94 && this.updateAnimationControlsSubscription();
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animation/exit.js
var e74 = 0;
var n49 = class extends t84 {
  constructor() {
    super(...arguments), this.id = e74++;
  }
  update() {
    if (!this.node.presenceContext) return;
    const { isPresent: t150, onExitComplete: e130, custom: n94 } = this.node.presenceContext, { isPresent: s74 } = this.node.prevPresenceContext || {};
    if (!this.node.animationState || t150 === s74) return;
    const o123 = this.node.animationState.setActive("exit", !t150, { custom: null != n94 ? n94 : this.node.getProps().custom });
    e130 && !t150 && o123.then(() => e130(this.id));
  }
  mount() {
    const { register: t150 } = this.node.presenceContext || {};
    t150 && (this.unmount = t150(this.id));
  }
  unmount() {
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/animations.js
var o76 = { animation: { Feature: i35 }, exit: { Feature: n49 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/distance.js
var t104 = (t150, n94) => Math.abs(t150 - n94);
function n50(n94, o123) {
  const r123 = t104(n94.x, o123.x), s74 = t104(n94.y, o123.y);
  return Math.sqrt(r123 ** 2 + s74 ** 2);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/pan/PanSession.js
var v4 = class {
  constructor(n94, e130, { transformPagePoint: h21 } = {}) {
    if (this.startEvent = null, this.lastMoveEvent = null, this.lastMoveEventInfo = null, this.handlers = {}, this.updatePoint = () => {
      if (!this.lastMoveEvent || !this.lastMoveEventInfo) return;
      const t150 = f10(this.lastMoveEventInfo, this.history), n95 = null !== this.startEvent, e131 = n50(t150.offset, { x: 0, y: 0 }) >= 3;
      if (!n95 && !e131) return;
      const { point: s74 } = t150, { timestamp: i58 } = s34;
      this.history.push({ ...s74, timestamp: i58 });
      const { onStart: r123, onMove: a74 } = this.handlers;
      n95 || (r123 && r123(this.lastMoveEvent, t150), this.startEvent = this.lastMoveEvent), a74 && a74(this.lastMoveEvent, t150);
    }, this.handlePointerMove = (t150, n95) => {
      this.lastMoveEvent = t150, this.lastMoveEventInfo = m26(n95, this.transformPagePoint), o58.update(this.updatePoint, true);
    }, this.handlePointerUp = (t150, n95) => {
      if (this.end(), !this.lastMoveEvent || !this.lastMoveEventInfo) return;
      const { onEnd: e131, onSessionEnd: s74 } = this.handlers, i58 = f10("pointercancel" === t150.type ? this.lastMoveEventInfo : m26(n95, this.transformPagePoint), this.history);
      this.startEvent && e131 && e131(t150, i58), s74 && s74(t150, i58);
    }, !t80(n94)) return;
    this.handlers = e130, this.transformPagePoint = h21;
    const v8 = m26(t81(n94), this.transformPagePoint), { point: p35 } = v8, { timestamp: u29 } = s34;
    this.history = [{ ...p35, timestamp: u29 }];
    const { onSessionStart: d44 } = e130;
    d44 && d44(n94, f10(v8, this.history)), this.removeListeners = c17(t82(window, "pointermove", this.handlePointerMove), t82(window, "pointerup", this.handlePointerUp), t82(window, "pointercancel", this.handlePointerUp));
  }
  updateHandlers(t150) {
    this.handlers = t150;
  }
  end() {
    this.removeListeners && this.removeListeners(), r53(this.updatePoint);
  }
};
function m26(t150, n94) {
  return n94 ? { point: n94(t150.point) } : t150;
}
function p16(t150, n94) {
  return { x: t150.x - n94.x, y: t150.y - n94.y };
}
function f10({ point: t150 }, n94) {
  return { point: t150, delta: p16(t150, d16(n94)), offset: p16(t150, u13(n94)), velocity: c25(n94, 0.1) };
}
function u13(t150) {
  return t150[0];
}
function d16(t150) {
  return t150[t150.length - 1];
}
function c25(t150, s74) {
  if (t150.length < 2) return { x: 0, y: 0 };
  let i58 = t150.length - 1, o123 = null;
  const r123 = d16(t150);
  for (; i58 >= 0 && (o123 = t150[i58], !(r123.timestamp - o123.timestamp > e62(s74))); ) i58--;
  if (!o123) return { x: 0, y: 0 };
  const a74 = o63(r123.timestamp - o123.timestamp);
  if (0 === a74) return { x: 0, y: 0 };
  const h21 = { x: (r123.x - o123.x) / a74, y: (r123.y - o123.y) / a74 };
  return h21.x === 1 / 0 && (h21.x = 0), h21.y === 1 / 0 && (h21.y = 0), h21;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-calc.js
function n51(i58) {
  return i58.max - i58.min;
}
function t105(i58, n94 = 0, t150 = 0.01) {
  return Math.abs(i58 - n94) <= t150;
}
function o77(o123, a74, m62, r123 = 0.5) {
  o123.origin = r123, o123.originPoint = o68(a74.min, a74.max, o123.origin), o123.scale = n51(m62) / n51(a74), (t105(o123.scale, 1, 1e-4) || isNaN(o123.scale)) && (o123.scale = 1), o123.translate = o68(m62.min, m62.max, o123.origin) - o123.originPoint, (t105(o123.translate) || isNaN(o123.translate)) && (o123.translate = 0);
}
function a36(i58, n94, t150, a74) {
  o77(i58.x, n94.x, t150.x, a74 ? a74.originX : void 0), o77(i58.y, n94.y, t150.y, a74 ? a74.originY : void 0);
}
function m27(i58, t150, o123) {
  i58.min = o123.min + t150.min, i58.max = i58.min + n51(t150);
}
function r74(i58, n94, t150) {
  m27(i58.x, n94.x, t150.x), m27(i58.y, n94.y, t150.y);
}
function x3(i58, t150, o123) {
  i58.min = t150.min - o123.min, i58.max = i58.min + n51(t150);
}
function s44(i58, n94, t150) {
  x3(i58.x, n94.x, t150.x), x3(i58.y, n94.y, t150.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/utils/constraints.js
function o78(n94, { min: m62, max: i58 }, o123) {
  return void 0 !== m62 && n94 < m62 ? n94 = o123 ? o68(m62, n94, o123.min) : Math.max(n94, m62) : void 0 !== i58 && n94 > i58 && (n94 = o123 ? o68(i58, n94, o123.max) : Math.min(n94, i58)), n94;
}
function r75(n94, m62, i58) {
  return { min: void 0 !== m62 ? n94.min + m62 : void 0, max: void 0 !== i58 ? n94.max + i58 - (n94.max - n94.min) : void 0 };
}
function x4(n94, { top: m62, left: i58, bottom: t150, right: o123 }) {
  return { x: r75(n94.x, i58, o123), y: r75(n94.y, m62, t150) };
}
function u14(n94, m62) {
  let i58 = m62.min - n94.min, t150 = m62.max - n94.max;
  return m62.max - m62.min < n94.max - n94.min && ([i58, t150] = [t150, i58]), { min: i58, max: t150 };
}
function a37(n94, m62) {
  return { x: u14(n94.x, m62.x), y: u14(n94.y, m62.y) };
}
function e75(t150, o123) {
  let r123 = 0.5;
  const x13 = n51(t150), u29 = n51(o123);
  return u29 > x13 ? r123 = t90(o123.min, o123.max - x13, t150.min) : x13 > u29 && (r123 = t90(t150.min, t150.max - u29, o123.min)), t69(0, 1, r123);
}
function c26(n94, m62) {
  const i58 = {};
  return void 0 !== m62.min && (i58.min = m62.min - n94.min), void 0 !== m62.max && (i58.max = m62.max - n94.min), i58;
}
var f11 = 0.35;
function s45(n94 = 0.35) {
  return false === n94 ? n94 = 0 : true === n94 && (n94 = f11), { x: p17(n94, "left", "right"), y: p17(n94, "top", "bottom") };
}
function p17(n94, m62, i58) {
  return { min: l26(n94, m62), max: l26(n94, i58) };
}
function l26(n94, m62) {
  return "number" == typeof n94 ? n94 : n94[m62] || 0;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/models.js
var n52 = () => ({ x: { translate: 0, scale: 1, origin: 0, originPoint: 0 }, y: { translate: 0, scale: 1, origin: 0, originPoint: 0 } });
var o79 = () => ({ x: { min: 0, max: 0 }, y: { min: 0, max: 0 } });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/each-axis.js
function n53(n94) {
  return [n94("x"), n94("y")];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/conversion.js
function t106({ top: t150, left: o123, right: n94, bottom: r123 }) {
  return { x: { min: o123, max: n94 }, y: { min: t150, max: r123 } };
}
function o80({ x: t150, y: o123 }) {
  return { top: o123.min, right: t150.max, bottom: o123.max, left: t150.min };
}
function n54(t150, o123) {
  if (!o123) return t150;
  const n94 = o123({ x: t150.left, y: t150.top }), r123 = o123({ x: t150.right, y: t150.bottom });
  return { top: n94.y, left: n94.x, bottom: r123.y, right: r123.x };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/has-transform.js
function t107(t150) {
  return void 0 === t150 || 1 === t150;
}
function n55({ scale: n94, scaleX: r123, scaleY: e130 }) {
  return !t107(n94) || !t107(r123) || !t107(e130);
}
function r76(t150) {
  return n55(t150) || e76(t150) || t150.z || t150.rotate || t150.rotateX || t150.rotateY;
}
function e76(t150) {
  return o81(t150.x) || o81(t150.y);
}
function o81(t150) {
  return t150 && "0%" !== t150;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-apply.js
function o82(t150, n94, o123) {
  return o123 + n94 * (t150 - o123);
}
function i36(t150, n94, i58, s74, e130) {
  return void 0 !== e130 && (t150 = o82(t150, e130, s74)), o82(t150, i58, s74) + n94;
}
function s46(t150, n94 = 0, o123 = 1, s74, e130) {
  t150.min = i36(t150.min, n94, o123, s74, e130), t150.max = i36(t150.max, n94, o123, s74, e130);
}
function e77(t150, { x: n94, y: o123 }) {
  s46(t150.x, n94.translate, n94.scale, n94.originPoint), s46(t150.y, o123.translate, o123.scale, o123.originPoint);
}
function l27(t150, o123, i58, s74 = false) {
  const l50 = i58.length;
  if (!l50) return;
  let c63, a74;
  o123.x = o123.y = 1;
  for (let r123 = 0; r123 < l50; r123++) {
    c63 = i58[r123], a74 = c63.projectionDelta;
    const l51 = c63.instance;
    l51 && l51.style && "contents" === l51.style.display || (s74 && c63.options.layoutScroll && c63.scroll && c63 !== c63.root && x5(t150, { x: -c63.scroll.offset.x, y: -c63.scroll.offset.y }), a74 && (o123.x *= a74.x.scale, o123.y *= a74.y.scale, e77(t150, a74)), s74 && r76(c63.latestValues) && x5(t150, c63.latestValues));
  }
  o123.x = r77(o123.x), o123.y = r77(o123.y);
}
function r77(t150) {
  return Number.isInteger(t150) || t150 > 1.0000000000001 || t150 < 0.999999999999 ? t150 : 1;
}
function c27(t150, n94) {
  t150.min = t150.min + n94, t150.max = t150.max + n94;
}
function a38(n94, o123, [i58, e130, l50]) {
  const r123 = void 0 !== o123[l50] ? o123[l50] : 0.5, c63 = o68(n94.min, n94.max, r123);
  s46(n94, o123[i58], o123[e130], c63, o123.scale);
}
var u15 = ["x", "scaleX", "originX"];
var f12 = ["y", "scaleY", "originY"];
function x5(t150, n94) {
  a38(t150.x, n94, u15), a38(t150.y, n94, f12);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/utils/measure.js
function r78(e130, r123) {
  return t106(n54(e130.getBoundingClientRect(), r123));
}
function n56(o123, t150, n94) {
  const f22 = r78(o123, n94), { scroll: i58 } = t150;
  return i58 && (c27(f22.x, i58.offset.x), c27(f22.y, i58.offset.y)), f22;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/VisualElementDragControls.js
var A = /* @__PURE__ */ new WeakMap();
var C = class {
  constructor(t150) {
    this.openGlobalLock = null, this.isDragging = false, this.currentDirection = null, this.originPoint = { x: 0, y: 0 }, this.constraints = false, this.hasMutatedConstraints = false, this.elastic = o79(), this.visualElement = t150;
  }
  start(t150, { snapToCursor: n94 = false } = {}) {
    const { presenceContext: o123 } = this.visualElement;
    if (o123 && false === o123.isPresent) return;
    this.panSession = new v4(t150, { onSessionStart: (t151) => {
      this.stopAnimation(), n94 && this.snapToCursor(t81(t151, "page").point);
    }, onStart: (t151, s74) => {
      const { drag: n95, dragPropagation: o124, onDragStart: e130 } = this.getProps();
      if (n95 && !o124 && (this.openGlobalLock && this.openGlobalLock(), this.openGlobalLock = e57(n95), !this.openGlobalLock)) return;
      this.isDragging = true, this.currentDirection = null, this.resolveConstraints(), this.visualElement.projection && (this.visualElement.projection.isAnimationBlocked = true, this.visualElement.projection.target = void 0), n53((t152) => {
        let s75 = this.getAxisMotionValue(t152).get() || 0;
        if (e49.test(s75)) {
          const { projection: i58 } = this.visualElement;
          if (i58 && i58.layout) {
            const n96 = i58.layout.layoutBox[t152];
            if (n96) {
              s75 = n51(n96) * (parseFloat(s75) / 100);
            }
          }
        }
        this.originPoint[t152] = s75;
      }), e130 && o58.update(() => e130(t151, s74), false, true);
      const { animationState: r123 } = this.visualElement;
      r123 && r123.setActive("whileDrag", true);
    }, onMove: (t151, s74) => {
      const { dragPropagation: i58, dragDirectionLock: n95, onDirectionLock: o124, onDrag: e130 } = this.getProps();
      if (!i58 && !this.openGlobalLock) return;
      const { offset: r123 } = s74;
      if (n95 && null === this.currentDirection) return this.currentDirection = function(t152, s75 = 10) {
        let i59 = null;
        Math.abs(t152.y) > s75 ? i59 = "y" : Math.abs(t152.x) > s75 && (i59 = "x");
        return i59;
      }(r123), void (null !== this.currentDirection && o124 && o124(this.currentDirection));
      this.updateAxis("x", s74.point, r123), this.updateAxis("y", s74.point, r123), this.visualElement.render(), e130 && e130(t151, s74);
    }, onSessionEnd: (t151, s74) => this.stop(t151, s74) }, { transformPagePoint: this.visualElement.getTransformPagePoint() });
  }
  stop(t150, s74) {
    const i58 = this.isDragging;
    if (this.cancel(), !i58) return;
    const { velocity: n94 } = s74;
    this.startAnimation(n94);
    const { onDragEnd: o123 } = this.getProps();
    o123 && o58.update(() => o123(t150, s74));
  }
  cancel() {
    this.isDragging = false;
    const { projection: t150, animationState: s74 } = this.visualElement;
    t150 && (t150.isAnimationBlocked = false), this.panSession && this.panSession.end(), this.panSession = void 0;
    const { dragPropagation: i58 } = this.getProps();
    !i58 && this.openGlobalLock && (this.openGlobalLock(), this.openGlobalLock = null), s74 && s74.setActive("whileDrag", false);
  }
  updateAxis(t150, s74, i58) {
    const { drag: n94 } = this.getProps();
    if (!i58 || !M2(t150, n94, this.currentDirection)) return;
    const o123 = this.getAxisMotionValue(t150);
    let r123 = this.originPoint[t150] + i58[t150];
    this.constraints && this.constraints[t150] && (r123 = o78(r123, this.constraints[t150], this.elastic[t150])), o123.set(r123);
  }
  resolveConstraints() {
    const { dragConstraints: t150, dragElastic: s74 } = this.getProps(), { layout: i58 } = this.visualElement.projection || {}, o123 = this.constraints;
    t150 && t59(t150) ? this.constraints || (this.constraints = this.resolveRefConstraints()) : this.constraints = !(!t150 || !i58) && x4(i58.layoutBox, t150), this.elastic = s45(s74), o123 !== this.constraints && i58 && this.constraints && !this.hasMutatedConstraints && n53((t151) => {
      this.getAxisMotionValue(t151) && (this.constraints[t151] = c26(i58.layoutBox[t151], this.constraints[t151]));
    });
  }
  resolveRefConstraints() {
    const { dragConstraints: s74, onMeasureDragConstraints: i58 } = this.getProps();
    if (!s74 || !t59(s74)) return false;
    const o123 = s74.current;
    r58(null !== o123, "If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");
    const { projection: e130 } = this.visualElement;
    if (!e130 || !e130.layout) return false;
    const r123 = n56(o123, e130.root, this.visualElement.getTransformPagePoint());
    let a74 = a37(e130.layout.layoutBox, r123);
    if (i58) {
      const t150 = i58(o80(a74));
      this.hasMutatedConstraints = !!t150, t150 && (a74 = t106(t150));
    }
    return a74;
  }
  startAnimation(t150) {
    const { drag: s74, dragMomentum: i58, dragElastic: n94, dragTransition: o123, dragSnapToOrigin: e130, onDragTransitionEnd: r123 } = this.getProps(), a74 = this.constraints || {}, l50 = n53((r124) => {
      if (!M2(r124, s74, this.currentDirection)) return;
      let l51 = a74 && a74[r124] || {};
      e130 && (l51 = { min: 0, max: 0 });
      const c63 = n94 ? 200 : 1e6, u29 = n94 ? 40 : 1e7, h21 = { type: "inertia", velocity: i58 ? t150[r124] : 0, bounceStiffness: c63, bounceDamping: u29, timeConstant: 750, restDelta: 1, restSpeed: 10, ...o123, ...l51 };
      return this.startAxisValueAnimation(r124, h21);
    });
    return Promise.all(l50).then(r123);
  }
  startAxisValueAnimation(t150, s74) {
    const i58 = this.getAxisMotionValue(t150);
    return i58.start(u10(t150, i58, 0, s74));
  }
  stopAnimation() {
    n53((t150) => this.getAxisMotionValue(t150).stop());
  }
  getAxisMotionValue(t150) {
    const s74 = "_drag" + t150.toUpperCase(), i58 = this.visualElement.getProps(), n94 = i58[s74];
    return n94 || this.visualElement.getValue(t150, (i58.initial ? i58.initial[t150] : void 0) || 0);
  }
  snapToCursor(t150) {
    n53((s74) => {
      const { drag: i58 } = this.getProps();
      if (!M2(s74, i58, this.currentDirection)) return;
      const { projection: n94 } = this.visualElement, o123 = this.getAxisMotionValue(s74);
      if (n94 && n94.layout) {
        const { min: i59, max: e130 } = n94.layout.layoutBox[s74];
        o123.set(t150[s74] - o68(i59, e130, 0.5));
      }
    });
  }
  scalePositionWithinConstraints() {
    if (!this.visualElement.current) return;
    const { drag: t150, dragConstraints: s74 } = this.getProps(), { projection: i58 } = this.visualElement;
    if (!t59(s74) || !i58 || !this.constraints) return;
    this.stopAnimation();
    const o123 = { x: 0, y: 0 };
    n53((t151) => {
      const s75 = this.getAxisMotionValue(t151);
      if (s75) {
        const i59 = s75.get();
        o123[t151] = e75({ min: i59, max: i59 }, this.constraints[t151]);
      }
    });
    const { transformTemplate: e130 } = this.visualElement.getProps();
    this.visualElement.current.style.transform = e130 ? e130({}, "") : "none", i58.root && i58.root.updateScroll(), i58.updateLayout(), this.resolveConstraints(), n53((s75) => {
      if (!M2(s75, t150, null)) return;
      const i59 = this.getAxisMotionValue(s75), { min: n94, max: e131 } = this.constraints[s75];
      i59.set(o68(n94, e131, o123[s75]));
    });
  }
  addListeners() {
    if (!this.visualElement.current) return;
    A.set(this.visualElement, this);
    const t150 = this.visualElement.current, s74 = t82(t150, "pointerdown", (t151) => {
      const { drag: s75, dragListener: i59 = true } = this.getProps();
      s75 && i59 && this.start(t151);
    }), i58 = () => {
      const { dragConstraints: t151 } = this.getProps();
      t59(t151) && (this.constraints = this.resolveRefConstraints());
    }, { projection: e130 } = this.visualElement, r123 = e130.addEventListener("measure", i58);
    e130 && !e130.layout && (e130.root && e130.root.updateScroll(), e130.updateLayout()), i58();
    const a74 = e55(window, "resize", () => this.scalePositionWithinConstraints()), l50 = e130.addEventListener("didUpdate", ({ delta: t151, hasLayoutChanged: s75 }) => {
      this.isDragging && s75 && (n53((s76) => {
        const i59 = this.getAxisMotionValue(s76);
        i59 && (this.originPoint[s76] += t151[s76].translate, i59.set(i59.get() + t151[s76].translate));
      }), this.visualElement.render());
    });
    return () => {
      a74(), s74(), r123(), l50 && l50();
    };
  }
  getProps() {
    const t150 = this.visualElement.getProps(), { drag: s74 = false, dragDirectionLock: i58 = false, dragPropagation: n94 = false, dragConstraints: o123 = false, dragElastic: e130 = f11, dragMomentum: r123 = true } = t150;
    return { ...t150, drag: s74, dragDirectionLock: i58, dragPropagation: n94, dragConstraints: o123, dragElastic: e130, dragMomentum: r123 };
  }
};
function M2(t150, s74, i58) {
  return !(true !== s74 && s74 !== t150 || null !== i58 && i58 !== t150);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/drag/index.js
var r79 = class extends t84 {
  constructor(o123) {
    super(o123), this.removeGroupControls = o57, this.removeListeners = o57, this.controls = new C(o123);
  }
  mount() {
    const { dragControls: o123 } = this.node.getProps();
    o123 && (this.removeGroupControls = o123.subscribe(this.controls)), this.removeListeners = this.controls.addListeners() || o57;
  }
  unmount() {
    this.removeGroupControls(), this.removeListeners();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/gestures/pan/index.js
var r80 = (e130) => (n94, o123) => {
  e130 && o58.update(() => e130(n94, o123));
};
var i37 = class extends t84 {
  constructor() {
    super(...arguments), this.removePointerDownListener = o57;
  }
  onPointerDown(n94) {
    this.session = new v4(n94, this.createPanHandlers(), { transformPagePoint: this.node.getTransformPagePoint() });
  }
  createPanHandlers() {
    const { onPanSessionStart: e130, onPanStart: n94, onPan: o123, onPanEnd: t150 } = this.node.getProps();
    return { onSessionStart: r80(e130), onStart: r80(n94), onMove: o123, onEnd: (e131, n95) => {
      delete this.session, t150 && o58.update(() => t150(e131, n95));
    } };
  }
  mount() {
    this.removePointerDownListener = t82(this.node.current, "pointerdown", (e130) => this.onPointerDown(e130));
  }
  update() {
    this.session && this.session.updateHandlers(this.createPanHandlers());
  }
  unmount() {
    this.removePointerDownListener(), this.session && this.session.end();
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.js
var import_react44 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/use-presence.js
var import_react43 = __toESM(require_react());
function o83() {
  const o123 = (0, import_react43.useContext)(r32);
  if (null === o123) return [true, null];
  const { isPresent: i58, onExitComplete: s74, register: c63 } = o123, l50 = (0, import_react43.useId)();
  (0, import_react43.useEffect)(() => c63(l50), []);
  return !i58 && s74 ? [false, () => s74 && s74(l50)] : [true];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/state.js
var e79 = { hasAnimatedSinceResize: true, hasEverUpdated: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-border-radius.js
function r82(t150, r123) {
  return r123.max === r123.min ? 0 : t150 / (r123.max - r123.min) * 100;
}
var e80 = { correct: (e130, n94) => {
  if (!n94.target) return e130;
  if ("string" == typeof e130) {
    if (!a23.test(e130)) return e130;
    e130 = parseFloat(e130);
  }
  return `${r82(e130, n94.target.x)}% ${r82(e130, n94.target.y)}%`;
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/scale-box-shadow.js
var t109 = { correct: (t150, { treeScale: o123, projectionDelta: n94 }) => {
  const c63 = t150, s74 = k2.parse(t150);
  if (s74.length > 5) return c63;
  const m62 = k2.createTransformer(t150), p35 = "number" != typeof s74[0] ? 1 : 0, a74 = n94.x.scale * o123.x, l50 = n94.y.scale * o123.y;
  s74[0 + p35] /= a74, s74[1 + p35] /= l50;
  const f22 = o68(a74, l50, 0.5);
  return "number" == typeof s74[2 + p35] && (s74[2 + p35] /= f22), "number" == typeof s74[3 + p35] && (s74[3 + p35] /= f22), m62(s74);
} };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout/MeasureLayout.js
var d17 = class extends import_react44.default.Component {
  componentDidMount() {
    const { visualElement: e130, layoutGroup: o123, switchLayoutGroup: t150, layoutId: r123 } = this.props, { projection: s74 } = e130;
    t66(c28), s74 && (o123.group && o123.group.add(s74), t150 && t150.register && r123 && t150.register(s74), s74.root.didUpdate(), s74.addEventListener("animationComplete", () => {
      this.safeToRemove();
    }), s74.setOptions({ ...s74.options, onExitComplete: () => this.safeToRemove() })), e79.hasEverUpdated = true;
  }
  getSnapshotBeforeUpdate(e130) {
    const { layoutDependency: o123, visualElement: t150, drag: r123, isPresent: s74 } = this.props, i58 = t150.projection;
    return i58 ? (i58.isPresent = s74, r123 || e130.layoutDependency !== o123 || void 0 === o123 ? i58.willUpdate() : this.safeToRemove(), e130.isPresent !== s74 && (s74 ? i58.promote() : i58.relegate() || o58.postRender(() => {
      const e131 = i58.getStack();
      e131 && e131.members.length || this.safeToRemove();
    })), null) : null;
  }
  componentDidUpdate() {
    const { projection: e130 } = this.props.visualElement;
    e130 && (e130.root.didUpdate(), queueMicrotask(() => {
      !e130.currentAnimation && e130.isLead() && this.safeToRemove();
    }));
  }
  componentWillUnmount() {
    const { visualElement: e130, layoutGroup: o123, switchLayoutGroup: t150 } = this.props, { projection: r123 } = e130;
    r123 && (r123.scheduleCheckAfterUnmount(), o123 && o123.group && o123.group.remove(r123), t150 && t150.deregister && t150.deregister(r123));
  }
  safeToRemove() {
    const { safeToRemove: e130 } = this.props;
    e130 && e130();
  }
  render() {
    return null;
  }
};
function u16(i58) {
  const [n94, p35] = o83(), a74 = (0, import_react44.useContext)(r38);
  return import_react44.default.createElement(d17, { ...i58, layoutGroup: a74, switchLayoutGroup: (0, import_react44.useContext)(r39), isPresent: n94, safeToRemove: p35 });
}
var c28 = { borderRadius: { ...e80, applyTo: ["borderTopLeftRadius", "borderTopRightRadius", "borderBottomLeftRadius", "borderBottomRightRadius"] }, borderTopLeftRadius: e80, borderTopRightRadius: e80, borderBottomLeftRadius: e80, borderBottomRightRadius: e80, boxShadow: t109 };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/animation/mix-values.js
var a39 = ["TopLeft", "TopRight", "BottomLeft", "BottomRight"];
var s47 = a39.length;
var c29 = (t150) => "string" == typeof t150 ? parseFloat(t150) : t150;
var n57 = (t150) => "number" == typeof t150 || a23.test(t150);
function m28(t150, o123, r123, p35, m62, d44) {
  m62 ? (t150.opacity = o68(0, void 0 !== r123.opacity ? r123.opacity : 1, f13(p35)), t150.opacityExit = o68(void 0 !== o123.opacity ? o123.opacity : 1, 0, y2(p35))) : d44 && (t150.opacity = o68(void 0 !== o123.opacity ? o123.opacity : 1, void 0 !== r123.opacity ? r123.opacity : 1, p35));
  for (let m63 = 0; m63 < s47; m63++) {
    const s74 = `border${a39[m63]}Radius`;
    let f22 = u17(o123, s74), y7 = u17(r123, s74);
    if (void 0 === f22 && void 0 === y7) continue;
    f22 || (f22 = 0), y7 || (y7 = 0);
    0 === f22 || 0 === y7 || n57(f22) === n57(y7) ? (t150[s74] = Math.max(o68(c29(f22), c29(y7), p35), 0), (e49.test(y7) || e49.test(f22)) && (t150[s74] += "%")) : t150[s74] = y7;
  }
  (o123.rotate || r123.rotate) && (t150.rotate = o68(o123.rotate || 0, r123.rotate || 0, p35));
}
function u17(t150, o123) {
  return void 0 !== t150[o123] ? t150[o123] : t150.borderRadius;
}
var f13 = d18(0, 0.5, s37);
var y2 = d18(0.5, 0.95, o57);
function d18(t150, i58, r123) {
  return (e130) => e130 < t150 ? 0 : e130 > i58 ? 1 : r123(t90(t150, i58, e130));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/copy.js
function n58(n94, x13) {
  n94.min = x13.min, n94.max = x13.max;
}
function x6(x13, i58) {
  n58(x13.x, i58.x), n58(x13.y, i58.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/delta-remove.js
function t110(i58, n94, t150, m62, r123) {
  return i58 = o82(i58 -= n94, 1 / t150, m62), void 0 !== r123 && (i58 = o82(i58, 1 / r123, m62)), i58;
}
function m29(o123, m62 = 0, r123 = 1, e130 = 0.5, s74, a74 = o123, u29 = o123) {
  if (e49.test(m62)) {
    m62 = parseFloat(m62);
    m62 = o68(u29.min, u29.max, m62 / 100) - u29.min;
  }
  if ("number" != typeof m62) return;
  let f22 = o68(a74.min, a74.max, e130);
  o123 === a74 && (f22 -= m62), o123.min = t110(o123.min, m62, r123, f22, s74), o123.max = t110(o123.max, m62, r123, f22, s74);
}
function r83(i58, n94, [o123, t150, r123], e130, s74) {
  m29(i58, n94[o123], n94[t150], n94[r123], n94.scale, e130, s74);
}
var e82 = ["x", "scaleX", "originX"];
var s48 = ["y", "scaleY", "originY"];
function a40(i58, n94, o123, t150) {
  r83(i58.x, n94, e82, o123 ? o123.x : void 0, t150 ? t150.x : void 0), r83(i58.y, n94, s48, o123 ? o123.y : void 0, t150 ? t150.y : void 0);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/geometry/utils.js
function t111(n94) {
  return 0 === n94.translate && 1 === n94.scale;
}
function r84(n94) {
  return t111(n94.x) && t111(n94.y);
}
function a41(n94, t150) {
  return n94.x.min === t150.x.min && n94.x.max === t150.x.max && n94.y.min === t150.y.min && n94.y.max === t150.y.max;
}
function x7(n94, t150) {
  return Math.round(n94.x.min) === Math.round(t150.x.min) && Math.round(n94.x.max) === Math.round(t150.x.max) && Math.round(n94.y.min) === Math.round(t150.y.min) && Math.round(n94.y.max) === Math.round(t150.y.max);
}
function m30(t150) {
  return n51(t150.x) / n51(t150.y);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/shared/stack.js
var t112 = class {
  constructor() {
    this.members = [];
  }
  add(s74) {
    n45(this.members, s74), s74.scheduleRender();
  }
  remove(e130) {
    if (i33(this.members, e130), e130 === this.prevLead && (this.prevLead = void 0), e130 === this.lead) {
      const e131 = this.members[this.members.length - 1];
      e131 && this.promote(e131);
    }
  }
  relegate(e130) {
    const s74 = this.members.findIndex((s75) => e130 === s75);
    if (0 === s74) return false;
    let t150;
    for (let e131 = s74; e131 >= 0; e131--) {
      const s75 = this.members[e131];
      if (false !== s75.isPresent) {
        t150 = s75;
        break;
      }
    }
    return !!t150 && (this.promote(t150), true);
  }
  promote(e130, s74) {
    const t150 = this.lead;
    if (e130 !== t150 && (this.prevLead = t150, this.lead = e130, e130.show(), t150)) {
      t150.instance && t150.scheduleRender(), e130.scheduleRender(), e130.resumeFrom = t150, s74 && (e130.resumeFrom.preserveOpacity = true), t150.snapshot && (e130.snapshot = t150.snapshot, e130.snapshot.latestValues = t150.animationValues || t150.latestValues), e130.root && e130.root.isUpdating && (e130.isLayoutDirty = true);
      const { crossfade: o123 } = e130.options;
      false === o123 && t150.hide();
    }
  }
  exitAnimationComplete() {
    this.members.forEach((e130) => {
      const { options: s74, resumingFrom: t150 } = e130;
      s74.onExitComplete && s74.onExitComplete(), t150 && t150.options.onExitComplete && t150.options.onExitComplete();
    });
  }
  scheduleRender() {
    this.members.forEach((e130) => {
      e130.instance && e130.scheduleRender(false);
    });
  }
  removeLeadSnapshot() {
    this.lead && this.lead.snapshot && (this.lead.snapshot = void 0);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/styles/transform.js
function t113(t150, e130, a74) {
  let o123 = "";
  const r123 = t150.x.translate / e130.x, n94 = t150.y.translate / e130.y;
  if ((r123 || n94) && (o123 = `translate3d(${r123}px, ${n94}px, 0) `), 1 === e130.x && 1 === e130.y || (o123 += `scale(${1 / e130.x}, ${1 / e130.y}) `), a74) {
    const { rotate: t151, rotateX: e131, rotateY: r124 } = a74;
    t151 && (o123 += `rotate(${t151}deg) `), e131 && (o123 += `rotateX(${e131}deg) `), r124 && (o123 += `rotateY(${r124}deg) `);
  }
  const s74 = t150.x.scale * e130.x, x13 = t150.y.scale * e130.y;
  return 1 === s74 && 1 === x13 || (o123 += `scale(${s74}, ${x13})`), o123 || "none";
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/compare-by-depth.js
var t114 = (t150, e130) => t150.depth - e130.depth;

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/flat-tree.js
var s49 = class {
  constructor() {
    this.children = [], this.isDirty = false;
  }
  add(r123) {
    n45(this.children, r123), this.isDirty = true;
  }
  remove(i58) {
    i33(this.children, i58), this.isDirty = true;
  }
  forEach(i58) {
    this.isDirty && this.children.sort(t114), this.isDirty = false, this.children.forEach(i58);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/delay.js
function e83(e130, t150) {
  const m62 = performance.now(), n94 = ({ timestamp: o123 }) => {
    const a74 = o123 - m62;
    a74 >= t150 && (r53(n94), e130(a74 - t150));
  };
  return o58.read(n94, true), () => r53(n94);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/debug/record.js
function o85(o123) {
  window.MotionDebug && window.MotionDebug.record(o123);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/is-svg-element.js
function e84(e130) {
  return e130 instanceof SVGElement && "svg" !== e130.tagName;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/animation/interfaces/single-value.js
function r85(r123, m62, n94) {
  const a74 = o49(r123) ? r123 : h8(r123);
  return a74.start(u10("", a74, m62, n94)), a74.animation;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/create-projection-node.js
var z3 = ["", "X", "Y", "Z"];
var H2 = 0;
var W = { type: "projectionFrame", totalNodes: 0, resolvedTargetDeltas: 0, recalculatedProjection: 0 };
function G2({ attachResizeListener: u29, defaultParent: v8, measureScroll: D, checkIsScrollRoot: k3, resetTransform: N2 }) {
  return class {
    constructor(t150 = {}, e130 = null == v8 ? void 0 : v8()) {
      this.id = H2++, this.animationId = 0, this.children = /* @__PURE__ */ new Set(), this.options = {}, this.isTreeAnimating = false, this.isAnimationBlocked = false, this.isLayoutDirty = false, this.isProjectionDirty = false, this.isSharedProjectionDirty = false, this.isTransformDirty = false, this.updateManuallyBlocked = false, this.updateBlockedByResize = false, this.isUpdating = false, this.isSVG = false, this.needsReset = false, this.shouldResetTransform = false, this.treeScale = { x: 1, y: 1 }, this.eventHandlers = /* @__PURE__ */ new Map(), this.hasTreeAnimated = false, this.updateScheduled = false, this.checkUpdateFailed = () => {
        this.isUpdating && (this.isUpdating = false, this.clearAllSnapshots());
      }, this.updateProjection = () => {
        W.totalNodes = W.resolvedTargetDeltas = W.recalculatedProjection = 0, this.nodes.forEach(Z), this.nodes.forEach(tt), this.nodes.forEach(et), this.nodes.forEach($), o85(W);
      }, this.hasProjected = false, this.isVisible = true, this.animationProgress = 0, this.sharedNodes = /* @__PURE__ */ new Map(), this.latestValues = t150, this.root = e130 ? e130.root || e130 : this, this.path = e130 ? [...e130.path, e130] : [], this.parent = e130, this.depth = e130 ? e130.depth + 1 : 0;
      for (let t151 = 0; t151 < this.path.length; t151++) this.path[t151].shouldResetTransform = true;
      this.root === this && (this.nodes = new s49());
    }
    addEventListener(e130, i58) {
      return this.eventHandlers.has(e130) || this.eventHandlers.set(e130, new i34()), this.eventHandlers.get(e130).add(i58);
    }
    notifyListeners(t150, ...e130) {
      const i58 = this.eventHandlers.get(t150);
      i58 && i58.notify(...e130);
    }
    hasListeners(t150) {
      return this.eventHandlers.has(t150);
    }
    mount(t150, e130 = this.root.hasTreeAnimated) {
      if (this.instance) return;
      this.isSVG = e84(t150), this.instance = t150;
      const { layoutId: i58, layout: s74, visualElement: o123 } = this.options;
      if (o123 && !o123.current && o123.mount(t150), this.root.nodes.add(this), this.parent && this.parent.children.add(this), e130 && (s74 || i58) && (this.isLayoutDirty = true), u29) {
        let e131;
        const i59 = () => this.root.updateBlockedByResize = false;
        u29(t150, () => {
          this.root.updateBlockedByResize = true, e131 && e131(), e131 = e83(i59, 250), e79.hasAnimatedSinceResize && (e79.hasAnimatedSinceResize = false, this.nodes.forEach(_));
        });
      }
      i58 && this.root.registerSharedNode(i58, this), false !== this.options.animate && o123 && (i58 || s74) && this.addEventListener("didUpdate", ({ delta: t151, hasLayoutChanged: e131, hasRelativeTargetChanged: i59, layout: s75 }) => {
        if (this.isTreeAnimationBlocked()) return this.target = void 0, void (this.relativeTarget = void 0);
        const a74 = this.options.transition || o123.getDefaultTransition() || ht, { onLayoutAnimationStart: r123, onLayoutAnimationComplete: n94 } = o123.getProps(), h21 = !this.targetLayout || !x7(this.targetLayout, s75) || i59, l50 = !e131 && i59;
        if (this.options.layoutRoot || this.resumeFrom && this.resumeFrom.instance || l50 || e131 && (h21 || !this.currentAnimation)) {
          this.resumeFrom && (this.resumingFrom = this.resumeFrom, this.resumingFrom.resumingFrom = void 0), this.setAnimationOrigin(t151, l50);
          const e132 = { ...r71(a74, "layout"), onPlay: r123, onComplete: n94 };
          (o123.shouldReduceMotion || this.options.layoutRoot) && (e132.delay = 0, e132.type = false), this.startAnimation(e132);
        } else e131 || _(this), this.isLead() && this.options.onExitComplete && this.options.onExitComplete();
        this.targetLayout = s75;
      });
    }
    unmount() {
      this.options.layoutId && this.willUpdate(), this.root.nodes.remove(this);
      const t150 = this.getStack();
      t150 && t150.remove(this), this.parent && this.parent.children.delete(this), this.instance = void 0, r53(this.updateProjection);
    }
    blockUpdate() {
      this.updateManuallyBlocked = true;
    }
    unblockUpdate() {
      this.updateManuallyBlocked = false;
    }
    isUpdateBlocked() {
      return this.updateManuallyBlocked || this.updateBlockedByResize;
    }
    isTreeAnimationBlocked() {
      return this.isAnimationBlocked || this.parent && this.parent.isTreeAnimationBlocked() || false;
    }
    startUpdate() {
      this.isUpdateBlocked() || (this.isUpdating = true, this.nodes && this.nodes.forEach(it), this.animationId++);
    }
    getTransformTemplate() {
      const { visualElement: t150 } = this.options;
      return t150 && t150.getProps().transformTemplate;
    }
    willUpdate(t150 = true) {
      if (this.root.hasTreeAnimated = true, this.root.isUpdateBlocked()) return void (this.options.onExitComplete && this.options.onExitComplete());
      if (!this.root.isUpdating && this.root.startUpdate(), this.isLayoutDirty) return;
      this.isLayoutDirty = true;
      for (let t151 = 0; t151 < this.path.length; t151++) {
        const e131 = this.path[t151];
        e131.shouldResetTransform = true, e131.updateScroll("snapshot"), e131.options.layoutRoot && e131.willUpdate(false);
      }
      const { layoutId: e130, layout: i58 } = this.options;
      if (void 0 === e130 && !i58) return;
      const s74 = this.getTransformTemplate();
      this.prevTransformTemplateValue = s74 ? s74(this.latestValues, "") : void 0, this.updateSnapshot(), t150 && this.notifyListeners("willUpdate");
    }
    update() {
      this.updateScheduled = false;
      if (this.isUpdateBlocked()) return this.unblockUpdate(), this.clearAllSnapshots(), void this.nodes.forEach(J);
      this.isUpdating || this.nodes.forEach(K), this.isUpdating = false, this.nodes.forEach(Q), this.nodes.forEach(X), this.nodes.forEach(Y), this.clearAllSnapshots();
      const t150 = performance.now();
      s34.delta = t69(0, 1e3 / 60, t150 - s34.timestamp), s34.timestamp = t150, s34.isProcessing = true, n32.update.process(s34), n32.preRender.process(s34), n32.render.process(s34), s34.isProcessing = false;
    }
    didUpdate() {
      this.updateScheduled || (this.updateScheduled = true, queueMicrotask(() => this.update()));
    }
    clearAllSnapshots() {
      this.nodes.forEach(q2), this.sharedNodes.forEach(st);
    }
    scheduleUpdateProjection() {
      o58.preRender(this.updateProjection, false, true);
    }
    scheduleCheckAfterUnmount() {
      o58.postRender(() => {
        this.isLayoutDirty ? this.root.didUpdate() : this.root.checkUpdateFailed();
      });
    }
    updateSnapshot() {
      !this.snapshot && this.instance && (this.snapshot = this.measure());
    }
    updateLayout() {
      if (!this.instance) return;
      if (this.updateScroll(), !(this.options.alwaysMeasureLayout && this.isLead() || this.isLayoutDirty)) return;
      if (this.resumeFrom && !this.resumeFrom.instance) for (let t151 = 0; t151 < this.path.length; t151++) {
        this.path[t151].updateScroll();
      }
      const t150 = this.layout;
      this.layout = this.measure(false), this.layoutCorrected = o79(), this.isLayoutDirty = false, this.projectionDelta = void 0, this.notifyListeners("measure", this.layout.layoutBox);
      const { visualElement: e130 } = this.options;
      e130 && e130.notify("LayoutMeasure", this.layout.layoutBox, t150 ? t150.layoutBox : void 0);
    }
    updateScroll(t150 = "measure") {
      let e130 = Boolean(this.options.layoutScroll && this.instance);
      this.scroll && this.scroll.animationId === this.root.animationId && this.scroll.phase === t150 && (e130 = false), e130 && (this.scroll = { animationId: this.root.animationId, phase: t150, isRoot: k3(this.instance), offset: D(this.instance) });
    }
    resetTransform() {
      if (!N2) return;
      const t150 = this.isLayoutDirty || this.shouldResetTransform, e130 = this.projectionDelta && !r84(this.projectionDelta), i58 = this.getTransformTemplate(), s74 = i58 ? i58(this.latestValues, "") : void 0, o123 = s74 !== this.prevTransformTemplateValue;
      t150 && (e130 || r76(this.latestValues) || o123) && (N2(this.instance, s74), this.shouldResetTransform = false, this.scheduleRender());
    }
    measure(t150 = true) {
      const e130 = this.measurePageBox();
      let i58 = this.removeElementScroll(e130);
      var s74;
      return t150 && (i58 = this.removeTransform(i58)), ut((s74 = i58).x), ut(s74.y), { animationId: this.root.animationId, measuredBox: e130, layoutBox: i58, latestValues: {}, source: this.id };
    }
    measurePageBox() {
      const { visualElement: t150 } = this.options;
      if (!t150) return o79();
      const e130 = t150.measureViewportBox(), { scroll: i58 } = this.root;
      return i58 && (c27(e130.x, i58.offset.x), c27(e130.y, i58.offset.y)), e130;
    }
    removeElementScroll(t150) {
      const e130 = o79();
      x6(e130, t150);
      for (let o123 = 0; o123 < this.path.length; o123++) {
        const a74 = this.path[o123], { scroll: r123, options: n94 } = a74;
        if (a74 !== this.root && r123 && n94.layoutScroll) {
          if (r123.isRoot) {
            x6(e130, t150);
            const { scroll: o124 } = this.root;
            o124 && (c27(e130.x, -o124.offset.x), c27(e130.y, -o124.offset.y));
          }
          c27(e130.x, r123.offset.x), c27(e130.y, r123.offset.y);
        }
      }
      return e130;
    }
    applyTransform(t150, e130 = false) {
      const s74 = o79();
      x6(s74, t150);
      for (let t151 = 0; t151 < this.path.length; t151++) {
        const i58 = this.path[t151];
        !e130 && i58.options.layoutScroll && i58.scroll && i58 !== i58.root && x5(s74, { x: -i58.scroll.offset.x, y: -i58.scroll.offset.y }), r76(i58.latestValues) && x5(s74, i58.latestValues);
      }
      return r76(this.latestValues) && x5(s74, this.latestValues), s74;
    }
    removeTransform(t150) {
      const e130 = o79();
      x6(e130, t150);
      for (let t151 = 0; t151 < this.path.length; t151++) {
        const s74 = this.path[t151];
        if (!s74.instance) continue;
        if (!r76(s74.latestValues)) continue;
        n55(s74.latestValues) && s74.updateSnapshot();
        const o123 = o79(), a74 = s74.measurePageBox();
        x6(o123, a74), a40(e130, s74.latestValues, s74.snapshot ? s74.snapshot.layoutBox : void 0, o123);
      }
      return r76(this.latestValues) && a40(e130, this.latestValues), e130;
    }
    setTargetDelta(t150) {
      this.targetDelta = t150, this.root.scheduleUpdateProjection(), this.isProjectionDirty = true;
    }
    setOptions(t150) {
      this.options = { ...this.options, ...t150, crossfade: void 0 === t150.crossfade || t150.crossfade };
    }
    clearMeasurements() {
      this.scroll = void 0, this.layout = void 0, this.snapshot = void 0, this.prevTransformTemplateValue = void 0, this.targetDelta = void 0, this.target = void 0, this.isLayoutDirty = false;
    }
    forceRelativeParentToResolveTarget() {
      this.relativeParent && this.relativeParent.resolvedRelativeTargetAt !== s34.timestamp && this.relativeParent.resolveTargetDelta(true);
    }
    resolveTargetDelta(t150 = false) {
      var e130;
      const s74 = this.getLead();
      this.isProjectionDirty || (this.isProjectionDirty = s74.isProjectionDirty), this.isTransformDirty || (this.isTransformDirty = s74.isTransformDirty), this.isSharedProjectionDirty || (this.isSharedProjectionDirty = s74.isSharedProjectionDirty);
      const o123 = Boolean(this.resumingFrom) || this !== s74;
      if (!(t150 || o123 && this.isSharedProjectionDirty || this.isProjectionDirty || (null === (e130 = this.parent) || void 0 === e130 ? void 0 : e130.isProjectionDirty) || this.attemptToResolveRelativeTarget)) return;
      const { layout: r123, layoutId: l50 } = this.options;
      if (this.layout && (r123 || l50)) {
        if (this.resolvedRelativeTargetAt = s34.timestamp, !this.targetDelta && !this.relativeTarget) {
          const t151 = this.getClosestProjectingParent();
          t151 && t151.layout && 1 !== this.animationProgress ? (this.relativeParent = t151, this.forceRelativeParentToResolveTarget(), this.relativeTarget = o79(), this.relativeTargetOrigin = o79(), s44(this.relativeTargetOrigin, this.layout.layoutBox, t151.layout.layoutBox), x6(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
        }
        if (this.relativeTarget || this.targetDelta) {
          if (this.target || (this.target = o79(), this.targetWithTransforms = o79()), this.relativeTarget && this.relativeTargetOrigin && this.relativeParent && this.relativeParent.target ? (this.forceRelativeParentToResolveTarget(), r74(this.target, this.relativeTarget, this.relativeParent.target)) : this.targetDelta ? (Boolean(this.resumingFrom) ? this.target = this.applyTransform(this.layout.layoutBox) : x6(this.target, this.layout.layoutBox), e77(this.target, this.targetDelta)) : x6(this.target, this.layout.layoutBox), this.attemptToResolveRelativeTarget) {
            this.attemptToResolveRelativeTarget = false;
            const t151 = this.getClosestProjectingParent();
            t151 && Boolean(t151.resumingFrom) === Boolean(this.resumingFrom) && !t151.options.layoutScroll && t151.target && 1 !== this.animationProgress ? (this.relativeParent = t151, this.forceRelativeParentToResolveTarget(), this.relativeTarget = o79(), this.relativeTargetOrigin = o79(), s44(this.relativeTargetOrigin, this.target, t151.target), x6(this.relativeTarget, this.relativeTargetOrigin)) : this.relativeParent = this.relativeTarget = void 0;
          }
          W.resolvedTargetDeltas++;
        }
      }
    }
    getClosestProjectingParent() {
      if (this.parent && !n55(this.parent.latestValues) && !e76(this.parent.latestValues)) return this.parent.isProjecting() ? this.parent : this.parent.getClosestProjectingParent();
    }
    isProjecting() {
      return Boolean((this.relativeTarget || this.targetDelta || this.options.layoutRoot) && this.layout);
    }
    calcProjection() {
      var t150;
      const e130 = this.getLead(), s74 = Boolean(this.resumingFrom) || this !== e130;
      let o123 = true;
      if ((this.isProjectionDirty || (null === (t150 = this.parent) || void 0 === t150 ? void 0 : t150.isProjectionDirty)) && (o123 = false), s74 && (this.isSharedProjectionDirty || this.isTransformDirty) && (o123 = false), this.resolvedRelativeTargetAt === s34.timestamp && (o123 = false), o123) return;
      const { layout: a74, layoutId: n94 } = this.options;
      if (this.isTreeAnimating = Boolean(this.parent && this.parent.isTreeAnimating || this.currentAnimation || this.pendingAnimation), this.isTreeAnimating || (this.targetDelta = this.relativeTarget = void 0), !this.layout || !a74 && !n94) return;
      x6(this.layoutCorrected, this.layout.layoutBox);
      const h21 = this.treeScale.x, c63 = this.treeScale.y;
      l27(this.layoutCorrected, this.treeScale, this.path, s74), !e130.layout || e130.target || 1 === this.treeScale.x && 1 === this.treeScale.y || (e130.target = e130.layout.layoutBox);
      const { target: u30 } = e130;
      if (!u30) return void (this.projectionTransform && (this.projectionDelta = n52(), this.projectionTransform = "none", this.scheduleRender()));
      this.projectionDelta || (this.projectionDelta = n52(), this.projectionDeltaWithTransform = n52());
      const d44 = this.projectionTransform;
      a36(this.projectionDelta, this.layoutCorrected, u30, this.latestValues), this.projectionTransform = t113(this.projectionDelta, this.treeScale), this.projectionTransform === d44 && this.treeScale.x === h21 && this.treeScale.y === c63 || (this.hasProjected = true, this.scheduleRender(), this.notifyListeners("projectionUpdate", u30)), W.recalculatedProjection++;
    }
    hide() {
      this.isVisible = false;
    }
    show() {
      this.isVisible = true;
    }
    scheduleRender(t150 = true) {
      if (this.options.scheduleRender && this.options.scheduleRender(), t150) {
        const t151 = this.getStack();
        t151 && t151.scheduleRender();
      }
      this.resumingFrom && !this.resumingFrom.instance && (this.resumingFrom = void 0);
    }
    setAnimationOrigin(t150, s74 = false) {
      const o123 = this.snapshot, a74 = o123 ? o123.latestValues : {}, r123 = { ...this.latestValues }, h21 = n52();
      this.relativeParent && this.relativeParent.options.layoutRoot || (this.relativeTarget = this.relativeTargetOrigin = void 0), this.attemptToResolveRelativeTarget = !s74;
      const l50 = o79(), c63 = (o123 ? o123.source : void 0) !== (this.layout ? this.layout.source : void 0), u30 = this.getStack(), d44 = !u30 || u30.members.length <= 1, y7 = Boolean(c63 && !d44 && true === this.options.crossfade && !this.path.some(nt));
      let g18;
      this.animationProgress = 0, this.mixTargetDelta = (s75) => {
        const o124 = s75 / 1e3;
        ot(h21.x, t150.x, o124), ot(h21.y, t150.y, o124), this.setTargetDelta(h21), this.relativeTarget && this.relativeTargetOrigin && this.layout && this.relativeParent && this.relativeParent.layout && (s44(l50, this.layout.layoutBox, this.relativeParent.layout.layoutBox), rt(this.relativeTarget, this.relativeTargetOrigin, l50, o124), g18 && a41(this.relativeTarget, g18) && (this.isProjectionDirty = false), g18 || (g18 = o79()), x6(g18, this.relativeTarget)), c63 && (this.animationValues = r123, m28(r123, a74, this.latestValues, o124, y7, d44)), this.root.scheduleUpdateProjection(), this.scheduleRender(), this.animationProgress = o124;
      }, this.mixTargetDelta(this.options.layoutRoot ? 1e3 : 0);
    }
    startAnimation(t150) {
      this.notifyListeners("animationStart"), this.currentAnimation && this.currentAnimation.stop(), this.resumingFrom && this.resumingFrom.currentAnimation && this.resumingFrom.currentAnimation.stop(), this.pendingAnimation && (r53(this.pendingAnimation), this.pendingAnimation = void 0), this.pendingAnimation = o58.update(() => {
        e79.hasAnimatedSinceResize = true, this.currentAnimation = r85(0, 1e3, { ...t150, onUpdate: (e130) => {
          this.mixTargetDelta(e130), t150.onUpdate && t150.onUpdate(e130);
        }, onComplete: () => {
          t150.onComplete && t150.onComplete(), this.completeAnimation();
        } }), this.resumingFrom && (this.resumingFrom.currentAnimation = this.currentAnimation), this.pendingAnimation = void 0;
      });
    }
    completeAnimation() {
      this.resumingFrom && (this.resumingFrom.currentAnimation = void 0, this.resumingFrom.preserveOpacity = void 0);
      const t150 = this.getStack();
      t150 && t150.exitAnimationComplete(), this.resumingFrom = this.currentAnimation = this.animationValues = void 0, this.notifyListeners("animationComplete");
    }
    finishAnimation() {
      this.currentAnimation && (this.mixTargetDelta && this.mixTargetDelta(1e3), this.currentAnimation.stop()), this.completeAnimation();
    }
    applyTransformsToTarget() {
      const t150 = this.getLead();
      let { targetWithTransforms: e130, target: s74, layout: a74, latestValues: r123 } = t150;
      if (e130 && s74 && a74) {
        if (this !== t150 && this.layout && a74 && dt(this.options.animationType, this.layout.layoutBox, a74.layoutBox)) {
          s74 = this.target || o79();
          const e131 = n51(this.layout.layoutBox.x);
          s74.x.min = t150.target.x.min, s74.x.max = s74.x.min + e131;
          const i58 = n51(this.layout.layoutBox.y);
          s74.y.min = t150.target.y.min, s74.y.max = s74.y.min + i58;
        }
        x6(e130, s74), x5(e130, r123), a36(this.projectionDeltaWithTransform, this.layoutCorrected, e130, r123);
      }
    }
    registerSharedNode(t150, e130) {
      this.sharedNodes.has(t150) || this.sharedNodes.set(t150, new t112());
      this.sharedNodes.get(t150).add(e130);
      const i58 = e130.options.initialPromotionConfig;
      e130.promote({ transition: i58 ? i58.transition : void 0, preserveFollowOpacity: i58 && i58.shouldPreserveFollowOpacity ? i58.shouldPreserveFollowOpacity(e130) : void 0 });
    }
    isLead() {
      const t150 = this.getStack();
      return !t150 || t150.lead === this;
    }
    getLead() {
      var t150;
      const { layoutId: e130 } = this.options;
      return e130 && (null === (t150 = this.getStack()) || void 0 === t150 ? void 0 : t150.lead) || this;
    }
    getPrevLead() {
      var t150;
      const { layoutId: e130 } = this.options;
      return e130 ? null === (t150 = this.getStack()) || void 0 === t150 ? void 0 : t150.prevLead : void 0;
    }
    getStack() {
      const { layoutId: t150 } = this.options;
      if (t150) return this.root.sharedNodes.get(t150);
    }
    promote({ needsReset: t150, transition: e130, preserveFollowOpacity: i58 } = {}) {
      const s74 = this.getStack();
      s74 && s74.promote(this, i58), t150 && (this.projectionDelta = void 0, this.needsReset = true), e130 && this.setOptions({ transition: e130 });
    }
    relegate() {
      const t150 = this.getStack();
      return !!t150 && t150.relegate(this);
    }
    resetRotation() {
      const { visualElement: t150 } = this.options;
      if (!t150) return;
      let e130 = false;
      const { latestValues: i58 } = t150;
      if ((i58.rotate || i58.rotateX || i58.rotateY || i58.rotateZ) && (e130 = true), !e130) return;
      const s74 = {};
      for (let e131 = 0; e131 < z3.length; e131++) {
        const o123 = "rotate" + z3[e131];
        i58[o123] && (s74[o123] = i58[o123], t150.setStaticValue(o123, 0));
      }
      t150.render();
      for (const e131 in s74) t150.setStaticValue(e131, s74[e131]);
      t150.scheduleRender();
    }
    getProjectionStyles(t150 = {}) {
      var e130, i58;
      const s74 = {};
      if (!this.instance || this.isSVG) return s74;
      if (!this.isVisible) return { visibility: "hidden" };
      s74.visibility = "";
      const o123 = this.getTransformTemplate();
      if (this.needsReset) return this.needsReset = false, s74.opacity = "", s74.pointerEvents = e53(t150.pointerEvents) || "", s74.transform = o123 ? o123(this.latestValues, "") : "none", s74;
      const a74 = this.getLead();
      if (!this.projectionDelta || !this.layout || !a74.target) {
        const e131 = {};
        return this.options.layoutId && (e131.opacity = void 0 !== this.latestValues.opacity ? this.latestValues.opacity : 1, e131.pointerEvents = e53(t150.pointerEvents) || ""), this.hasProjected && !r76(this.latestValues) && (e131.transform = o123 ? o123({}, "") : "none", this.hasProjected = false), e131;
      }
      const r123 = a74.animationValues || a74.latestValues;
      this.applyTransformsToTarget(), s74.transform = t113(this.projectionDeltaWithTransform, this.treeScale, r123), o123 && (s74.transform = o123(r123, s74.transform));
      const { x: n94, y: h21 } = this.projectionDelta;
      s74.transformOrigin = `${100 * n94.origin}% ${100 * h21.origin}% 0`, a74.animationValues ? s74.opacity = a74 === this ? null !== (i58 = null !== (e130 = r123.opacity) && void 0 !== e130 ? e130 : this.latestValues.opacity) && void 0 !== i58 ? i58 : 1 : this.preserveOpacity ? this.latestValues.opacity : r123.opacityExit : s74.opacity = a74 === this ? void 0 !== r123.opacity ? r123.opacity : "" : void 0 !== r123.opacityExit ? r123.opacityExit : 0;
      for (const t151 in n25) {
        if (void 0 === r123[t151]) continue;
        const { correct: e131, applyTo: i59 } = n25[t151], o124 = "none" === s74.transform ? r123[t151] : e131(r123[t151], a74);
        if (i59) {
          const t152 = i59.length;
          for (let e132 = 0; e132 < t152; e132++) s74[i59[e132]] = o124;
        } else s74[t151] = o124;
      }
      return this.options.layoutId && (s74.pointerEvents = a74 === this ? e53(t150.pointerEvents) || "" : "none"), s74;
    }
    clearSnapshot() {
      this.resumeFrom = this.snapshot = void 0;
    }
    resetTree() {
      this.root.nodes.forEach((t150) => {
        var e130;
        return null === (e130 = t150.currentAnimation) || void 0 === e130 ? void 0 : e130.stop();
      }), this.root.nodes.forEach(J), this.root.sharedNodes.clear();
    }
  };
}
function X(t150) {
  t150.updateLayout();
}
function Y(t150) {
  var e130;
  const i58 = (null === (e130 = t150.resumeFrom) || void 0 === e130 ? void 0 : e130.snapshot) || t150.snapshot;
  if (t150.isLead() && t150.layout && i58 && t150.hasListeners("didUpdate")) {
    const { layoutBox: e131, measuredBox: s74 } = t150.layout, { animationType: o123 } = t150.options, a74 = i58.source !== t150.layout.source;
    "size" === o123 ? n53((t151) => {
      const s75 = a74 ? i58.measuredBox[t151] : i58.layoutBox[t151], o124 = n51(s75);
      s75.min = e131[t151].min, s75.max = s75.min + o124;
    }) : dt(o123, i58.layoutBox, e131) && n53((s75) => {
      const o124 = a74 ? i58.measuredBox[s75] : i58.layoutBox[s75], r124 = n51(e131[s75]);
      o124.max = o124.min + r124, t150.relativeTarget && !t150.currentAnimation && (t150.isProjectionDirty = true, t150.relativeTarget[s75].max = t150.relativeTarget[s75].min + r124);
    });
    const r123 = n52();
    a36(r123, e131, i58.layoutBox);
    const h21 = n52();
    a74 ? a36(h21, t150.applyTransform(s74, true), i58.measuredBox) : a36(h21, e131, i58.layoutBox);
    const u29 = !r84(r123);
    let d44 = false;
    if (!t150.resumeFrom) {
      const s75 = t150.getClosestProjectingParent();
      if (s75 && !s75.resumeFrom) {
        const { snapshot: o124, layout: a75 } = s75;
        if (o124 && a75) {
          const r124 = o79();
          s44(r124, i58.layoutBox, o124.layoutBox);
          const h22 = o79();
          s44(h22, e131, a75.layoutBox), x7(r124, h22) || (d44 = true), s75.options.layoutRoot && (t150.relativeTarget = h22, t150.relativeTargetOrigin = r124, t150.relativeParent = s75);
        }
      }
    }
    t150.notifyListeners("didUpdate", { layout: e131, snapshot: i58, delta: h21, layoutDelta: r123, hasLayoutChanged: u29, hasRelativeTargetChanged: d44 });
  } else if (t150.isLead()) {
    const { onExitComplete: e131 } = t150.options;
    e131 && e131();
  }
  t150.options.transition = void 0;
}
function Z(t150) {
  W.totalNodes++, t150.parent && (t150.isProjecting() || (t150.isProjectionDirty = t150.parent.isProjectionDirty), t150.isSharedProjectionDirty || (t150.isSharedProjectionDirty = Boolean(t150.isProjectionDirty || t150.parent.isProjectionDirty || t150.parent.isSharedProjectionDirty)), t150.isTransformDirty || (t150.isTransformDirty = t150.parent.isTransformDirty));
}
function $(t150) {
  t150.isProjectionDirty = t150.isSharedProjectionDirty = t150.isTransformDirty = false;
}
function q2(t150) {
  t150.clearSnapshot();
}
function J(t150) {
  t150.clearMeasurements();
}
function K(t150) {
  t150.isLayoutDirty = false;
}
function Q(t150) {
  const { visualElement: e130 } = t150.options;
  e130 && e130.getProps().onBeforeLayoutMeasure && e130.notify("BeforeLayoutMeasure"), t150.resetTransform();
}
function _(t150) {
  t150.finishAnimation(), t150.targetDelta = t150.relativeTarget = t150.target = void 0, t150.isProjectionDirty = true;
}
function tt(t150) {
  t150.resolveTargetDelta();
}
function et(t150) {
  t150.calcProjection();
}
function it(t150) {
  t150.resetRotation();
}
function st(t150) {
  t150.removeLeadSnapshot();
}
function ot(t150, e130, i58) {
  t150.translate = o68(e130.translate, 0, i58), t150.scale = o68(e130.scale, 1, i58), t150.origin = e130.origin, t150.originPoint = e130.originPoint;
}
function at(t150, e130, i58, s74) {
  t150.min = o68(e130.min, i58.min, s74), t150.max = o68(e130.max, i58.max, s74);
}
function rt(t150, e130, i58, s74) {
  at(t150.x, e130.x, i58.x, s74), at(t150.y, e130.y, i58.y, s74);
}
function nt(t150) {
  return t150.animationValues && void 0 !== t150.animationValues.opacityExit;
}
var ht = { duration: 0.45, ease: [0.4, 0, 0.1, 1] };
var lt = (t150) => "undefined" != typeof navigator && navigator.userAgent.toLowerCase().includes(t150);
var ct = lt("applewebkit/") && !lt("chrome/") ? Math.round : o57;
function ut(t150) {
  t150.min = ct(t150.min), t150.max = ct(t150.max);
}
function dt(t150, e130, i58) {
  return "position" === t150 || "preserve-aspect" === t150 && !t105(m30(e130), m30(i58), 0.2);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/DocumentProjectionNode.js
var t115 = G2({ attachResizeListener: (e130, t150) => e55(e130, "resize", t150), measureScroll: () => ({ x: document.documentElement.scrollLeft || document.body.scrollLeft, y: document.documentElement.scrollTop || document.body.scrollTop }), checkIsScrollRoot: () => true });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/projection/node/HTMLProjectionNode.js
var r86 = { current: void 0 };
var t116 = G2({ measureScroll: (o123) => ({ x: o123.scrollLeft, y: o123.scrollTop }), defaultParent: () => {
  if (!r86.current) {
    const o123 = new t115({});
    o123.mount(window), o123.setOptions({ layoutScroll: true }), r86.current = o123;
  }
  return r86.current;
}, resetTransform: (o123, e130) => {
  o123.style.transform = void 0 !== e130 ? e130 : "none";
}, checkIsScrollRoot: (o123) => Boolean("fixed" === window.getComputedStyle(o123).position) });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/drag.js
var a42 = { pan: { Feature: i37 }, drag: { Feature: r79, ProjectionNode: t116, MeasureLayout: u16 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/css-variables-conversion.js
var e85 = /var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;
function o86(t150) {
  const n94 = e85.exec(t150);
  if (!n94) return [,];
  const [, r123, o123] = n94;
  return [r123, o123];
}
var i38 = 4;
function s50(e130, c63, a74 = 1) {
  r58(a74 <= i38, `Max CSS variable fallback depth detected in property "${e130}". This may indicate a circular fallback dependency.`);
  const [u29, f22] = o86(e130);
  if (!u29) return;
  const l50 = window.getComputedStyle(c63).getPropertyValue(u29);
  if (l50) {
    const t150 = l50.trim();
    return t99(t150) ? parseFloat(t150) : t150;
  }
  return r42(f22) ? s50(f22, c63, a74 + 1) : f22;
}
function c30(t150, { ...n94 }, e130) {
  const o123 = t150.current;
  if (!(o123 instanceof Element)) return { target: n94, transitionEnd: e130 };
  e130 && (e130 = { ...e130 }), t150.values.forEach((t151) => {
    const n95 = t151.get();
    if (!r42(n95)) return;
    const e131 = s50(n95, o123);
    e131 && t151.set(e131);
  });
  for (const t151 in n94) {
    const i58 = n94[t151];
    if (!r42(i58)) continue;
    const c63 = s50(i58, o123);
    c63 && (n94[t151] = c63, e130 || (e130 = {}), void 0 === e130[t151] && (e130[t151] = i58));
  }
  return { target: n94, transitionEnd: e130 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/unit-conversion.js
var i39 = /* @__PURE__ */ new Set(["width", "height", "top", "left", "right", "bottom", "x", "y", "translateX", "translateY"]);
var l28 = (t150) => i39.has(t150);
var m31 = (t150) => t150 === r43 || t150 === a23;
var p18 = (t150, e130) => parseFloat(t150.split(", ")[e130]);
var f14 = (t150, e130) => (r123, { transform: s74 }) => {
  if ("none" === s74 || !s74) return 0;
  const o123 = s74.match(/^matrix3d\((.+)\)$/);
  if (o123) return p18(o123[1], e130);
  {
    const e131 = s74.match(/^matrix\((.+)\)$/);
    return e131 ? p18(e131[1], t150) : 0;
  }
};
var u18 = /* @__PURE__ */ new Set(["x", "y", "z"]);
var c31 = e47.filter((t150) => !u18.has(t150));
var h9 = { width: ({ x: t150 }, { paddingLeft: e130 = "0", paddingRight: r123 = "0" }) => t150.max - t150.min - parseFloat(e130) - parseFloat(r123), height: ({ y: t150 }, { paddingTop: e130 = "0", paddingBottom: r123 = "0" }) => t150.max - t150.min - parseFloat(e130) - parseFloat(r123), top: (t150, { top: e130 }) => parseFloat(e130), left: (t150, { left: e130 }) => parseFloat(e130), bottom: ({ y: t150 }, { top: e130 }) => parseFloat(e130) + (t150.max - t150.min), right: ({ x: t150 }, { left: e130 }) => parseFloat(e130) + (t150.max - t150.min), x: f14(4, 13), y: f14(5, 14) };
h9.translateX = h9.x, h9.translateY = h9.y;
var d19 = (r123, a74, i58 = {}, p35 = {}) => {
  a74 = { ...a74 }, p35 = { ...p35 };
  const f22 = Object.keys(a74).filter(l28);
  let u29 = [], d44 = false;
  const g18 = [];
  if (f22.forEach((o123) => {
    const l50 = r123.getValue(o123);
    if (!r123.hasValue(o123)) return;
    let f23 = i58[o123], h21 = u11(f23);
    const y7 = a74[o123];
    let x13;
    if (r51(y7)) {
      const t150 = y7.length, r124 = null === y7[0] ? 1 : 0;
      f23 = y7[r124], h21 = u11(f23);
      for (let o124 = r124; o124 < t150 && null !== y7[o124]; o124++) x13 ? r58(u11(y7[o124]) === x13, "All keyframes must be of the same type") : (x13 = u11(y7[o124]), r58(x13 === h21 || m31(h21) && m31(x13), "Keyframes must be of the same dimension as the current value"));
    } else x13 = u11(y7);
    if (h21 !== x13) if (m31(h21) && m31(x13)) {
      const t150 = l50.get();
      "string" == typeof t150 && l50.set(parseFloat(t150)), "string" == typeof y7 ? a74[o123] = parseFloat(y7) : Array.isArray(y7) && x13 === a23 && (a74[o123] = y7.map(parseFloat));
    } else (null == h21 ? void 0 : h21.transform) && (null == x13 ? void 0 : x13.transform) && (0 === f23 || 0 === y7) ? 0 === f23 ? l50.set(x13.transform(f23)) : a74[o123] = h21.transform(y7) : (d44 || (u29 = function(t150) {
      const e130 = [];
      return c31.forEach((r124) => {
        const s74 = t150.getValue(r124);
        void 0 !== s74 && (e130.push([r124, s74.get()]), s74.set(r124.startsWith("scale") ? 1 : 0));
      }), e130.length && t150.render(), e130;
    }(r123), d44 = true), g18.push(o123), p35[o123] = void 0 !== p35[o123] ? p35[o123] : a74[o123], l50.jump(y7));
  }), g18.length) {
    const t150 = g18.indexOf("height") >= 0 ? window.pageYOffset : null, e130 = ((t151, e131, r124) => {
      const s74 = e131.measureViewportBox(), o123 = e131.current, a75 = getComputedStyle(o123), { display: n94 } = a75, i59 = {};
      "none" === n94 && e131.setStaticValue("display", t151.display || "block"), r124.forEach((t152) => {
        i59[t152] = h9[t152](s74, a75);
      }), e131.render();
      const l50 = e131.measureViewportBox();
      return r124.forEach((r125) => {
        const s75 = e131.getValue(r125);
        s75 && s75.jump(i59[r125]), t151[r125] = h9[r125](l50, a75);
      }), t151;
    })(a74, r123, g18);
    return u29.length && u29.forEach(([t151, e131]) => {
      r123.getValue(t151).set(e131);
    }), r123.render(), e41 && null !== t150 && window.scrollTo({ top: t150 }), { target: e130, transitionEnd: p35 };
  }
  return { target: a74, transitionEnd: p35 };
};
function g4(t150, e130, r123, s74) {
  return ((t151) => Object.keys(t151).some(l28))(e130) ? d19(t150, e130, r123, s74) : { target: e130, transitionEnd: s74 };
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/utils/parse-dom-variant.js
var n59 = (n94, t150, s74, i58) => {
  const e130 = c30(n94, t150, i58);
  return t150 = e130.target, i58 = e130.transitionEnd, g4(n94, t150, s74, i58);
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/reduced-motion/state.js
var r87 = { current: null };
var n60 = { current: false };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/reduced-motion/index.js
function i40() {
  if (n60.current = true, e41) if (window.matchMedia) {
    const e130 = window.matchMedia("(prefers-reduced-motion)"), r123 = () => r87.current = e130.matches;
    e130.addListener(r123), r123();
  } else r87.current = false;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/utils/motion-values.js
function n61(n94, s74, a74) {
  const { willChange: r123 } = s74;
  for (const l50 in s74) {
    const m62 = s74[l50], u29 = a74[l50];
    if (o49(m62)) n94.addValue(l50, m62), t98(r123) && r123.add(l50), o75("10.16.1" === m62.version, `Attempting to mix Framer Motion versions ${m62.version} with 10.16.1 may not work as expected.`);
    else if (o49(u29)) n94.addValue(l50, h8(m62, { owner: n94 })), t98(r123) && r123.remove(l50);
    else if (u29 !== m62) if (n94.hasValue(l50)) {
      const e130 = n94.getValue(l50);
      !e130.hasAnimated && e130.set(m62);
    } else {
      const e130 = n94.getStaticValue(l50);
      n94.addValue(l50, h8(void 0 !== e130 ? e130 : m62, { owner: n94 }));
    }
  }
  for (const e130 in a74) void 0 === s74[e130] && n94.removeValue(e130);
  return s74;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/store.js
var e86 = /* @__PURE__ */ new WeakMap();

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/VisualElement.js
var b5 = Object.keys(o44);
var S = b5.length;
var T = ["AnimationStart", "AnimationComplete", "Update", "BeforeLayoutMeasure", "LayoutMeasure", "LayoutAnimationStart", "LayoutAnimationComplete"];
var P = e43.length;
var w5 = class {
  constructor({ parent: t150, props: e130, presenceContext: s74, reducedMotionConfig: i58, visualState: r123 }, o123 = {}) {
    this.current = null, this.children = /* @__PURE__ */ new Set(), this.isVariantNode = false, this.isControllingVariants = false, this.shouldReduceMotion = null, this.values = /* @__PURE__ */ new Map(), this.features = {}, this.valueSubscriptions = /* @__PURE__ */ new Map(), this.prevMotionValues = {}, this.events = {}, this.propEventSubscriptions = {}, this.notifyUpdate = () => this.notify("Update", this.latestValues), this.render = () => {
      this.current && (this.triggerBuild(), this.renderInstance(this.current, this.renderState, this.props.style, this.projection));
    }, this.scheduleRender = () => o58.render(this.render, false, true);
    const { latestValues: n94, renderState: a74 } = r123;
    this.latestValues = n94, this.baseTarget = { ...n94 }, this.initialValues = e130.initial ? { ...n94 } : {}, this.renderState = a74, this.parent = t150, this.props = e130, this.presenceContext = s74, this.depth = t150 ? t150.depth + 1 : 0, this.reducedMotionConfig = i58, this.options = o123, this.isControllingVariants = r36(e130), this.isVariantNode = t62(e130), this.isVariantNode && (this.variantChildren = /* @__PURE__ */ new Set()), this.manuallyAnimateOnMount = Boolean(t150 && t150.current);
    const { willChange: h21, ...p35 } = this.scrapeMotionValuesFromProps(e130, {});
    for (const t151 in p35) {
      const e131 = p35[t151];
      void 0 !== n94[t151] && o49(e131) && (e131.set(n94[t151], false), t98(h21) && h21.add(t151));
    }
  }
  scrapeMotionValuesFromProps(t150, e130) {
    return {};
  }
  mount(t150) {
    this.current = t150, e86.set(t150, this), this.projection && !this.projection.instance && this.projection.mount(t150), this.parent && this.isVariantNode && !this.isControllingVariants && (this.removeFromVariantTree = this.parent.addVariantChild(this)), this.values.forEach((t151, e130) => this.bindToMotionValue(e130, t151)), n60.current || i40(), this.shouldReduceMotion = "never" !== this.reducedMotionConfig && ("always" === this.reducedMotionConfig || r87.current), o75(true !== this.shouldReduceMotion, "You have Reduced Motion enabled on your device. Animations may not appear as expected."), this.parent && this.parent.children.add(this), this.update(this.props, this.presenceContext);
  }
  unmount() {
    e86.delete(this.current), this.projection && this.projection.unmount(), r53(this.notifyUpdate), r53(this.render), this.valueSubscriptions.forEach((t150) => t150()), this.removeFromVariantTree && this.removeFromVariantTree(), this.parent && this.parent.children.delete(this);
    for (const t150 in this.events) this.events[t150].clear();
    for (const t150 in this.features) this.features[t150].unmount();
    this.current = null;
  }
  bindToMotionValue(t150, e130) {
    const s74 = t67.has(t150), i58 = e130.on("change", (e131) => {
      this.latestValues[t150] = e131, this.props.onUpdate && o58.update(this.notifyUpdate, false, true), s74 && this.projection && (this.projection.isTransformDirty = true);
    }), r123 = e130.on("renderRequest", this.scheduleRender);
    this.valueSubscriptions.set(t150, () => {
      i58(), r123();
    });
  }
  sortNodePosition(t150) {
    return this.current && this.sortInstanceNodePosition && this.type === t150.type ? this.sortInstanceNodePosition(this.current, t150.current) : 0;
  }
  loadFeatures({ children: s74, ...r123 }, o123, n94, a74) {
    let h21, u29;
    if (n94 && o123) {
      const s75 = "You have rendered a `motion` component within a `LazyMotion` component. This will break tree shaking. Import and render a `m` component instead.";
      r123.ignoreStrict ? e61(false, s75) : r58(false, s75);
    }
    for (let t150 = 0; t150 < S; t150++) {
      const e130 = b5[t150], { isEnabled: s75, Feature: i58, ProjectionNode: o124, MeasureLayout: n95 } = o44[e130];
      o124 && (h21 = o124), s75(r123) && (!this.features[e130] && i58 && (this.features[e130] = new i58(this)), n95 && (u29 = n95));
    }
    if (!this.projection && h21) {
      this.projection = new h21(this.latestValues, this.parent && this.parent.projection);
      const { layoutId: t150, layout: e130, drag: s75, dragConstraints: o124, layoutScroll: n95, layoutRoot: u30 } = r123;
      this.projection.setOptions({ layoutId: t150, layout: e130, alwaysMeasureLayout: Boolean(s75) || o124 && t59(o124), visualElement: this, scheduleRender: () => this.scheduleRender(), animationType: "string" == typeof e130 ? e130 : "both", initialPromotionConfig: a74, layoutScroll: n95, layoutRoot: u30 });
    }
    return u29;
  }
  updateFeatures() {
    for (const t150 in this.features) {
      const e130 = this.features[t150];
      e130.isMounted ? e130.update() : (e130.mount(), e130.isMounted = true);
    }
  }
  triggerBuild() {
    this.build(this.renderState, this.latestValues, this.options, this.props);
  }
  measureViewportBox() {
    return this.current ? this.measureInstanceViewportBox(this.current, this.props) : o79();
  }
  getStaticValue(t150) {
    return this.latestValues[t150];
  }
  setStaticValue(t150, e130) {
    this.latestValues[t150] = e130;
  }
  makeTargetAnimatable(t150, e130 = true) {
    return this.makeTargetAnimatableFromInstance(t150, this.props, e130);
  }
  update(t150, e130) {
    (t150.transformTemplate || this.props.transformTemplate) && this.scheduleRender(), this.prevProps = this.props, this.props = t150, this.prevPresenceContext = this.presenceContext, this.presenceContext = e130;
    for (let e131 = 0; e131 < T.length; e131++) {
      const s74 = T[e131];
      this.propEventSubscriptions[s74] && (this.propEventSubscriptions[s74](), delete this.propEventSubscriptions[s74]);
      const i58 = t150["on" + s74];
      i58 && (this.propEventSubscriptions[s74] = this.on(s74, i58));
    }
    this.prevMotionValues = n61(this, this.scrapeMotionValuesFromProps(t150, this.prevProps), this.prevMotionValues), this.handleChildMotionValue && this.handleChildMotionValue();
  }
  getProps() {
    return this.props;
  }
  getVariant(t150) {
    return this.props.variants ? this.props.variants[t150] : void 0;
  }
  getDefaultTransition() {
    return this.props.transition;
  }
  getTransformPagePoint() {
    return this.props.transformPagePoint;
  }
  getClosestVariantNode() {
    return this.isVariantNode ? this : this.parent ? this.parent.getClosestVariantNode() : void 0;
  }
  getVariantContext(t150 = false) {
    if (t150) return this.parent ? this.parent.getVariantContext() : void 0;
    if (!this.isControllingVariants) {
      const t151 = this.parent && this.parent.getVariantContext() || {};
      return void 0 !== this.props.initial && (t151.initial = this.props.initial), t151;
    }
    const e130 = {};
    for (let t151 = 0; t151 < P; t151++) {
      const s74 = e43[t151], i58 = this.props[s74];
      (r35(i58) || false === i58) && (e130[s74] = i58);
    }
    return e130;
  }
  addVariantChild(t150) {
    const e130 = this.getClosestVariantNode();
    if (e130) return e130.variantChildren && e130.variantChildren.add(t150), () => e130.variantChildren.delete(t150);
  }
  addValue(t150, e130) {
    e130 !== this.values.get(t150) && (this.removeValue(t150), this.bindToMotionValue(t150, e130)), this.values.set(t150, e130), this.latestValues[t150] = e130.get();
  }
  removeValue(t150) {
    this.values.delete(t150);
    const e130 = this.valueSubscriptions.get(t150);
    e130 && (e130(), this.valueSubscriptions.delete(t150)), delete this.latestValues[t150], this.removeValueFromRenderState(t150, this.renderState);
  }
  hasValue(t150) {
    return this.values.has(t150);
  }
  getValue(t150, e130) {
    if (this.props.values && this.props.values[t150]) return this.props.values[t150];
    let s74 = this.values.get(t150);
    return void 0 === s74 && void 0 !== e130 && (s74 = h8(e130, { owner: this }), this.addValue(t150, s74)), s74;
  }
  readValue(t150) {
    var e130;
    return void 0 === this.latestValues[t150] && this.current ? null !== (e130 = this.getBaseTargetFromProps(this.props, t150)) && void 0 !== e130 ? e130 : this.readValueFromInstance(this.current, t150, this.options) : this.latestValues[t150];
  }
  setBaseTarget(t150, e130) {
    this.baseTarget[t150] = e130;
  }
  getBaseTarget(t150) {
    var e130;
    const { initial: s74 } = this.props, i58 = "string" == typeof s74 || "object" == typeof s74 ? null === (e130 = t78(this.props, s74)) || void 0 === e130 ? void 0 : e130[t150] : void 0;
    if (s74 && void 0 !== i58) return i58;
    const r123 = this.getBaseTargetFromProps(this.props, t150);
    return void 0 === r123 || o49(r123) ? void 0 !== this.initialValues[t150] && void 0 === i58 ? void 0 : this.baseTarget[t150] : r123;
  }
  on(t150, e130) {
    return this.events[t150] || (this.events[t150] = new i34()), this.events[t150].add(e130);
  }
  notify(t150, ...e130) {
    this.events[t150] && this.events[t150].notify(...e130);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/DOMVisualElement.js
var n62 = class extends w5 {
  sortInstanceNodePosition(t150, e130) {
    return 2 & t150.compareDocumentPosition(e130) ? 1 : -1;
  }
  getBaseTargetFromProps(t150, e130) {
    return t150.style ? t150.style[e130] : void 0;
  }
  removeValueFromRenderState(t150, { vars: e130, style: r123 }) {
    delete e130[t150], delete r123[t150];
  }
  makeTargetAnimatableFromInstance({ transition: s74, transitionEnd: n94, ...o123 }, { transformValues: i58 }, a74) {
    let m62 = c23(o123, s74 || {}, this);
    if (i58 && (n94 && (n94 = i58(n94)), o123 && (o123 = i58(o123)), m62 && (m62 = i58(m62))), a74) {
      m24(this, o123, m62);
      const t150 = n59(this, o123, m62, n94);
      n94 = t150.transitionEnd, o123 = t150.target;
    }
    return { transition: s74, transitionEnd: n94, ...o123 };
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/html/HTMLVisualElement.js
function m32(t150) {
  return window.getComputedStyle(t150);
}
var a43 = class extends n62 {
  readValueFromInstance(t150, s74) {
    if (t67.has(s74)) {
      const t151 = t96(s74);
      return t151 && t151.default || 0;
    }
    {
      const e130 = m32(t150), o123 = (t68(s74) ? e130.getPropertyValue(s74) : e130[s74]) || 0;
      return "string" == typeof o123 ? o123.trim() : o123;
    }
  }
  measureInstanceViewportBox(t150, { transformPagePoint: r123 }) {
    return r78(t150, r123);
  }
  build(r123, e130, s74, o123) {
    i21(r123, e130, s74, o123.transformTemplate);
  }
  scrapeMotionValuesFromProps(t150, r123) {
    return i25(t150, r123);
  }
  handleChildMotionValue() {
    this.childSubscription && (this.childSubscription(), delete this.childSubscription);
    const { children: t150 } = this.props;
    o49(t150) && (this.childSubscription = t150.on("change", (t151) => {
      this.current && (this.current.textContent = `${t151}`);
    }));
  }
  renderInstance(t150, r123, e130, s74) {
    t77(t150, r123, e130, s74);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/svg/SVGVisualElement.js
var l29 = class extends n62 {
  constructor() {
    super(...arguments), this.isSVGTag = false;
  }
  getBaseTargetFromProps(t150, r123) {
    return t150[r123];
  }
  readValueFromInstance(t150, r123) {
    if (t67.has(r123)) {
      const t151 = t96(r123);
      return t151 && t151.default || 0;
    }
    return r123 = e51.has(r123) ? r123 : e50(r123), t150.getAttribute(r123);
  }
  measureInstanceViewportBox() {
    return o79();
  }
  scrapeMotionValuesFromProps(r123, s74) {
    return s32(r123, s74);
  }
  build(t150, r123, e130, o123) {
    i24(t150, r123, e130, this.isSVGTag, o123.transformTemplate);
  }
  renderInstance(t150, r123, s74, e130) {
    s31(t150, r123, s74, e130);
  }
  mount(t150) {
    this.isSVGTag = o55(t150.tagName), super.mount(t150);
  }
};

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/create-visual-element.js
var t117 = (t150, n94) => t65(t150) ? new l29(n94, { enableHardwareAcceleration: false }) : new a43(n94, { enableHardwareAcceleration: true });

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/motion/features/layout.js
var t118 = { layout: { ProjectionNode: t116, MeasureLayout: u16 } };

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/render/dom/motion.js
var f15 = { ...o76, ...t86, ...a42, ...t118 };
var a44 = e45((o123, r123) => n33(o123, r123, f15, t117));

// node_modules/@rewind-ui/core/dist/components/Calendar/Calendar.js
var z4 = { bordered: true, borderStyle: "solid", dayFormat: "EEEEE", disabledWeekends: true, horizontalBorders: true, radius: "md", shadow: "sm", size: "md", verticalBorders: true };
var B = (0, import_react45.forwardRef)((t150, B2) => {
  const C3 = H("Calendar"), [L, M3] = (0, import_react45.useState)("calendar"), $2 = Object.assign(Object.assign({}, z4), t150), { bordered: E3, borderStyle: R2, children: T2, className: W2 = "", value: A2, dayFormat: F2, blueDates: P3 = [], redDates: I = [], greenDates: Y2 = [], yellowDates: G3 = [], purpleDates: V = [], disabledDates: q3 = [], disabledWeekends: H3, horizontalBorders: J2, locale: K2 = r21, maxDate: Q2, minDate: U, radius: X2, shadow: Z2, size: ee, verticalBorders: ae, onChange: se } = $2, de = __rest($2, ["bordered", "borderStyle", "children", "className", "value", "dayFormat", "blueDates", "redDates", "greenDates", "yellowDates", "purpleDates", "disabledDates", "disabledWeekends", "horizontalBorders", "locale", "maxDate", "minDate", "radius", "shadow", "size", "verticalBorders", "onChange"]), [oe, re] = (0, import_react45.useState)(A2), [te, ie] = (0, import_react45.useState)(A2 || /* @__PURE__ */ new Date()), ne = t17(t150.id);
  (0, import_react45.useEffect)(() => {
    if (A2 && t51(A2)) return re(A2), void ie(A2);
    re(null);
  }, [A2]), (0, import_react45.useEffect)(() => {
    se && se(oe);
  }, [oe]);
  const { weekRows: le, weekdays: me } = p6({ month: te, disabledWeekends: H3, disabledDates: q3, minDate: U, maxDate: Q2, blueDates: P3, redDates: I, greenDates: Y2, yellowDates: G3, purpleDates: V }), ce = s21(te), be = n20(te), ue = (0, import_jsx_runtime31.jsxs)("div", Object.assign({ className: C3.nav() }, { children: [(0, import_jsx_runtime31.jsx)("button", Object.assign({ "aria-label": "year" === L ? "Previous 12 years" : "Previous month", type: "button", className: C3.navButton({ radius: X2, size: ee, bordered: E3, borderStyle: R2, shadow: Z2 }), disabled: U && t46(t39(te), U), onClick: () => {
    ie("year" === L ? o31(te, 12) : o32(te, 1));
  } }, { children: (0, import_jsx_runtime31.jsx)(e34, {}) })), (0, import_jsx_runtime31.jsxs)("div", Object.assign({ className: C3.navMonth() }, { children: [(0, import_jsx_runtime31.jsx)("button", Object.assign({ type: "button", "aria-label": "Select month", onClick: () => M3("month" === L ? "calendar" : "month") }, { children: (0, import_jsx_runtime31.jsx)("time", Object.assign({ dateTime: k(te, "LLLL") }, { children: k(te, "LLLL", { locale: K2 }) })) })), (0, import_jsx_runtime31.jsx)("button", Object.assign({ type: "button", "aria-label": "Select year", onClick: () => M3("year" === L ? "calendar" : "year") }, { children: (0, import_jsx_runtime31.jsx)("time", Object.assign({ dateTime: k(te, "yyyy") }, { children: k(te, "yyyy", { locale: K2 }) })) }))] })), (0, import_jsx_runtime31.jsx)("button", Object.assign({ "aria-label": "year" === L ? "Next 12 years" : "Next month", type: "button", className: C3.navButton({ radius: X2, size: ee, bordered: E3, borderStyle: R2, shadow: Z2 }), disabled: Q2 && t47(t42(te), Q2), onClick: () => {
    ie("year" === L ? o30(te, 12) : i15(te, 1));
  } }, { children: (0, import_jsx_runtime31.jsx)(e35, {}) }))] })), he = (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: C3.head() }, { children: me.map((e130, a74) => (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: C3.weekDay() }, { children: k(e130, F2, { locale: K2 }) }), `weekday-${a74}`)) })), ye = (0, import_jsx_runtime31.jsx)(import_jsx_runtime31.Fragment, { children: ce.map((e130, a74) => (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: C3.calendarRow({ borderStyle: R2, verticalBorders: ae }) }, { children: e130.map((e131, a75) => (0, import_jsx_runtime31.jsx)("button", Object.assign({ onClick: () => {
    ie(e131), M3("year");
  }, className: C3.calendarCell({ color: "white", size: ee }) }, { children: k(e131, "LLLL", { locale: K2 }) }), `month-${a75}`)) }), `month-row-${a74}`)) }), fe = (0, import_jsx_runtime31.jsx)(import_jsx_runtime31.Fragment, { children: be.map((e130, a74) => (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: C3.calendarRow({ borderStyle: R2, verticalBorders: ae }) }, { children: e130.map((e131, a75) => (0, import_jsx_runtime31.jsx)("button", Object.assign({ onClick: () => {
    ie(e131), M3("calendar");
  }, className: C3.calendarCell({ color: "white", size: ee }) }, { children: k(e131, "yyyy", { locale: K2 }) }), `year-${a75}`)) }), `year-row-${a74}`)) }), pe = (0, import_jsx_runtime31.jsx)(import_jsx_runtime31.Fragment, { children: le.map((e130, d44) => (0, import_jsx_runtime31.jsx)("div", Object.assign({ className: C3.calendarRow({ borderStyle: R2, verticalBorders: ae }) }, { children: e130.map((e131, d45) => (0, import_jsx_runtime31.jsxs)("button", Object.assign({ onClick: () => {
    e131.disabled || (re(e131.value), ie(t39(e131.value)));
  }, disabled: e131.disabled, className: C3.calendarCell({ isToday: i17(e131.value), isSameDay: oe && t51(oe) && t45(e131.value, oe), isSameMonth: r30(e131.value, te), color: e131.color, size: ee }) }, { children: [oe && t51(oe) && t45(e131.value, oe) && (0, import_jsx_runtime31.jsx)(a44.div, { layoutId: `${ne}-day-thumb`, className: C3.thumb({ size: ee }), transition: { duration: 0.25, type: "spring" } }), (0, import_jsx_runtime31.jsxs)("time", Object.assign({ className: C3.dayLabel(), dateTime: k(e131.value, "MM/dd/yyyy") }, { children: [" ", e131.value.getDate()] }))] }), `day-${e131.value.getDate()}-${d45}`)) }), `week-${d44}`)) });
  return (0, import_jsx_runtime31.jsxs)("div", Object.assign({ id: ne, ref: B2, className: C3.base({ className: W2, size: ee }) }, de, { children: [ue, "calendar" === L && he, (0, import_jsx_runtime31.jsxs)("div", Object.assign({ className: C3.calendar({ bordered: E3, borderStyle: R2, className: W2, radius: X2, shadow: Z2, horizontalBorders: J2 }) }, { children: ["calendar" === L && pe, "month" === L && ye, "year" === L && fe] }))] }));
});
B.displayName = "Calendar";

// node_modules/@rewind-ui/core/dist/components/Checkbox/Checkbox.js
var import_jsx_runtime32 = __toESM(require_jsx_runtime());
var import_react46 = __toESM(require_react());
var c32 = { color: "dark", disabled: false, radius: "md", size: "md", tone: "solid", withRing: true };
var o87 = (0, import_react46.forwardRef)((r123, o123) => {
  const m62 = H("Checkbox"), n94 = Object.assign(Object.assign({}, c32), r123), { children: b12, className: N2 = "", color: p35, disabled: h21, radius: g18, size: j9, tone: u29, withRing: f22, label: C3, labelClassName: O6 = "", description: x13, descriptionClassName: z6 = "", error: v8, errorClassName: w12 = "" } = n94, k3 = __rest(n94, ["children", "className", "color", "disabled", "radius", "size", "tone", "withRing", "label", "labelClassName", "description", "descriptionClassName", "error", "errorClassName"]), y7 = t17(r123.id), R2 = v8 ? "invalid" : "valid", $2 = (0, import_react46.useMemo)(() => twMerge(m62.base({ className: N2, color: p35, radius: g18, size: j9, tone: u29, validation: R2, withRing: f22 })), [m62, p35, u29, j9, g18, R2, f22, N2]);
  return (0, import_jsx_runtime32.jsxs)("div", Object.assign({ className: "flex items-center" }, { children: [(0, import_jsx_runtime32.jsx)("input", Object.assign({ id: y7, ref: o123, type: "checkbox", "aria-labelledby": `${y7}-label`, className: $2, disabled: h21 }, k3)), (0, import_jsx_runtime32.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime32.jsx)("label", Object.assign({ id: `${y7}-label`, htmlFor: y7, className: twMerge(m62.label({ disabled: h21, size: j9, className: O6 })) }, { children: C3 })), x13 && (0, import_jsx_runtime32.jsx)("span", Object.assign({ className: twMerge(m62.description({ disabled: h21, size: j9, className: z6 })) }, { children: x13 })), v8 && (0, import_jsx_runtime32.jsx)("span", Object.assign({ className: twMerge(m62.error({ disabled: h21, size: j9, className: w12 })) }, { children: v8 }))] }))] }));
});
o87.displayName = "Checkbox";

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var import_jsx_runtime37 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.types.js
var e87;
!function(e130) {
  e130.register = "REGISTER", e130.reset = "RESET", e130.single_select = "SINGLE_SELECT", e130.multi_select = "MULTI_SELECT", e130.init_multi_select = "INIT_MULTI_SELECT", e130.search_start = "SEARCH_START", e130.search_reset = "SEARCH_RESET", e130.remove_last = "REMOVE_LAST";
}(e87 || (e87 = {}));

// node_modules/@rewind-ui/core/dist/components/Combobox/combobox.reducer.js
var a47 = (a74, s74) => {
  switch (s74.type) {
    case e87.register:
      return Object.assign(Object.assign({}, a74), { options: [...a74.options, { label: s74.payload.label, value: s74.payload.value }] });
    case e87.single_select:
      if (!s74.payload.omitOnChange && a74.onChange && a74.onChange(s74.payload.value), void 0 === s74.payload.value) return a74;
      const t150 = a74.selectedOptions.find((e130) => e130.value === s74.payload.value), n94 = a74.options.find((e130) => e130.value === s74.payload.value);
      return Object.assign(Object.assign({}, a74), { search: "", searching: false, selectedOptions: t150 && s74.payload.toggle ? [] : [n94] });
    case e87.multi_select:
      const l50 = a74.selectedOptions.find((e130) => e130.value === s74.payload.value);
      let o123 = a74.selectedOptions.filter((e130) => e130.value !== (null == l50 ? void 0 : l50.value));
      if (l50 && s74.payload.toggle) return !s74.payload.omitOnChange && a74.onChange && a74.onChange(o123.map((e130) => e130.value)), Object.assign(Object.assign({}, a74), { search: "", searching: false, selectedOptions: o123 });
      if (l50 && !s74.payload.toggle) return a74;
      const i58 = a74.options.find((e130) => e130.value === s74.payload.value);
      return o123 = [...a74.selectedOptions, i58], !s74.payload.omitOnChange && a74.onChange && a74.onChange(o123.map((e130) => e130.value)), Object.assign(Object.assign({}, a74), { search: "", searching: false, selectedOptions: o123 });
    case e87.init_multi_select:
      const c63 = a74.selectedOptions.map((e130) => e130.value).sort(), r123 = s74.payload.values.sort(), g18 = c63.length === r123.length;
      if (r123.every((e130, a75) => c63[a75] === e130) && g18) return a74;
      const p35 = a74.options.filter((e130) => s74.payload.values.includes(e130.value));
      return Object.assign(Object.assign({}, a74), { selectedOptions: p35 });
    case e87.remove_last:
      if (a74.onChange) {
        const e130 = a74.selectedOptions.slice(0, -1).map((e131) => e131.value);
        a74.onChange(a74.multiple ? e130 : e130[0]);
      }
      return Object.assign(Object.assign({}, a74), { search: "", searching: false, selectedOptions: a74.selectedOptions.slice(0, -1) });
    case e87.reset:
      return a74.onChange && a74.onChange(null), Object.assign(Object.assign({}, a74), { search: "", searching: false, selectedOptions: [] });
    case e87.search_start:
      return Object.assign(Object.assign({}, a74), { search: s74.payload.search, searching: true });
    case e87.search_reset:
      return Object.assign(Object.assign({}, a74), { search: "", searching: false });
    default:
      return a74;
  }
};

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxGroup/ComboboxGroup.js
var import_jsx_runtime33 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.context.js
var [e88, t121] = i8();

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxGroup/ComboboxGroup.js
var import_react48 = __toESM(require_react());
var g5 = { weight: "normal" };
var u19 = (0, import_react48.forwardRef)((n94, u29) => {
  const b12 = H("Combobox"), f22 = Object.assign(Object.assign({}, g5), n94), { children: j9, className: x13, heading: N2, weight: O6 } = f22, w12 = __rest(f22, ["children", "className", "heading", "weight"]), C3 = t17(n94.id), v8 = (0, import_react48.useRef)(null), z6 = useMergeRefs([v8, u29 || null]), [y7, A2] = (0, import_react48.useState)(false), { size: G3, state: I, mode: P3 } = t121(), [k3, q3] = (0, import_react48.useState)(null), [B2, D] = (0, import_react48.useState)(""), [E3, F2] = (0, import_react48.useState)(0);
  return (0, import_react48.useEffect)(() => {
    F2(0), q3(import_react48.Children.map(j9, (e130) => (0, import_react48.cloneElement)(e130, Object.assign(Object.assign({}, e130.props), { ref: (e131) => {
      e131 && "true" === (null == e131 ? void 0 : e131.getAttribute("aria-hidden")) && F2((e132) => e132 + 1);
    } }))));
  }, [I.search]), (0, import_react48.useEffect)(() => {
    A2(E3 === import_react48.Children.count(j9));
  }, [j9, E3]), (0, import_react48.useEffect)(() => {
    D(b12.group({ className: x13, hidden: y7, size: G3, mode: P3, weight: O6 }));
  }, [x13, y7, P3, G3, b12, O6]), (0, import_jsx_runtime33.jsxs)(import_jsx_runtime33.Fragment, { children: [(0, import_jsx_runtime33.jsx)("div", Object.assign({ id: C3, ref: z6, "aria-hidden": y7, className: B2 }, w12, { children: N2 })), k3] });
});
u19.displayName = "ComboboxGroup";

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxOption/ComboboxOption.js
var import_jsx_runtime35 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/helpers/text-normalize.utility.js
function r89(r123) {
  return r123.trim().normalize("NFD").replace(new RegExp("\\p{Diacritic}", "gu"), "").toLowerCase();
}

// node_modules/@rewind-ui/core/dist/icons/Check.js
var import_jsx_runtime34 = __toESM(require_jsx_runtime());
var s53 = ({ className: s74 }) => (0, import_jsx_runtime34.jsx)("svg", Object.assign({ className: s74, xmlns: "http://www.w3.org/2000/svg", width: "32", height: "32", fill: "currentColor", viewBox: "0 0 256 256" }, { children: (0, import_jsx_runtime34.jsx)("path", { d: "M229.66,77.66l-128,128a8,8,0,0,1-11.32,0l-56-56a8,8,0,0,1,11.32-11.32L96,188.69,218.34,66.34a8,8,0,0,1,11.32,11.32Z" }) }));

// node_modules/@rewind-ui/core/dist/components/Combobox/ComboboxOption/ComboboxOption.js
var import_react49 = __toESM(require_react());
var c34 = (0, import_react49.forwardRef)((n94, c63) => {
  const p35 = H("ComboboxOption"), { value: m62, label: u29, description: b12, media: h21 } = n94, y7 = !!n94.disabled, g18 = t17(n94.id), { dispatch: f22, externalSearch: j9, mode: x13, multiple: C3, optionColor: O6, radius: v8, size: N2, state: V } = t121(), z6 = r89(V.search || ""), _2 = r89(u29 || ""), k3 = r89(b12 || ""), A2 = !j9 && !_2.includes(z6) && !k3.includes(z6), I = -1 !== V.selectedOptions.findIndex((e130) => e130.value === m62);
  (0, import_react49.useEffect)(() => {
    f22({ type: e87.register, payload: { value: m62, label: u29 } }), V.initialValue && ("string" != typeof V.initialValue || V.initialValue !== m62 ? Array.isArray(V.initialValue) && V.initialValue.includes(m62) && f22({ type: e87.multi_select, payload: { value: m62, omitOnChange: true } }) : f22({ type: e87.single_select, payload: { value: m62, omitOnChange: true } }));
  }, []);
  return (0, import_jsx_runtime35.jsxs)("button", Object.assign({ id: g18, ref: c63, "aria-selected": I, role: "option", className: p35.button({ optionColor: O6, radius: v8, selected: I, hidden: A2, size: N2, mode: x13 }), "aria-hidden": A2, disabled: y7, "aria-disabled": y7, onClick: () => {
    f22(C3 ? { type: e87.multi_select, payload: { value: m62, toggle: true } } : { type: e87.single_select, payload: { value: m62, toggle: true } });
  } }, { children: [(0, import_jsx_runtime35.jsxs)("div", Object.assign({ className: p35.optionWrapper() }, { children: [h21, (0, import_jsx_runtime35.jsxs)("div", Object.assign({ className: p35.infoWrapper() }, { children: [(0, import_jsx_runtime35.jsx)("span", Object.assign({ className: p35.label({ disabled: y7, selected: I }) }, { children: u29 })), (0, import_jsx_runtime35.jsx)("span", Object.assign({ className: p35.description({ disabled: y7, selected: I }) }, { children: b12 }))] }))] })), I && (0, import_jsx_runtime35.jsx)(s53, { className: p35.icon({ size: N2 }) })] }));
});
c34.displayName = "ComboboxOption";

// node_modules/@rewind-ui/core/dist/components/Combobox/use-combobox.hook.js
var import_react51 = __toESM(require_react());
function l31({ offset: l50 = 5 }) {
  const [m62, u29] = (0, import_react51.useState)(false), { x: x13, y: y7, refs: P3, strategy: d44, context: F2 } = useFloating2({ open: m62, onOpenChange: u29, placement: "bottom-start", middleware: [offset3(l50), shift3(), inline3(), flip3()], whileElementsMounted: autoUpdate }), { getReferenceProps: R2, getFloatingProps: b12 } = useInteractions([useFocus(F2), useDismiss(F2, { escapeKey: false, referencePress: false }), useRole(F2, { role: "listbox" })]);
  return (0, import_react51.useMemo)(() => ({ x: x13, y: y7, reference: P3.setReference, floating: P3.setFloating, strategy: d44, getFloatingProps: b12(), getReferenceProps: R2(), open: m62, setOpen: u29 }), [P3, b12, R2, m62, d44, x13, y7]);
}

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.context.js
var [e90, t124] = i8();

// node_modules/@rewind-ui/core/dist/hooks/use-keypress.js
var import_react52 = __toESM(require_react());
function r90(r123, n94, t150) {
  (0, import_react52.useEffect)(() => {
    if (!n94) return;
    const e130 = (e131) => {
      e131.key === r123 && t150 && (t150(e131), "ArrowDown" !== e131.key && "ArrowUp" !== e131.key || e131.preventDefault());
    };
    return document.addEventListener("keydown", e130), () => {
      document.removeEventListener("keydown", e130);
    };
  }, [r123, t150, n94]);
}

// node_modules/@rewind-ui/core/dist/hooks/use-vertical-arrows.hook.js
function o89(o123 = [], i58 = true) {
  r90("ArrowDown", i58, () => {
    var n94, e130;
    if (!i58 || !(null == o123 ? void 0 : o123.length)) return;
    const t150 = document.activeElement;
    if (!t150) return void (null === (n94 = o123[0]) || void 0 === n94 || n94.focus());
    const d44 = o123.findIndex((n95) => n95.id === t150.id), r123 = o123[d44 + 1] ? d44 + 1 : 0;
    null === (e130 = o123[r123]) || void 0 === e130 || e130.focus();
  }), r90("ArrowUp", i58, () => {
    var n94, e130;
    if (!i58 || !(null == o123 ? void 0 : o123.length)) return;
    const t150 = document.activeElement;
    if (!t150) return void (null === (n94 = o123[0]) || void 0 === n94 || n94.focus());
    const d44 = o123.findIndex((n95) => n95.id === t150.id), r123 = o123[d44 - 1] ? d44 - 1 : o123.length - 1;
    null === (e130 = o123[r123]) || void 0 === e130 || e130.focus();
  });
}

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var import_react54 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/icons/CaretUpDown.js
var import_jsx_runtime36 = __toESM(require_jsx_runtime());
var l32 = ({ className: l50 }) => (0, import_jsx_runtime36.jsx)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", className: l50, width: "32", height: "32", fill: "#000000", viewBox: "0 0 256 256" }, { children: (0, import_jsx_runtime36.jsx)("path", { d: "M181.66,170.34a8,8,0,0,1,0,11.32l-48,48a8,8,0,0,1-11.32,0l-48-48a8,8,0,0,1,11.32-11.32L128,212.69l42.34-42.35A8,8,0,0,1,181.66,170.34Zm-96-84.68L128,43.31l42.34,42.35a8,8,0,0,0,11.32-11.32l-48-48a8,8,0,0,0-11.32,0l-48,48A8,8,0,0,0,85.66,85.66Z" }) }));

// node_modules/@rewind-ui/core/dist/components/Combobox/Combobox.js
var R = { clearable: true, closeOnEscape: true, closeOnSelect: true, color: "dark", disabled: false, loading: false, maxHeight: 250, minWidth: 250, mode: "spacey", multiple: false, offset: 5, optionColor: "gray", radius: "lg", searchable: true, shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var E2 = (0, import_react54.forwardRef)((i58, n94) => {
  var y7, E3, S3, _2;
  const W2 = H("Combobox"), P3 = Object.assign(Object.assign(Object.assign(Object.assign({}, R), t124()), t28()), i58), { children: B2, className: G3, clearable: L, closeOnEscape: $2, closeOnSelect: A2, color: H3, controlId: F2, initialValue: V, leftIcon: q3, loading: D, maxHeight: M3, minWidth: T2, mode: U, multiple: X2, offset: J2, onChange: K2, onSearch: Q2, optionColor: Y2, placeholder: Z2, radius: ee, searchable: oe, shadow: ae, size: te, tone: se, validation: le, value: ie, withRing: ne } = P3, re = __rest(P3, ["children", "className", "clearable", "closeOnEscape", "closeOnSelect", "color", "controlId", "initialValue", "leftIcon", "loading", "maxHeight", "minWidth", "mode", "multiple", "offset", "onChange", "onSearch", "optionColor", "placeholder", "radius", "searchable", "shadow", "size", "tone", "validation", "value", "withRing"]), ce = t17(i58.id), de = (0, import_react54.useId)(), pe = t17(F2), me = i58.disabled || D, ue = !!q3, he = true, [be, ge] = (0, import_react54.useReducer)(a47, { multiple: X2 || false, initialValue: V, onChange: K2, options: [], selectedOptions: [], search: "", searching: false }), [fe, ve] = (0, import_react54.useState)([]), [ye, Oe] = (0, import_react54.useState)(""), [je, xe] = (0, import_react54.useState)(W2.base({ className: G3, color: H3, disabled: me, hasLeftIcon: ue, hasRightIcon: he, radius: ee, shadow: ae, size: te, tone: se, validation: le, withRing: ne })), [Ce, Ne] = (0, import_react54.useState)(null), we = (0, import_react54.useRef)(null), ze = (0, import_react54.useRef)(null), Ie = (0, import_react54.useRef)(null), ke = { externalSearch: !!Q2, mode: U, multiple: X2, optionColor: Y2, radius: ee, size: te, state: be, dispatch: ge }, { x: Re, y: Ee, reference: Se, floating: _e, strategy: We, getFloatingProps: Pe, open: Be, setOpen: Ge } = l31({ offset: J2 }), Le = useMergeRefs([Se, we, n94 || null]), $e = useMergeRefs([ze, _e]), Ae = W2.wrapper({ disabled: me }), He = W2.noResults({ size: te }), Fe = q3 ? W2.icon({ tone: se, size: te, className: q3.props.className }) : null, Ve = W2.leftIconWrapper({ size: te }), qe = W2.icon({ tone: se, size: te }), De = W2.rightIconWrapper({ color: H3, size: te });
  (0, import_react54.useEffect)(() => {
    we.current && Ne(we.current.getBoundingClientRect().width);
  }, []), (0, import_react54.useEffect)(() => {
    ie ? X2 && Array.isArray(ie) && ie.length > 0 ? ge({ type: e87.init_multi_select, payload: { values: ie } }) : X2 || "string" != typeof ie || ge({ type: e87.single_select, payload: { value: ie } }) : ge({ type: e87.reset, payload: null });
  }, [ie, X2]), (0, import_react54.useEffect)(() => {
    var e130;
    Be && (null === (e130 = Ie.current) || void 0 === e130 || e130.focus()), Ue();
  }, [Be]), r90("Escape", true, () => {
    ge({ type: e87.search_reset, payload: null }), Be && $2 && Ge(false);
  }), r90("Backspace", Be, () => {
    be.search || ge({ type: e87.remove_last, payload: null });
  }), r90("Enter", true, () => {
    var e130;
    if (!be.searching) return;
    const o123 = null === (e130 = ze.current) || void 0 === e130 ? void 0 : e130.querySelector('button[aria-hidden="false"]:not([aria-disabled="true"])');
    o123 && o123.click();
  }), (0, import_react54.useLayoutEffect)(() => {
    setTimeout(() => {
      ze.current && ve(Array.from(ze.current.querySelectorAll('button[aria-hidden="false"][aria-disabled="false"]')));
    }, 1), Ue();
  }, [be.search]), (0, import_react54.useEffect)(() => {
    Be && A2 && Ge(false);
  }, [be.selectedOptions]), o89(fe, Be);
  const Me = (0, import_jsx_runtime37.jsx)("div", Object.assign({ className: je }, { children: (0, import_jsx_runtime37.jsxs)("div", Object.assign({ className: W2.tagWrapper({ size: te }) }, { children: [X2 && (null === (y7 = be.selectedOptions) || void 0 === y7 ? void 0 : y7.map((e130, t150) => (0, import_jsx_runtime37.jsxs)("div", Object.assign({ className: W2.tag({ disabled: me, radius: ee, size: te, tone: se }) }, { children: [(0, import_jsx_runtime37.jsx)("button", Object.assign({ type: "button", disabled: me, "aria-label": `Remove ${e130.label}`, className: W2.tagButton({ color: H3, disabled: me }), onClick: (o123) => {
    ge({ type: e87.multi_select, payload: { value: e130.value, toggle: true } }), o123.stopPropagation();
  } }, { children: (0, import_jsx_runtime37.jsx)("span", Object.assign({ className: W2.tagButtonIcon() }, { children: "✕" })) })), (0, import_jsx_runtime37.jsx)("span", { children: e130.label })] }), `label-${t150}`))), (!X2 || Be || 0 === be.selectedOptions.length) && (0, import_jsx_runtime37.jsx)("input", { id: pe, ref: Ie, disabled: me, className: W2.input({ size: te }), role: "combobox", "aria-controls": de, "aria-autocomplete": oe ? "both" : "list", "aria-haspopup": "listbox", "aria-expanded": Be, value: be.searching ? be.search : (X2 ? "" : null === (E3 = be.selectedOptions[0]) || void 0 === E3 ? void 0 : E3.label) || "", placeholder: be.selectedOptions.length ? "" : Z2, readOnly: !oe, autoComplete: "off", onBlur: () => ge({ type: e87.search_reset, payload: null }), onChange: (e130) => {
    ge({ type: e87.search_start, payload: { search: e130.target.value } }), Q2 && Q2(e130.target.value), Be || Ge(true);
  }, type: "text" })] })) })), Te = "solid" === se ? "slate" : "gray", Ue = () => {
    ze.current && Oe(W2.list({ size: te, open: Be, mode: U, radius: ee, shadow: ae }));
  };
  return (0, import_react54.useEffect)(() => {
    var e130, o123;
    if (!(null === (e130 = we.current) || void 0 === e130 ? void 0 : e130.dataset)) return;
    const a74 = Object.assign({}, null === (o123 = we.current) || void 0 === o123 ? void 0 : o123.dataset), t150 = a74.hasOwnProperty("hasLeftElement") && "true" === a74.hasLeftElement, s74 = a74.hasOwnProperty("hasRightElement") && "true" === a74.hasRightElement;
    xe(W2.base({ className: G3, color: H3, disabled: me, hasLeftElement: t150, hasLeftIcon: ue, hasRightElement: s74, hasRightIcon: he, radius: ee, shadow: ae, size: te, tone: se, validation: le, withRing: ne }));
  }, [G3, H3, me, ue, he, ee, ae, te, W2, se, le, ne]), (0, import_jsx_runtime37.jsx)(import_jsx_runtime37.Fragment, { children: (0, import_jsx_runtime37.jsxs)("div", Object.assign({ id: ce, ref: Le, className: Ae, onClick: () => {
    var e130;
    Be || me || Ge(true), null === (e130 = null == Ie ? void 0 : Ie.current) || void 0 === e130 || e130.focus();
  } }, re, { children: [q3 && (0, import_jsx_runtime37.jsx)("span", Object.assign({ className: Ve }, { children: (0, import_react54.cloneElement)(q3, { className: Fe }) })), Me, D && (0, import_jsx_runtime37.jsx)("span", Object.assign({ className: De }, { children: (0, import_jsx_runtime37.jsx)(o21, { size: te, color: Te }) })), !D && L && (null === (S3 = be.selectedOptions) || void 0 === S3 ? void 0 : S3.length) > 0 && (0, import_jsx_runtime37.jsx)("button", Object.assign({ "aria-label": "Clear", type: "button", disabled: me, onClick: (e130) => {
    ge({ type: e87.reset, payload: null }), ge({ type: e87.search_reset, payload: null }), e130.stopPropagation();
  }, className: De }, { children: (0, import_jsx_runtime37.jsx)(c8, { className: qe }) })), !D && (!L || 0 === (null === (_2 = be.selectedOptions) || void 0 === _2 ? void 0 : _2.length)) && (0, import_jsx_runtime37.jsx)("div", Object.assign({ className: De }, { children: (0, import_jsx_runtime37.jsx)(l32, { className: qe }) })), (0, import_jsx_runtime37.jsx)(e88, Object.assign({ value: ke }, { children: (0, import_jsx_runtime37.jsx)(FloatingPortal, { children: (0, import_jsx_runtime37.jsxs)("div", Object.assign({ id: de, role: "listbox", ref: $e, className: ye, style: { display: Be ? "block" : "none", opacity: Be && !me ? 1 : 0, maxHeight: `${M3}px`, minWidth: `${T2}px`, maxWidth: `${Ce}px`, position: We, top: Ee && Ee > 0 && Ee !== 1 / 0 ? Ee : 0, left: Re || 0 } }, Pe, { children: [0 === (null == fe ? void 0 : fe.length) && be.searching && (0, import_jsx_runtime37.jsx)("div", Object.assign({ className: He }, { children: "No results" })), B2] })) }) }))] })) });
});
E2.displayName = "Combobox";
var S2 = Object.assign(E2, { Group: u19, Option: c34 });

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var import_jsx_runtime39 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/hooks/use-focus-trap.hook.js
var import_react55 = __toESM(require_react());
function r91(r123 = true) {
  const u29 = (0, import_react55.useRef)(null);
  return (0, import_react55.useEffect)(() => {
    if (!r123) return;
    const e130 = (e131) => {
      var t150, n94;
      if ("Tab" === e131.key && u29.current) {
        e131.preventDefault();
        const r124 = Array.from(null === (t150 = u29.current) || void 0 === t150 ? void 0 : t150.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])'));
        if (!r124.length) return;
        null === (n94 = ((e132, t151) => {
          const n95 = t151 ? e132 - 1 : e132 + 1;
          return n95 < 0 || n95 >= r124.length ? t151 ? r124[r124.length - 1] : r124[0] : r124[n95];
        })(r124.indexOf(document.activeElement), e131.shiftKey)) || void 0 === n94 || n94.focus();
      }
    };
    return document.addEventListener("keydown", e130), () => {
      document.removeEventListener("keydown", e130);
    };
  }, [r123]), (0, import_react55.useCallback)((e130) => {
    if (r123) return u29.current || (u29.current = e130), u29.current && u29.current.focus(), u29;
  }, [r123]);
}

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var import_react58 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Overlay/Overlay.js
var import_jsx_runtime38 = __toESM(require_jsx_runtime());
var import_react56 = __toESM(require_react());
var c36 = { blur: "sm", opacity: "50", color: "dark", closeOnClick: false };
var m33 = (0, import_react56.forwardRef)((t150, m62) => {
  const n94 = H("Overlay"), d44 = Object.assign(Object.assign({}, c36), t150), { blur: p35, color: u29, opacity: b12, closeOnClick: f22, onClose: y7, open: O6, className: j9 = "" } = d44, v8 = __rest(d44, ["blur", "color", "opacity", "closeOnClick", "onClose", "open", "className"]), h21 = t17(t150.id), C3 = (0, import_react56.useMemo)(() => twMerge(n94({ blur: p35, className: j9, color: u29, open: O6, opacity: b12 })), [p35, j9, u29, O6, b12, n94]);
  return (0, import_react56.useEffect)(() => {
    O6 ? document.body.classList.add("overflow-hidden") : document.body.classList.remove("overflow-hidden");
  }, [O6]), (0, import_jsx_runtime38.jsx)("div", Object.assign({ id: h21, ref: m62, className: C3, "aria-hidden": "true" }, v8));
});
m33.displayName = "Overlay";

// node_modules/@rewind-ui/core/dist/components/Drawer/Drawer.js
var v5 = { closeOnEscape: true, color: "white", open: false, overlayBlur: "sm", overlayCloseOnClick: true, overlayColor: "dark", overlayOpacity: "50", position: "right", shadow: "base" };
var O3 = (0, import_react58.forwardRef)((m62, O6) => {
  const C3 = H("Drawer"), b12 = Object.assign(Object.assign({}, v5), m62), { children: w12, className: k3 = "", closeOnEscape: g18, onClose: j9, open: E3, overlayBlur: N2, overlayCloseOnClick: X2, overlayColor: Y2, overlayOpacity: x13, position: B2, shadow: D } = b12, A2 = __rest(b12, ["children", "className", "closeOnEscape", "onClose", "open", "overlayBlur", "overlayCloseOnClick", "overlayColor", "overlayOpacity", "position", "shadow"]), I = t17(m62.id), K2 = (0, import_react58.useRef)(null), [P3, q3] = (0, import_react58.useState)(false), z6 = r91(P3), F2 = useMergeRefs([K2, z6 || null, O6 || null]), G3 = (0, import_react58.useRef)(null), H3 = (0, import_react58.useMemo)(() => twMerge(C3({ className: k3, position: B2, shadow: D })), [k3, B2, D, C3]);
  r90("Escape", g18, j9);
  const J2 = (0, import_react58.useMemo)(() => {
    switch (B2) {
      case "left":
      default:
        return ["translateX(-100%)", "translateX(0%)"];
      case "right":
        return ["translateX(100%)", "translateX(0%)"];
      case "top":
        return ["translateY(-100%)", "translateY(0%)"];
      case "bottom":
        return ["translateY(100%)", "translateY(0%)"];
    }
  }, [B2]);
  return (0, import_react58.useEffect)(() => {
    const e130 = E3 ? 150 : 100, r123 = new KeyframeEffect(K2.current, [{ opacity: 0.75, transform: J2[0], visibility: "hidden" }, { opacity: 1, visibility: "visible", transform: J2[1] }], { duration: e130, fill: "both", easing: "ease-in-out" });
    G3.current = new Animation(r123, document.timeline);
  }, [E3, K2]), (0, import_react58.useEffect)(() => {
    G3.current && (E3 ? (G3.current.play(), G3.current.onfinish = () => {
      q3(true);
    }) : (G3.current.reverse(), q3(false)));
  }, [E3]), (0, import_jsx_runtime39.jsxs)(import_jsx_runtime39.Fragment, { children: [(0, import_jsx_runtime39.jsx)(m33, { open: E3, onClick: () => {
    X2 && j9 && j9();
  }, blur: N2, color: Y2, opacity: x13, closeOnClick: X2 }), (0, import_jsx_runtime39.jsx)(FloatingPortal, { children: (0, import_jsx_runtime39.jsx)("div", Object.assign({ id: I, role: "dialog", "aria-hidden": !E3, style: { opacity: 0, visibility: "hidden" }, ref: F2, className: H3 }, A2, { children: w12 })) })] });
});
O3.displayName = "Drawer";

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.js
var import_jsx_runtime45 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownContent/DropdownContent.js
var import_jsx_runtime41 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownItem/DropdownItem.js
var import_jsx_runtime40 = __toESM(require_jsx_runtime());
var import_react59 = __toESM(require_react());
var l34 = (0, import_react59.forwardRef)((i58, l50) => {
  const u29 = H("Dropdown"), { tone: d44, itemColor: p35, mode: f22, radius: b12, size: j9, setOpen: x13 } = Object.assign(Object.assign({}, i58), t27()), g18 = Object.assign({}, i58), { children: h21, className: I = "", color: N2 = p35, tabIndex: O6 = 0, onClick: w12 } = g18, C3 = __rest(g18, ["children", "className", "color", "tabIndex", "onClick"]), k3 = (0, import_react59.useRef)(null), D = useMergeRefs([l50 || null, k3]), z6 = t17(i58.id), M3 = (0, import_react59.useMemo)(() => twMerge(u29.item({ tone: d44, className: I, color: N2, mode: f22, radius: b12, size: j9 })), [d44, I, N2, f22, b12, j9, u29]);
  return (0, import_jsx_runtime40.jsx)("button", Object.assign({ id: z6, ref: D, tabIndex: O6, className: M3, role: "menuitem", onClick: (e130) => {
    x13(false), w12 && w12(e130);
  }, onMouseEnter: () => {
    k3.current && k3.current.focus();
  }, onMouseLeave: () => {
    k3.current && k3.current.blur();
  } }, C3, { children: h21 }));
});
l34.displayName = "DropdownItem";

// node_modules/@rewind-ui/core/dist/helpers/arrow-side.dictionary.js
var o93 = cva("", { variants: { side: { top: "bottom", "top-start": "bottom", "top-end": "bottom", right: "left", "right-start": "left", "right-end": "left", bottom: "top", "bottom-start": "top", "bottom-end": "top", left: "right", "left-start": "right", "left-end": "right" } } });

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownContent/DropdownContent.js
var import_react62 = __toESM(require_react());
var h11 = (0, import_react62.forwardRef)((p35, h21) => {
  var b12, u29;
  const x13 = H("Dropdown"), y7 = Object.assign({}, p35), { children: O6, className: v8 = "" } = y7, N2 = __rest(y7, ["children", "className"]), D = t17(p35.id), I = [], $2 = (0, import_react62.useRef)(), { x: P3, y: k3, context: z6, open: S3, floating: C3, strategy: F2, color: R2, size: q3, mode: A2, radius: B2, shadow: E3, withinPortal: G3, arrowRef: H3, getFloatingProps: J2 } = t27(), K2 = useMergeRefs([C3, $2]), L = (null === (b12 = z6.middlewareData.arrow) || void 0 === b12 ? void 0 : b12.x) || 0, M3 = (null === (u29 = z6.middlewareData.arrow) || void 0 === u29 ? void 0 : u29.y) || 0, Q2 = o93({ side: z6.placement }), T2 = (0, import_react62.useMemo)(() => twMerge(x13.base({ arrowSide: Q2, className: v8, color: R2, mode: A2, open: S3, radius: B2, shadow: E3, size: q3 })), [Q2, v8, R2, A2, S3, B2, E3, q3, x13]), U = (0, import_jsx_runtime41.jsx)("span", { ref: H3, className: x13.arrow({ arrowSide: Q2, color: R2 }), style: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, "right" !== Q2 && { left: `${L}px` }), "top" !== Q2 && "left" !== Q2 && { bottom: `${M3}px` }), "left" === Q2 && { top: `${M3}px` }), "right" === Q2 && { top: `${M3}px` }), { [Q2]: "-5px" }) }), V = import_react62.Children.map(O6, (o123, e130) => o123.type.displayName !== l34.displayName ? o123 : (0, import_react62.cloneElement)(o123, Object.assign(Object.assign({}, o123.props), { tabIndex: e130 + 1, ref: (o124) => {
    (null == o124 ? void 0 : o124.disabled) || I.push(o124);
  } }))), W2 = (0, import_jsx_runtime41.jsxs)("div", Object.assign({ id: D, ref: K2, className: T2, role: "menu", style: { position: F2, top: null != k3 ? k3 : 0, left: null != P3 ? P3 : 0 } }, J2, N2, { children: [U, V] }));
  return o89(I, S3), (0, import_jsx_runtime41.jsx)("div", Object.assign({ ref: h21, className: v8 }, { children: G3 ? (0, import_jsx_runtime41.jsx)(FloatingPortal, { children: W2 }) : W2 }));
});
h11.displayName = "DropdownContent";

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownDivider/DropdownDivider.js
var import_jsx_runtime42 = __toESM(require_jsx_runtime());
var t129 = (t150) => {
  const s74 = H("Dropdown"), { color: m62 = "gray", className: c63 = "" } = t150, i58 = t17(t150.id);
  return (0, import_jsx_runtime42.jsx)("hr", { id: i58, className: s74.divider({ color: m62, className: c63 }) });
};

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownLabel/DropdownLabel.js
var import_jsx_runtime43 = __toESM(require_jsx_runtime());
var import_react63 = __toESM(require_react());
var c38 = { color: "gray", size: "sm", weight: "normal" };
var n67 = (0, import_react63.forwardRef)((i58, n94) => {
  const l50 = H("Dropdown"), d44 = Object.assign(Object.assign({}, c38), i58), { as: p35, children: g18, color: j9, weight: b12, className: h21 = "" } = d44, f22 = __rest(d44, ["as", "children", "color", "weight", "className"]), { size: w12, mode: O6 } = Object.assign(Object.assign(Object.assign({}, c38), t27()), i58), N2 = t17(i58.id), u29 = (0, import_react63.useMemo)(() => twMerge(l50.label({ className: h21, color: j9, mode: O6, size: w12, weight: b12 })), [h21, j9, O6, w12, b12, l50]);
  return (0, import_jsx_runtime43.jsx)(p35 || "div", Object.assign({ id: N2, className: u29, ref: n94 }, f22, { children: g18 }));
});
n67.displayName = "DropdownLabel";

// node_modules/@rewind-ui/core/dist/components/Dropdown/DropdownTrigger/DropdownTrigger.js
var import_jsx_runtime44 = __toESM(require_jsx_runtime());
var import_react64 = __toESM(require_react());
var p22 = (0, import_react64.forwardRef)((n94, p35) => {
  const { children: s74 } = n94, { open: c63, reference: m62, getReferenceProps: d44 } = t27(), f22 = import_react64.Children.only(s74), g18 = useMergeRefs([m62, p35 || null]), l50 = (0, import_react64.cloneElement)(f22, Object.assign(Object.assign(Object.assign({ ref: g18 }, { "aria-expanded": c63, "aria-pressed": true, "aria-haspopup": true }), f22.props), d44));
  return (0, import_jsx_runtime44.jsx)(import_jsx_runtime44.Fragment, { children: l50 });
});
p22.displayName = "DropdownTrigger";

// node_modules/@rewind-ui/core/dist/components/Dropdown/use-dropdown.hook.js
var import_react67 = __toESM(require_react());
function x9({ placement: x13 = "bottom", initiallyOpen: y7 = false, outsidePress: h21 = true, trigger: R2 = "click" }) {
  const b12 = (0, import_react67.useRef)(null), [w12, F2] = (0, import_react67.useState)(y7), { x: O6, y: k3, refs: v8, strategy: C3, context: E3 } = useFloating2({ open: w12, onOpenChange: F2, placement: x13, middleware: [offset3(8), shift3(), inline3(), flip3(), arrow3({ element: b12 })], whileElementsMounted: autoUpdate }), { getFloatingProps: M3, getReferenceProps: j9 } = useInteractions([useClick(E3, { enabled: "click" === R2, toggle: true }), useHover(E3, { enabled: "hover" === R2, move: true, handleClose: safePolygon() }), useFocus(E3), useDismiss(E3, { referencePress: false, outsidePress: h21 }), useRole(E3, { role: "dialog" })]);
  return (0, import_react67.useMemo)(() => ({ arrowRef: b12, context: E3, floating: v8.setFloating, getFloatingProps: M3(), getReferenceProps: j9(), open: w12, setOpen: F2, reference: v8.setReference, strategy: C3, x: O6, y: k3 }), [E3, v8, M3, j9, w12, F2, C3, O6, k3]);
}

// node_modules/@rewind-ui/core/dist/components/Dropdown/Dropdown.js
var import_react68 = __toESM(require_react());
var c39 = { chevronRotation: true, color: "white", initiallyOpen: false, itemColor: "gray", mode: "spacey", outsidePress: true, placement: "bottom", radius: "md", shadow: "none", size: "sm", tone: "solid", trigger: "click", withChevron: true, withinPortal: true };
var g8 = (0, import_react68.forwardRef)((r123, t150) => {
  const i58 = Object.assign(Object.assign({}, c39), r123), { chevronRotation: n94, children: s74, color: m62, initiallyOpen: g18, itemColor: w12, mode: h21, outsidePress: f22, placement: u29, radius: j9, shadow: D, size: v8, tone: P3, trigger: y7, withChevron: b12, withinPortal: C3 } = i58, O6 = __rest(i58, ["chevronRotation", "children", "color", "initiallyOpen", "itemColor", "mode", "outsidePress", "placement", "radius", "shadow", "size", "tone", "trigger", "withChevron", "withinPortal"]), R2 = t17(r123.id), { arrowRef: x13, context: k3, floating: z6, getFloatingProps: I, getReferenceProps: T2, open: L, setOpen: F2, reference: N2, strategy: q3, x: A2, y: B2 } = x9({ outsidePress: f22, placement: u29, initiallyOpen: g18, trigger: y7 }), E3 = { arrowRef: x13, chevronRotation: n94, color: m62, context: k3, floating: z6, getFloatingProps: I, getReferenceProps: T2, itemColor: w12, mode: h21, open: L, setOpen: F2, radius: j9, reference: N2, shadow: D, size: v8, strategy: q3, tone: P3, withChevron: b12, withinPortal: C3, x: A2, y: B2 };
  return r90("Tab", L, () => {
    L && F2(false);
  }), (0, import_jsx_runtime45.jsx)(e24, Object.assign({ value: E3 }, { children: (0, import_jsx_runtime45.jsx)("div", Object.assign({ id: R2, ref: t150 }, O6, { children: s74 })) }));
});
g8.displayName = "Dropdown";
var w8 = Object.assign(g8, { Trigger: p22, Content: h11, Label: n67, Divider: t129, Item: l34 });

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.js
var import_jsx_runtime53 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControlLabel/FormControlLabel.js
var import_jsx_runtime46 = __toESM(require_jsx_runtime());
var import_react69 = __toESM(require_react());
var a51 = { required: false };
var c40 = (0, import_react69.forwardRef)((s74, c63) => {
  const n94 = H("FormControl"), d44 = Object.assign(Object.assign(Object.assign({}, a51), t124()), s74), { className: p35 = "", children: b12, controlId: f22, required: j9, size: u29 } = d44, h21 = __rest(d44, ["className", "children", "controlId", "required", "size"]), g18 = t17(s74.id), N2 = (0, import_react69.useMemo)(() => twMerge(n94.label({ className: p35, required: j9, size: u29 })), [p35, j9, u29, n94]);
  return (0, import_jsx_runtime46.jsx)("label", Object.assign({ id: g18, ref: c63, htmlFor: f22, className: N2 }, h21, { children: b12 }));
});
c40.displayName = "FormControlLabel";

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControlText/FormControlText.js
var import_jsx_runtime47 = __toESM(require_jsx_runtime());
var import_react70 = __toESM(require_react());
var n69 = { validation: "none" };
var l35 = (0, import_react70.forwardRef)((s74, l50) => {
  const c63 = H("FormControl"), d44 = Object.assign(Object.assign(Object.assign({}, n69), t124()), s74), { className: p35 = "", children: f22, controlId: j9, size: x13, validation: b12 } = d44, g18 = __rest(d44, ["className", "children", "controlId", "size", "validation"]), h21 = t17(s74.id), v8 = (0, import_react70.useMemo)(() => twMerge(c63.text({ className: p35, size: x13, validation: b12 })), [p35, x13, c63, b12]);
  return (0, import_jsx_runtime47.jsx)("div", Object.assign({ id: h21, ref: l50, className: v8 }, g18, { children: f22 }));
});
l35.displayName = "FormControlText";

// node_modules/@rewind-ui/core/dist/components/Input/Input.js
var import_jsx_runtime48 = __toESM(require_jsx_runtime());
var import_react71 = __toESM(require_react());
var d25 = { color: "dark", disabled: false, loading: false, radius: "lg", shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var g9 = (0, import_react71.forwardRef)((n94, g18) => {
  const h21 = H("Input"), u29 = Object.assign(Object.assign(Object.assign(Object.assign({}, d25), t124()), t28()), n94), { className: I = "", color: b12, controlId: f22, leftIcon: j9, loading: N2, radius: w12, rightIcon: z6, shadow: O6, size: x13, tone: y7, type: v8 = "text", validation: R2, withRing: W2 } = u29, C3 = __rest(u29, ["className", "color", "controlId", "leftIcon", "loading", "radius", "rightIcon", "shadow", "size", "tone", "type", "validation", "withRing"]), F2 = t17(n94.id), G3 = f22 || F2, S3 = !!j9, k3 = !!z6, L = n94.disabled || N2, P3 = (0, import_react71.useMemo)(() => twMerge(h21.base({ className: I, color: b12, disabled: L, hasLeftIcon: S3, hasRightIcon: k3, loading: N2, radius: w12, shadow: O6, size: x13, tone: y7, type: v8, validation: R2, withRing: W2 })), [I, b12, L, S3, k3, N2, w12, O6, x13, h21, y7, v8, R2, W2]), q3 = (0, import_jsx_runtime48.jsx)("input", Object.assign({ id: G3, type: v8, ref: g18, className: P3 }, C3, { disabled: L }));
  return S3 || k3 || N2 ? (0, import_jsx_runtime48.jsxs)("div", Object.assign({ className: h21.wrapper() }, { children: [j9 && (0, import_jsx_runtime48.jsx)("span", Object.assign({ className: h21.leftIconWrapper({ size: x13 }) }, { children: (0, import_react71.cloneElement)(j9, { className: h21.icon({ tone: y7, size: x13, className: j9.props.className }) }) })), q3, z6 && !N2 && (0, import_jsx_runtime48.jsx)("span", Object.assign({ className: h21.rightIconWrapper({ size: x13 }) }, { children: (0, import_react71.cloneElement)(z6, { className: h21.icon({ tone: y7, size: x13, className: z6.props.className }) }) })), N2 && (0, import_jsx_runtime48.jsx)("span", Object.assign({ className: h21.rightIconWrapper({ size: x13 }) }, { children: (0, import_jsx_runtime48.jsx)(o21, { size: x13, color: "gray" }) }))] })) : q3;
});
g9.displayName = "Input";

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.js
var import_jsx_runtime52 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroupText/InputGroupText.js
var import_jsx_runtime49 = __toESM(require_jsx_runtime());
var import_react72 = __toESM(require_react());
var n71 = (0, import_react72.forwardRef)((o123, n94) => {
  const c63 = H("InputGroup"), p35 = Object.assign(Object.assign({}, t28()), o123), { className: u29 = "", children: d44, tone: l50, size: f22, radius: j9 } = p35, x13 = __rest(p35, ["className", "children", "tone", "size", "radius"]), h21 = t17(o123.id), N2 = (0, import_react72.useMemo)(() => twMerge(c63.text({ className: u29, tone: l50, radius: j9, size: f22 })), [u29, j9, f22, c63, l50]);
  return (0, import_jsx_runtime49.jsx)("div", Object.assign({ id: h21, ref: n94, className: N2 }, x13, { children: d44 }));
});
n71.displayName = "InputGroupText";

// node_modules/@rewind-ui/core/dist/components/Select/Select.js
var import_jsx_runtime50 = __toESM(require_jsx_runtime());
var import_react73 = __toESM(require_react());
var p23 = { color: "dark", disabled: false, radius: "lg", shadow: "none", size: "md", tone: "light", validation: "none", withRing: true };
var h12 = (0, import_react73.forwardRef)((c63, h21) => {
  const g18 = H("Select"), b12 = Object.assign(Object.assign(Object.assign(Object.assign({}, p23), t124()), t28()), c63), { children: f22, className: j9 = "", color: u29, controlId: N2, disabled: w12, leftIcon: I, radius: z6, shadow: O6, size: v8, tone: x13, validation: R2, withRing: C3 } = b12, F2 = __rest(b12, ["children", "className", "color", "controlId", "disabled", "leftIcon", "radius", "shadow", "size", "tone", "validation", "withRing"]), G3 = t17(c63.id), S3 = N2 || G3, W2 = !!I, k3 = (0, import_react73.useMemo)(() => twMerge(g18.base({ className: j9, color: u29, disabled: w12, hasLeftIcon: W2, radius: z6, shadow: O6, size: v8, tone: x13, validation: R2, withRing: C3 })), [j9, u29, w12, W2, z6, O6, v8, g18, x13, R2, C3]), y7 = (0, import_jsx_runtime50.jsx)("select", Object.assign({ id: S3, ref: h21, className: k3 }, F2, { disabled: w12 }, { children: f22 }));
  return (0, import_jsx_runtime50.jsxs)("div", Object.assign({ className: g18.wrapper() }, { children: [I && (0, import_jsx_runtime50.jsx)("span", Object.assign({ className: g18.leftIconWrapper({ size: v8 }) }, { children: (0, import_react73.cloneElement)(I, { className: g18.icon({ tone: x13, size: v8, className: I.props.className }) }) })), y7, (0, import_jsx_runtime50.jsx)("span", Object.assign({ className: g18.rightIconWrapper({ size: v8 }) }, { children: (0, import_jsx_runtime50.jsx)(l32, { className: g18.icon({ tone: x13, size: v8 }) }) }))] }));
});
h12.displayName = "Select";

// node_modules/@rewind-ui/core/dist/components/Textarea/Textarea.js
var import_jsx_runtime51 = __toESM(require_jsx_runtime());
var import_react74 = __toESM(require_react());
var l37 = { color: "dark", tone: "light", radius: "lg", size: "md", validation: "none", shadow: "none", withRing: true, disabled: false };
var m41 = (0, import_react74.forwardRef)((r123, m62) => {
  const c63 = H("Textarea"), p35 = Object.assign(Object.assign(Object.assign(Object.assign({}, l37), t124()), t28()), r123), { className: u29 = "", color: g18, controlId: b12, disabled: h21, tone: f22, size: j9, radius: w12, validation: x13, shadow: I, withRing: N2, type: O6 = "text" } = p35, v8 = __rest(p35, ["className", "color", "controlId", "disabled", "tone", "size", "radius", "validation", "shadow", "withRing", "type"]), z6 = t17(r123.id), R2 = b12 || z6, y7 = (0, import_react74.useMemo)(() => twMerge(c63({ className: u29, color: g18, disabled: h21, radius: w12, shadow: I, size: j9, tone: f22, validation: x13, withRing: N2 })), [u29, g18, h21, w12, I, j9, c63, f22, x13, N2]);
  return (0, import_jsx_runtime51.jsx)("textarea", Object.assign({ id: R2, ref: m62, className: y7 }, v8, { disabled: h21 }));
});
m41.displayName = "Textarea";

// node_modules/@rewind-ui/core/dist/components/InputGroup/InputGroup.js
var import_react75 = __toESM(require_react());
var h13 = { radius: "lg", shadow: "none", size: "md", tone: "light" };
var x10 = (0, import_react75.forwardRef)((e130, r123) => {
  const a74 = H("InputGroup"), i58 = Object.assign(Object.assign(Object.assign({}, t124()), h13), e130), { className: m62 = "", controlId: n94, radius: u29, shadow: x13, size: g18, tone: I } = i58, O6 = __rest(i58, ["className", "controlId", "radius", "shadow", "size", "tone"]), T2 = t17(e130.id), w12 = (0, import_react75.useMemo)(() => twMerge(a74.base({ className: m62, radius: u29, shadow: x13, size: g18 })), [m62, u29, x13, g18, a74]), z6 = { tone: I, size: g18, radius: u29 }, C3 = [];
  return import_react75.Children.toArray(e130.children).forEach((t150, o123) => {
    C3.push((0, import_react75.cloneElement)(t150, Object.assign(Object.assign({}, t150.props), { "data-has-right-element": o123 < import_react75.Children.count(e130.children) - 1, "data-has-left-element": o123 > 0 })));
  }), (0, import_jsx_runtime52.jsx)(e25, Object.assign({ value: z6 }, { children: (0, import_jsx_runtime52.jsx)("div", Object.assign({ id: T2, ref: r123, className: w12 }, O6, { children: C3 })) }));
});
x10.displayName = "InputGroup";
var g10 = Object.assign(x10, { Input: g9, Textarea: m41, Select: h12, Combobox: S2, Text: n71, Button: u4 });

// node_modules/@rewind-ui/core/dist/components/FormControl/FormControl.js
var import_react76 = __toESM(require_react());
var j5 = { size: "md", validation: "none" };
var u23 = (0, import_react76.forwardRef)((r123, e130) => {
  const m62 = H("FormControl"), i58 = Object.assign(Object.assign({}, j5), r123), { className: s74 = "", children: a74, size: n94, validation: c63 } = i58, u29 = __rest(i58, ["className", "children", "size", "validation"]), x13 = t17(r123.id), C3 = { controlId: `control-${x13}`, size: n94, validation: c63 }, I = (0, import_react76.useMemo)(() => twMerge(m62.base({ className: s74 })), [s74, m62]);
  return (0, import_jsx_runtime53.jsx)(e90, Object.assign({ value: C3 }, { children: (0, import_jsx_runtime53.jsx)("div", Object.assign({ id: x13, ref: e130, className: I }, u29, { children: a74 })) }));
});
u23.displayName = "FormControl";
var x11 = Object.assign(u23, { Label: c40, Text: l35, InputGroup: g10, Input: g9, Textarea: m41, Select: h12, Combobox: S2 });

// node_modules/@rewind-ui/core/dist/components/Modal/Modal.js
var import_jsx_runtime55 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.js
var import_jsx_runtime54 = __toESM(require_jsx_runtime());
var import_react77 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.context.js
var [e100, t132] = i8();

// node_modules/@rewind-ui/core/dist/components/Modal/ModalGroup/ModalGroup.js
var l39 = (l50) => {
  const { children: n94 } = l50, [o123, a74] = (0, import_react77.useState)([]), [s74, c63] = (0, import_react77.useState)(null), d44 = { registry: o123, setRegistry: a74, activeModalId: s74 };
  return (0, import_react77.useEffect)(() => {
    if (o123.length > 1) {
      const t151 = o123[o123.length - 2];
      if (!t151) return;
      t151.animate([{ opacity: 1, transform: "translateY(0%)", filter: "blur(0)", visibility: "visible" }, { opacity: 0, transform: "translateY(-50px)", filter: "blur(15px)", visibility: "hidden" }], { duration: 100 }), t151.style.zIndex = "40";
    }
    const t150 = o123[o123.length - 1];
    t150 ? (t150.style.zIndex = "60", c63(t150.id)) : c63(null);
  }, [o123]), (0, import_jsx_runtime54.jsx)(e100, Object.assign({ value: d44 }, { children: n94 }));
};
l39.displayName = "ModalGroup";

// node_modules/@rewind-ui/core/dist/components/Modal/Modal.js
var import_react79 = __toESM(require_react());
var O4 = { closeOnEscape: true, color: "white", mode: "dialog", open: false, overlayBlur: "sm", overlayCloseOnClick: true, overlayColor: "dark", overlayOpacity: "50", position: "top", radius: "md", shadow: "base", size: "sm" };
var g11 = (0, import_react79.forwardRef)((t150, u29) => {
  const g18 = H("Modal"), j9 = Object.assign(Object.assign({}, O4), t150), { children: C3, className: k3 = "", closeOnEscape: w12, color: x13, mode: M3, onClose: N2, open: E3, overlayBlur: G3, overlayCloseOnClick: z6, overlayColor: Y2, overlayOpacity: B2, position: I, radius: A2, shadow: K2, size: P3 } = j9, R2 = __rest(j9, ["children", "className", "closeOnEscape", "color", "mode", "onClose", "open", "overlayBlur", "overlayCloseOnClick", "overlayColor", "overlayOpacity", "position", "radius", "shadow", "size"]), T2 = t17(t150.id), $2 = (0, import_react79.useRef)(null), [q3, D] = (0, import_react79.useState)(false), F2 = r91(q3), H3 = useMergeRefs([$2, F2 || null, u29 || null]), J2 = (0, import_react79.useRef)(null), { activeModalId: L, registry: Q2, setRegistry: S3 } = t132(), U = (0, import_react79.useMemo)(() => {
    if ("fullscreen" === M3) return "0%";
    switch (I) {
      case "top":
      case "bottom":
        return "0%";
      default:
        return "-50%";
    }
  }, [I, M3]);
  (0, import_react79.useEffect)(() => {
    if (!S3 || !Q2 || !$2.current) return;
    const e130 = E3 ? [...Q2, $2.current] : Q2.filter((e131) => e131 !== $2.current);
    if (S3(e130), 0 !== e130.length && !E3 && e130.length < Q2.length) {
      e130[e130.length - 1].animate([{ opacity: 0, transform: "translateY(-50px)", visibility: "hidden" }, { opacity: 1, transform: "translateY(0%)", visibility: "visible" }], { duration: 150 }), D(false);
    }
  }, [E3]);
  const V = (0, import_react79.useMemo)(() => twMerge(g18({ className: k3, color: x13, mode: M3, position: I, radius: A2, shadow: K2, size: P3 })), [k3, x13, M3, I, A2, K2, P3, g18]);
  r90("Escape", w12, N2);
  return (0, import_react79.useEffect)(() => {
    const e130 = E3 ? "ease-in-out" : "ease-out", o123 = E3 ? 150 : 100, r123 = new KeyframeEffect($2.current, [{ opacity: 0, transform: "translateY(-100px)", visibility: "hidden" }, { opacity: 1, transform: `translateY(${U})`, visibility: "visible" }], { duration: o123, fill: "both", easing: e130 });
    J2.current = new Animation(r123, document.timeline);
  }, [E3, $2]), (0, import_react79.useEffect)(() => {
    J2.current && (E3 ? (J2.current.play(), J2.current.onfinish = () => {
      D(true);
    }) : (J2.current.reverse(), D(false)));
  }, [E3]), (0, import_react79.useEffect)(() => {
    J2.current && (L === T2 ? setTimeout(() => {
      D(true);
    }, 100) : D(false));
  }, [L]), (0, import_jsx_runtime55.jsxs)(import_jsx_runtime55.Fragment, { children: ["fullscreen" !== M3 && (0, import_jsx_runtime55.jsx)(m33, { open: E3, onClick: () => {
    z6 && N2 && N2();
  }, blur: G3, color: Y2, opacity: B2, closeOnClick: z6 }), (0, import_jsx_runtime55.jsx)(FloatingPortal, { children: (0, import_jsx_runtime55.jsx)("div", Object.assign({ className: "flex justify-center" }, { children: (0, import_jsx_runtime55.jsx)("div", Object.assign({ id: T2, role: "dialog", "aria-modal": "true", "aria-hidden": !E3, style: { opacity: 0, visibility: "hidden" }, ref: H3, className: V }, R2, { children: C3 })) })) })] });
});
g11.displayName = "Modal";
var j6 = Object.assign(g11, { Group: l39 });

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.js
var import_jsx_runtime58 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverContent/PopoverContent.js
var import_jsx_runtime56 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.context.js
var [e101, n73] = t("Popover compound components cannot be rendered outside the Popover component");

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverContent/PopoverContent.js
var import_react81 = __toESM(require_react());
var p25 = (0, import_react81.forwardRef)((l50, p35) => {
  var f22, b12;
  const g18 = H("Popover"), h21 = Object.assign({}, l50), { children: w12, className: v8 = "" } = h21, u29 = __rest(h21, ["children", "className"]), { controlsId: x13, labelledbyId: N2, arrowRef: j9, color: y7, context: O6, floating: P3, getFloatingProps: F2, open: z6, radius: D, shadow: I, size: S3, strategy: T2, withinPortal: $2, x: C3, y: R2 } = n73(), [k3, q3] = (0, import_react81.useState)(!z6), [A2, B2] = (0, import_react81.useState)(null);
  (0, import_react81.useEffect)(() => {
    A2 && clearTimeout(A2), B2(setTimeout(() => q3(!z6), z6 ? 0 : 75));
  }, [z6]);
  const E3 = (null === (f22 = O6.middlewareData.arrow) || void 0 === f22 ? void 0 : f22.x) || 0, G3 = (null === (b12 = O6.middlewareData.arrow) || void 0 === b12 ? void 0 : b12.y) || 0, H3 = o93({ side: O6.placement }), J2 = (0, import_react81.useMemo)(() => twMerge(g18.base({ arrowSide: H3, className: v8, color: y7, open: z6, radius: D, shadow: I, size: S3 })), [H3, v8, y7, z6, D, I, S3, g18]), K2 = (0, import_jsx_runtime56.jsx)("span", { ref: j9, className: g18.arrow({ arrowSide: H3, color: y7 }), style: Object.assign(Object.assign(Object.assign({}, "right" !== H3 && { left: `${E3}px` }), "top" !== H3 && { bottom: `${G3}px` }), { [H3]: "-5px" }) }), L = !k3 && (0, import_jsx_runtime56.jsxs)("div", Object.assign({ id: x13, ref: P3, className: J2, style: { position: T2, top: R2 && R2 > 0 && !isNaN(R2) && isFinite(R2) ? R2 : 0, left: C3 && C3 > 0 && !isNaN(C3) && isFinite(C3) ? C3 : 0, visibility: null == C3 ? "hidden" : "visible" } }, F2, u29, { children: [K2, w12] }));
  return (0, import_jsx_runtime56.jsx)("div", Object.assign({ ref: p35, className: v8, role: "dialog", "aria-modal": true, "aria-expanded": z6, "aria-labelledby": N2, "aria-hidden": !z6 }, { children: $2 ? (0, import_jsx_runtime56.jsx)(FloatingPortal, { children: L }) : L }));
});
p25.displayName = "PopoverContent";

// node_modules/@rewind-ui/core/dist/components/Popover/PopoverTrigger/PopoverTrigger.js
var import_jsx_runtime57 = __toESM(require_jsx_runtime());
var import_react82 = __toESM(require_react());
var p26 = (0, import_react82.forwardRef)((t150, p35) => {
  const { children: c63 } = t150, { controlsId: s74, labelledbyId: l50, reference: d44, getReferenceProps: m62, open: f22 } = n73(), g18 = import_react82.Children.only(c63), u29 = useMergeRefs([d44, p35 || null]), b12 = (0, import_react82.cloneElement)(g18, Object.assign(Object.assign({ ref: u29, id: l50, "aria-haspopup": "dialog", "aria-controls": s74, "aria-expanded": f22 }, g18.props), m62));
  return (0, import_jsx_runtime57.jsx)(import_jsx_runtime57.Fragment, { children: b12 });
});
p26.displayName = "PopoverTrigger";

// node_modules/@rewind-ui/core/dist/components/Popover/use-popover.hook.js
var import_react85 = __toESM(require_react());
function x12({ placement: x13 = "bottom", initiallyOpen: y7 = false, offset: P3 = 8, trigger: R2 = "hover" }) {
  const b12 = (0, import_react85.useRef)(null), [v8, w12] = (0, import_react85.useState)(y7), { x: F2, y: C3, refs: O6, strategy: k3, context: E3 } = useFloating2({ open: v8, onOpenChange: w12, placement: x13, middleware: [offset3(P3), shift3(), inline3(), flip3(), arrow3({ element: b12 })], whileElementsMounted: autoUpdate }), { getFloatingProps: M3, getReferenceProps: j9 } = useInteractions([useClick(E3, { enabled: "click" === R2, toggle: true }), useHover(E3, { enabled: "hover" === R2, move: true, handleClose: safePolygon() }), useFocus(E3), useDismiss(E3, { referencePress: false }), useRole(E3, { role: "dialog" })]);
  return (0, import_react85.useMemo)(() => ({ x: F2, y: C3, reference: O6.setReference, floating: O6.setFloating, strategy: k3, context: E3, getFloatingProps: M3(), getReferenceProps: j9(), open: v8, arrowRef: b12 }), [v8, w12, F2, C3]);
}

// node_modules/@rewind-ui/core/dist/components/Popover/Popover.js
var import_react86 = __toESM(require_react());
var p27 = { color: "white", initiallyOpen: false, offset: 8, placement: "top", radius: "lg", shadow: "base", size: "md", trigger: "hover", withinPortal: true };
var c44 = (0, import_react86.forwardRef)((t150, i58) => {
  const a74 = Object.assign(Object.assign(Object.assign({}, p27), t28()), t150), { children: c63, className: g18 = "", color: m62, initiallyOpen: f22, offset: d44, placement: h21, radius: u29, shadow: P3, size: j9, trigger: b12, withinPortal: w12 } = a74, y7 = __rest(a74, ["children", "className", "color", "initiallyOpen", "offset", "placement", "radius", "shadow", "size", "trigger", "withinPortal"]), v8 = t17(t150.id), { x: O6, y: x13, reference: I, floating: z6, strategy: N2, context: R2, open: C3, arrowRef: T2, getFloatingProps: F2, getReferenceProps: G3 } = x12({ placement: h21, initiallyOpen: f22, offset: d44, trigger: b12 }), $2 = { controlsId: `${v8}-controls`, labelledbyId: `${v8}-labelledby`, x: O6, y: x13, reference: I, floating: z6, strategy: N2, context: R2, getFloatingProps: F2, getReferenceProps: G3, open: C3, color: m62, size: j9, radius: u29, shadow: P3, withinPortal: w12, arrowRef: T2 };
  return (0, import_jsx_runtime58.jsx)(e101, Object.assign({ value: $2 }, { children: (0, import_jsx_runtime58.jsx)("div", Object.assign({ id: v8, ref: i58, className: g18 }, y7, { children: c63 })) }));
});
c44.displayName = "Popover";
var g12 = Object.assign(c44, { Trigger: p26, Content: p25 });

// node_modules/@rewind-ui/core/dist/components/Progress/Progress.js
var import_jsx_runtime59 = __toESM(require_jsx_runtime());
var import_react87 = __toESM(require_react());
var o103 = { animated: false, color: "dark", radius: "md", shadow: "none", showValue: false, size: "md", striped: false };
var c45 = (0, import_react87.forwardRef)((n94, c63) => {
  const d44 = H("Progress"), u29 = t17(n94.id), m62 = `${u29}-label`, p35 = Object.assign(Object.assign({}, o103), n94), { animated: b12, children: g18, className: h21 = "", color: f22, description: v8, label: j9 = "", radius: z6, shadow: w12, showValue: N2, size: O6, striped: y7, value: k3 = 0 } = p35, x13 = __rest(p35, ["animated", "children", "className", "color", "description", "label", "radius", "shadow", "showValue", "size", "striped", "value"]), P3 = (0, import_react87.useRef)(null);
  (0, import_react87.useEffect)(() => {
    if (!b12) return;
    if (!y7) return;
    if (!(null == P3 ? void 0 : P3.current)) return;
    const e130 = P3.current.animate({ backgroundPosition: ["0 0", d44.stripe({ size: O6 })] }, { duration: 2e3, iterations: 1 / 0 });
    return () => {
      e130.cancel();
    };
  }, [b12, y7, P3, O6, d44]), (0, import_react87.useEffect)(() => {
    if (null == P3 ? void 0 : P3.current) {
      if (!y7) return P3.current.style.backgroundSize = "", void (P3.current.style.backgroundImage = "");
      P3.current.style.backgroundSize = d44.stripe({ size: O6 }), P3.current.style.backgroundImage = "linear-gradient(-45deg, rgba(255,255,255,.15) 25%, transparent 25%, transparent 50%, rgba(255,255,255,.15) 50%, rgba(255,255,255,.15) 75%, transparent 75%, transparent)";
    }
  }, [P3, O6, y7, d44]);
  const I = O6 && ["xs", "sm"].includes(O6) ? "outer" : "inner";
  return (0, import_jsx_runtime59.jsxs)("div", Object.assign({ id: u29, ref: c63, className: d44.wrapper({ className: h21, size: O6 }) }, x13, { children: [(j9 || N2 && "outer" === I) && (0, import_jsx_runtime59.jsxs)("div", Object.assign({ className: d44.label({ size: O6 }) }, { children: [j9 && (0, import_jsx_runtime59.jsx)("span", Object.assign({ id: m62, role: "presentation" }, { children: j9 })), N2 && "outer" === I && (0, import_jsx_runtime59.jsxs)("span", { children: [k3, "%"] })] })), (0, import_jsx_runtime59.jsx)("div", Object.assign({ className: d44.base({ radius: z6, size: O6, shadow: w12 }) }, { children: (0, import_jsx_runtime59.jsx)("div", Object.assign({ ref: P3, role: "progressbar", "aria-valuemax": 100, "aria-valuemin": 0, "aria-valuenow": k3, "aria-labelledby": j9 ? m62 : void 0, style: { width: `${k3}%` }, className: d44.bar({ color: f22 }) }, { children: N2 && "inner" === I && (0, import_jsx_runtime59.jsxs)("span", { children: [k3, "%"] }) })) })), v8 && (0, import_jsx_runtime59.jsx)("span", Object.assign({ className: d44.description({ size: O6 }) }, { children: v8 }))] }));
});
c45.displayName = "Progress";

// node_modules/@rewind-ui/core/dist/components/Ribbon/Ribbon.js
var import_jsx_runtime60 = __toESM(require_jsx_runtime());
var import_react88 = __toESM(require_react());
var d31 = { color: "dark", position: "top-right", radius: "base", shadow: "base", shadowColor: "none", size: "md", tone: "solid" };
var m43 = (0, import_react88.forwardRef)((a74, m62) => {
  const c63 = d6("Ribbon", a74.variant), l50 = H("Ribbon"), h21 = Object.assign(Object.assign(Object.assign({}, d31), c63), a74), { children: p35, className: b12 = "", color: f22, position: u29, radius: w12, shadow: j9, shadowColor: g18, size: v8, tone: N2, variant: x13 } = h21, z6 = __rest(h21, ["children", "className", "color", "position", "radius", "shadow", "shadowColor", "size", "tone", "variant"]), C3 = t17(a74.id), O6 = (0, import_react88.useMemo)(() => twMerge(l50({ className: b12, position: u29, radius: w12, shadow: j9, shadowColor: g18, size: v8, color: f22, tone: N2 })), [b12, f22, u29, w12, j9, g18, v8, l50, N2]);
  return (0, import_jsx_runtime60.jsx)("div", Object.assign({ id: C3, ref: m62, className: O6 }, z6, { children: p35 }));
});
m43.displayName = "Ribbon";

// node_modules/@rewind-ui/core/dist/components/Radio/Radio.js
var import_jsx_runtime61 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Radio/RadioGroup.context.js
var [e104, t136] = i8();

// node_modules/@rewind-ui/core/dist/components/Radio/Radio.js
var import_react89 = __toESM(require_react());
var n76 = { color: "dark", disabled: false, radius: "full", size: "md", tone: "solid", withRing: true };
var c46 = (0, import_react89.forwardRef)((t150, c63) => {
  const m62 = H("Radio"), b12 = Object.assign(Object.assign(Object.assign({}, n76), t136()), t150), { children: u29, className: p35 = "", color: N2, defaultChecked: g18, description: h21, descriptionClassName: f22 = "", disabled: j9, error: C3, errorClassName: v8 = "", label: O6, labelClassName: z6 = "", name: R2, setValue: w12, initialValue: x13, value: k3, radius: y7, size: V, tone: $2, withRing: F2 } = b12, G3 = __rest(b12, ["children", "className", "color", "defaultChecked", "description", "descriptionClassName", "disabled", "error", "errorClassName", "label", "labelClassName", "name", "setValue", "initialValue", "value", "radius", "size", "tone", "withRing"]), I = t17(t150.id), P3 = C3 ? "invalid" : "valid", q3 = (0, import_react89.useMemo)(() => twMerge(m62.base({ className: p35, color: N2, radius: y7, size: V, tone: $2, validation: P3, withRing: F2 })), [m62, N2, $2, V, y7, P3, F2, p35]);
  return (0, import_jsx_runtime61.jsxs)("div", Object.assign({ className: "flex items-center" }, { children: [(0, import_jsx_runtime61.jsx)("input", Object.assign({ id: I, ref: c63, type: "radio", "aria-labelledby": `${I}-label`, className: q3, disabled: j9, onChange: (e130) => {
    w12 && w12(e130.target.value);
  }, name: R2, defaultChecked: x13 ? x13 === k3 : g18, value: k3 }, G3)), (0, import_jsx_runtime61.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime61.jsx)("label", Object.assign({ id: `${I}-label`, htmlFor: I, className: twMerge(m62.label({ disabled: j9, size: V, className: z6 })) }, { children: O6 })), h21 && (0, import_jsx_runtime61.jsx)("span", Object.assign({ className: twMerge(m62.description({ disabled: j9, size: V, className: f22 })) }, { children: h21 })), C3 && (0, import_jsx_runtime61.jsx)("span", Object.assign({ className: twMerge(m62.error({ disabled: j9, size: V, className: v8 })) }, { children: C3 }))] }))] }));
});
c46.displayName = "Radio";

// node_modules/@rewind-ui/core/dist/components/Radio/RadioGroup/RadioGroup.js
var import_jsx_runtime62 = __toESM(require_jsx_runtime());
var import_react90 = __toESM(require_react());
var c47 = { orientation: "horizontal" };
var d33 = (0, import_react90.forwardRef)((r123, d44) => {
  const p35 = H("Radio"), u29 = Object.assign(Object.assign({}, c47), r123), { children: f22, className: g18, initialValue: h21, name: j9, onChange: b12, orientation: N2 } = u29, x13 = __rest(u29, ["children", "className", "initialValue", "name", "onChange", "orientation"]), O6 = t17(r123.id), [V, R2] = (0, import_react90.useState)(h21), v8 = { initialValue: h21, name: j9, setValue: R2 }, C3 = (0, import_react90.useMemo)(() => twMerge(p35.group({ className: g18, orientation: N2 })), [p35, N2, g18]);
  return (0, import_react90.useEffect)(() => {
    b12 && b12(V);
  }, [V, b12]), (0, import_jsx_runtime62.jsx)(e104, Object.assign({ value: v8 }, { children: (0, import_jsx_runtime62.jsx)("div", Object.assign({ id: O6, ref: d44, role: "radiogroup", className: C3 }, x13, { children: f22 })) }));
});
d33.displayName = "RadioGroup";

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.js
var import_jsx_runtime64 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Selector/SelectorTab/SelectorTab.js
var import_jsx_runtime63 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.context.js
var [e106, t138] = t("Selector compound components cannot be rendered outside the Selector component");

// node_modules/@rewind-ui/core/dist/components/Selector/SelectorTab/SelectorTab.js
var import_react91 = __toESM(require_react());
var m45 = (0, import_react91.forwardRef)((c63, m62) => {
  const d44 = H("Selector"), b12 = Object.assign(Object.assign({}, t138()), c63), { activeTabAnchor: h21, anchor: p35, children: f22, className: u29 = "", color: j9, disabled: N2 = false, label: g18, orientation: v8, radius: x13, separator: A2, setActiveTabAnchor: w12, shadow: z6, size: S3, tone: T2, withSeparator: O6 } = b12, y7 = __rest(b12, ["activeTabAnchor", "anchor", "children", "className", "color", "disabled", "label", "orientation", "radius", "separator", "setActiveTabAnchor", "shadow", "size", "tone", "withSeparator"]), k3 = t17(c63.id), I = p35 === h21, C3 = "string" == typeof g18 ? g18 : void 0, P3 = (0, import_react91.useMemo)(() => twMerge(d44.tab({ active: I, className: u29, color: j9, orientation: v8, radius: x13, size: S3, tone: T2 })), [I, u29, j9, v8, x13, S3, d44, T2]);
  return (0, import_jsx_runtime63.jsxs)(import_jsx_runtime63.Fragment, { children: [(0, import_jsx_runtime63.jsx)("button", Object.assign({ id: k3, ref: m62, role: "radio", "aria-checked": I, "aria-label": C3, onClick: () => {
    w12(p35);
  }, className: P3, disabled: N2, type: "button", tabIndex: I ? 0 : -1 }, y7, { children: (0, import_jsx_runtime63.jsx)("span", Object.assign({ className: "z-40 h-full flex items-center" }, { children: g18 })) })), O6 && (A2 || (0, import_jsx_runtime63.jsx)("span", { className: d44.separator({ orientation: v8, size: S3 }) }))] });
});
m45.displayName = "SelectorTab";

// node_modules/@rewind-ui/core/dist/hooks/use-horizontal-arrows.hook.js
function t140(t150, n94 = true) {
  r90("ArrowRight", n94, () => {
    var e130, r123;
    if (!n94) return;
    const o123 = document.activeElement;
    if (!o123) return;
    if (!t150) return;
    const u29 = null === (e130 = t150.current) || void 0 === e130 ? void 0 : e130.querySelectorAll('button:not([disabled="true"])');
    if (!u29) return;
    const i58 = [];
    if (u29.forEach((e131) => {
      i58.push(e131.id);
    }), !i58.includes(o123.id)) return;
    const d44 = i58.findIndex((e131) => e131 === o123.id), c63 = i58[d44 + 1] ? d44 + 1 : 0;
    null === (r123 = document.getElementById(i58[c63])) || void 0 === r123 || r123.focus();
  }), r90("ArrowLeft", n94, () => {
    var e130, r123;
    if (!n94) return;
    const o123 = document.activeElement;
    if (!o123) return;
    if (!t150) return;
    const u29 = null === (e130 = t150.current) || void 0 === e130 ? void 0 : e130.querySelectorAll('button:not([disabled="true"])');
    if (!u29) return;
    const i58 = [];
    if (u29.forEach((e131) => {
      i58.push(e131.id);
    }), !i58.includes(o123.id)) return;
    const d44 = i58.findIndex((e131) => e131 === o123.id), c63 = i58[d44 - 1] ? d44 - 1 : i58.length - 1;
    null === (r123 = document.getElementById(i58[c63])) || void 0 === r123 || r123.focus();
  });
}

// node_modules/@rewind-ui/core/dist/components/Selector/Selector.js
var import_react93 = __toESM(require_react());
var w9 = { color: "dark", fullWidth: false, orientation: "horizontal", radius: "lg", shadow: "base", size: "md", tone: "solid", withAnimation: true, withSeparator: true };
var b6 = (0, import_react93.forwardRef)((o123, c63) => {
  const b12 = H("Selector"), g18 = Object.assign(Object.assign({}, w9), o123), { children: v8, className: j9 = "", color: y7, fullWidth: z6, onChange: S3, orientation: x13, radius: A2, separator: N2, shadow: O6, size: T2, tone: P3, value: k3, withAnimation: W2, withSeparator: $2 } = g18, C3 = __rest(g18, ["children", "className", "color", "fullWidth", "onChange", "orientation", "radius", "separator", "shadow", "size", "tone", "value", "withAnimation", "withSeparator"]), R2 = t17(o123.id), q3 = (0, import_react93.useRef)(null), B2 = useMergeRefs([c63 || null, q3]), [I, L] = (0, import_react93.useState)(k3), M3 = (0, import_react93.useRef)(true), D = (0, import_react93.useRef)(null), E3 = (0, import_react93.useRef)(null), [F2, G3] = (0, import_react93.useState)(""), H3 = /* @__PURE__ */ new Map(), J2 = (0, import_react93.useMemo)(() => twMerge(b12.wrapper({ className: j9, fullWidth: z6, orientation: x13, radius: A2, shadow: O6, size: T2 })), [j9, z6, x13, A2, O6, T2, b12]), K2 = (r123, t150, e130, o124 = "md", i58 = "horizontal", a74 = true) => {
    const n94 = r123.getBoundingClientRect(), s74 = n94.width, c64 = n94.height;
    t150.style.setProperty("width", `${s74}px`), t150.style.setProperty("height", `${c64}px`), t150.style.setProperty("top", `${r123.offsetTop}px`), t150.style.setProperty("left", `${r123.offsetLeft}px`), G3(b12.base({ color: H3.get(e130), size: o124, radius: A2, tone: P3, initialRun: a74, withAnimation: W2 }));
  };
  (0, import_react93.useEffect)(() => {
    var r123;
    if (!I) return;
    const t150 = null === (r123 = q3.current) || void 0 === r123 ? void 0 : r123.querySelector('button[aria-checked="true"]');
    return t150 && D.current ? (K2(t150, D.current, I, T2, x13, M3.current), M3.current = false, E3.current = new ResizeObserver((r124) => {
      D.current && K2(t150, D.current, I, T2, x13, M3.current);
    }), E3.current.observe(D.current), () => {
      E3.current && E3.current.disconnect();
    }) : void 0;
  }, [I, y7, z6, x13, A2, T2, P3, W2, $2]), (0, import_react93.useEffect)(() => {
    S3 && !M3.current && S3(I);
  }, [I]);
  const Q2 = { activeTabAnchor: I, color: y7, orientation: x13, radius: A2, separator: N2, setActiveTabAnchor: L, shadow: O6, size: T2, tone: P3, withSeparator: $2 };
  return import_react93.Children.map(v8, (r123) => {
    H3.set(r123.props.anchor, r123.props.color || y7);
  }), t140(q3), (0, import_jsx_runtime64.jsx)(e106, Object.assign({ value: Q2 }, { children: (0, import_jsx_runtime64.jsxs)("div", Object.assign({ id: R2, ref: B2, role: "radiogroup", className: J2 }, C3, { children: [v8, (0, import_jsx_runtime64.jsx)("div", { ref: D, className: F2 })] })) }));
});
b6.displayName = "Selector";
var g13 = Object.assign(b6, { Tab: m45 });

// node_modules/@rewind-ui/core/dist/components/Sidebar/Sidebar.js
var import_jsx_runtime76 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Sidebar/Sidebar.types.js
var e108;
!function(e130) {
  e130.mobile = "MOBILE", e130.toggle = "TOGGLE", e130.hover = "HOVER", e130.expand = "EXPAND";
}(e108 || (e108 = {}));

// node_modules/@rewind-ui/core/dist/components/Sidebar/sidebar.reducer.js
var s61 = (s74, a74) => {
  switch (a74.type) {
    case e108.hover:
      return Object.assign(Object.assign({}, s74), { hovered: a74.payload.hovered, mobile: false });
    case e108.toggle:
      return Object.assign(Object.assign({}, s74), { expanded: !s74.expanded, hovered: false, mobile: false });
    case e108.expand:
      return Object.assign(Object.assign({}, s74), { expanded: a74.payload.expanded, mobile: false });
    case e108.mobile:
      return Object.assign(Object.assign({}, s74), { expanded: true, hovered: false, mobile: !s74.mobile });
  }
  return s74;
};

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarFooter/SidebarFooter.js
var import_jsx_runtime65 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Sidebar/Sidebar.context.js
var [e109, n79] = t("Sidebar compound components cannot be rendered outside the Sidebar component");

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarFooter/SidebarFooter.js
var import_react94 = __toESM(require_react());
var s62 = (0, import_react94.forwardRef)((m62, s74) => {
  const c63 = H("Sidebar"), { children: l50, className: n94 } = m62, p35 = __rest(m62, ["children", "className"]), { color: f22, state: h21 } = n79(), b12 = (0, import_react94.useMemo)(() => twMerge(c63.footer({ className: n94, color: f22, expanded: h21.expanded, hovered: h21.hovered, mobile: h21.mobile })), [n94, f22, h21, c63]), x13 = t17(m62.id);
  return (0, import_jsx_runtime65.jsx)("div", Object.assign({ id: x13, ref: s74, className: b12 }, p35, { children: (h21.expanded || h21.hovered) && l50 }));
});
s62.displayName = "SidebarFooter";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHead.js
var import_jsx_runtime70 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHeadLogo/SidebarHeadLogo.js
var import_jsx_runtime66 = __toESM(require_jsx_runtime());
var import_react95 = __toESM(require_react());
var a60 = (0, import_react95.forwardRef)((o123, a74) => {
  const c63 = H("Sidebar"), { children: d44, className: l50 } = o123, n94 = __rest(o123, ["children", "className"]), p35 = (0, import_react95.useMemo)(() => twMerge(c63.headLogo({ className: l50 })), [l50, c63]), f22 = t17(o123.id);
  return (0, import_jsx_runtime66.jsx)("div", Object.assign({ id: f22, ref: a74, className: p35 }, n94, { children: d44 }));
});
a60.displayName = "SidebarHeadLogo";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHeadTitle/SidebarHeadTitle.js
var import_jsx_runtime67 = __toESM(require_jsx_runtime());
var import_react96 = __toESM(require_react());
var s63 = (0, import_react96.forwardRef)((o123, s74) => {
  const c63 = H("Sidebar"), { children: l50, className: n94 } = o123, p35 = __rest(o123, ["children", "className"]), { state: f22 } = n79(), h21 = (0, import_react96.useMemo)(() => twMerge(c63.headTitle({ className: n94, opened: f22.expanded || f22.hovered || f22.mobile })), [n94, c63]), b12 = t17(o123.id);
  return (0, import_jsx_runtime67.jsx)("div", Object.assign({ id: b12, ref: s74, className: h21 }, p35, { children: (f22.expanded || f22.hovered) && l50 }));
});
s63.displayName = "SidebarHeadTitle";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHeadToggle/SidebarHeadToggle.js
var import_jsx_runtime69 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/icons/LeftToLine.js
var import_jsx_runtime68 = __toESM(require_jsx_runtime());
var l43 = ({ className: l50 }) => (0, import_jsx_runtime68.jsxs)("svg", Object.assign({ xmlns: "http://www.w3.org/2000/svg", fill: "currentColor", style: { flexShrink: 0 }, viewBox: "0 0 448 512", className: l50 }, { children: [(0, import_jsx_runtime68.jsx)("path", { d: "M107.3 283.3L230.1 406.1c6.4 6.4 15 9.9 24 9.9c18.7 0 33.9-15.2 33.9-33.9l0-62.1 128 0c17.7 0 32-14.3 32-32l0-64c0-17.7-14.3-32-32-32l-128 0 0-62.1c0-18.7-15.2-33.9-33.9-33.9c-9 0-17.6 3.6-24 9.9L107.3 228.7C100.1 235.9 96 245.8 96 256s4.1 20.1 11.3 27.3z" }), (0, import_jsx_runtime68.jsx)("path", { style: { opacity: 0.25 }, d: "M32 64c17.7 0 32 14.3 32 32l0 320c0 17.7-14.3 32-32 32s-32-14.3-32-32L0 96C0 78.3 14.3 64 32 64z" })] }));

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHeadToggle/SidebarHeadToggle.js
var import_react97 = __toESM(require_react());
var l44 = (0, import_react97.forwardRef)((d44, l50) => {
  const n94 = H("Sidebar"), { className: c63, onClick: g18 } = d44, f22 = __rest(d44, ["className", "onClick"]), { color: x13, state: b12, dispatch: h21 } = n79(), j9 = (0, import_react97.useMemo)(() => twMerge(n94.headToggle({ className: c63, color: x13 })), [c63, x13, n94]), u29 = t17(d44.id);
  return (0, import_jsx_runtime69.jsx)("button", Object.assign({ id: u29, ref: l50, type: "button", title: b12.expanded ? "Collapse" : "Expand", "aria-pressed": b12.expanded, "aria-expanded": b12.expanded, "data-role": "sidebar-head-toggle", className: j9, onClick: (e130) => {
    h21({ type: e108.toggle }), g18 && g18(e130);
  } }, f22, { children: (0, import_jsx_runtime69.jsx)(l43, { className: n94.headToggleIcon({ expanded: b12.expanded }) }) }));
});
l44.displayName = "SidebarHeadToggle";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarHead/SidebarHead.js
var import_react98 = __toESM(require_react());
var b7 = (0, import_react98.forwardRef)((i58, t150) => {
  const a74 = H("Sidebar"), { children: d44, className: b12 } = i58, n94 = __rest(i58, ["children", "className"]), { state: p35, color: g18 } = n79(), f22 = (0, import_react98.useMemo)(() => twMerge(a74.head({ className: b12, color: g18, mobile: p35.mobile })), [b12, g18, p35, a74]), j9 = t17(i58.id);
  return (0, import_jsx_runtime70.jsx)("div", Object.assign({ id: j9, className: f22, ref: t150 }, n94, { children: d44 }));
});
b7.displayName = "SidebarHead";
var n80 = Object.assign(b7, { Logo: a60, Title: s63, Toggle: l44 });

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNav.js
var import_jsx_runtime74 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSection.js
var import_jsx_runtime73 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSectionItem/SidebarNavSectionItem.js
var import_jsx_runtime71 = __toESM(require_jsx_runtime());
var import_react99 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSectionItem/SidebarNavSectionItem.context.js
var [e110, t143] = i8();

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSectionItem/SidebarNavSectionItem.js
var h17 = (0, import_react99.forwardRef)((r123, h21) => {
  const v8 = H("Sidebar"), { active: f22 = false, children: j9, className: I, as: N2 = "a", asProps: S3, href: C3 = "#", label: g18, icon: O6, collapsed: u29 = true, onClick: x13 } = r123, k3 = __rest(r123, ["active", "children", "className", "as", "asProps", "href", "label", "icon", "collapsed", "onClick"]), { color: P3, state: w12 } = n79(), y7 = w12.expanded || w12.hovered, [L, W2] = (0, import_react99.useState)(false === y7 || u29), D = (0, import_react99.useMemo)(() => twMerge(v8.navSectionItem({ active: f22, className: I, color: P3, opened: y7 })), [f22, I, P3, y7, v8]), q3 = t17(r123.id), z6 = N2 || "a", A2 = "button" === N2 ? { type: "button" } : { href: C3 }, B2 = { childrenCollapsed: L }, { childrenCollapsed: E3 } = t143();
  return (0, import_jsx_runtime71.jsxs)("li", Object.assign({ id: q3, ref: h21, className: v8.navSectionItemWrapper({ opened: y7 }) }, k3, { children: [(0, import_jsx_runtime71.jsxs)(z6, Object.assign({}, A2, S3, { className: D, onClick: (e130) => {
    W2(!L), x13 && x13(e130);
  }, tabIndex: E3 ? -1 : 0 }, { children: [O6 && (0, import_jsx_runtime71.jsx)("span", Object.assign({ className: v8.navSectionItemIcon() }, { children: O6 })), (0, import_jsx_runtime71.jsxs)("div", Object.assign({ className: v8.navSectionItemLabelWrapper({ opened: y7 }) }, { children: [(0, import_jsx_runtime71.jsx)("span", Object.assign({ className: v8.navSectionItemLabel() }, { children: g18 })), j9 && (0, import_jsx_runtime71.jsx)(n7, { className: v8.navSectionItemCollapseIcon({ collapsed: L }) })] }))] })), j9 && y7 && (0, import_jsx_runtime71.jsx)(e110, Object.assign({ value: B2 }, { children: (0, import_jsx_runtime71.jsx)(n4, Object.assign({ isOpen: !L }, { children: j9 })) }))] }));
});
h17.displayName = "SidebarNavSectionItem";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSectionTitle/SidebarNavSectionTitle.js
var import_jsx_runtime72 = __toESM(require_jsx_runtime());
var import_react100 = __toESM(require_react());
var c51 = (0, import_react100.forwardRef)((m62, c63) => {
  const l50 = H("Sidebar"), { children: n94, className: d44 } = m62, p35 = __rest(m62, ["children", "className"]), { color: f22, state: h21 } = n79(), N2 = h21.expanded || h21.hovered, b12 = (0, import_react100.useMemo)(() => twMerge(l50.navSectionTitle({ className: d44, color: f22, opened: N2 })), [d44, f22, N2, l50]), j9 = t17(m62.id);
  return (0, import_jsx_runtime72.jsx)("li", Object.assign({ id: j9, ref: c63, className: b12 }, p35, { children: n94 }));
});
c51.displayName = "SidebarNavSectionTitle";

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNavSection/SidebarNavSection.js
var import_react101 = __toESM(require_react());
var n81 = (0, import_react101.forwardRef)((r123, o123) => {
  const s74 = H("Sidebar"), { children: n94, className: d44, isChild: S3 = false } = r123, p35 = __rest(r123, ["children", "className", "isChild"]), { color: b12 } = n79(), f22 = (0, import_react101.useMemo)(() => twMerge(s74.navSection({ className: d44, color: b12, isChild: S3 })), [d44, b12, S3, s74]), N2 = t17(r123.id);
  return (0, import_jsx_runtime73.jsx)("ul", Object.assign({ id: N2, className: f22, ref: o123 }, p35, { children: n94 }));
});
n81.displayName = "SidebarNavSection";
var d37 = Object.assign(n81, { Title: c51, Item: h17 });

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarNav/SidebarNav.js
var import_react102 = __toESM(require_react());
var n82 = (0, import_react102.forwardRef)((t150, m62) => {
  const n94 = H("Sidebar"), { children: d44, className: l50 } = t150, p35 = __rest(t150, ["children", "className"]), { color: b12, state: f22 } = n79(), N2 = (0, import_react102.useMemo)(() => twMerge(n94.nav({ className: l50, color: b12, opened: f22.expanded || f22.hovered || f22.mobile })), [l50, b12, f22, n94]), S3 = t17(t150.id);
  return (0, import_jsx_runtime74.jsx)("nav", Object.assign({ id: S3, className: N2, ref: m62 }, p35, { children: d44 }));
});
n82.displayName = "SidebarNav";
var d38 = Object.assign(n82, { Section: d37 });

// node_modules/@rewind-ui/core/dist/components/Sidebar/SidebarSeparator/SidebarSeparator.js
var import_jsx_runtime75 = __toESM(require_jsx_runtime());
var import_react103 = __toESM(require_react());
var c53 = (0, import_react103.forwardRef)((a74, c63) => {
  const p35 = H("Sidebar"), { className: l50 } = a74, d44 = __rest(a74, ["className"]), { color: f22 } = n79(), n94 = (0, import_react103.useMemo)(() => twMerge(p35.separator({ className: l50, color: f22 })), [l50, f22, p35]), b12 = t17(a74.id);
  return (0, import_jsx_runtime75.jsx)("hr", Object.assign({ id: b12, className: n94, ref: c63 }, d44));
});
c53.displayName = "SidebarSeparator";

// node_modules/@rewind-ui/core/dist/components/Sidebar/Sidebar.js
var import_react104 = __toESM(require_react());
var f18 = { color: "slate", expanded: true, shadow: "lg" };
var j7 = (0, import_react104.forwardRef)((t150, d44) => {
  const i58 = H("Sidebar"), s74 = Object.assign(Object.assign({}, f18), t150), { children: l50, color: j9, expanded: v8 = true, className: S3, onToggle: u29, shadow: x13 } = s74, y7 = __rest(s74, ["children", "color", "expanded", "className", "onToggle", "shadow"]), N2 = (0, import_react104.useRef)(false), [w12, O6] = (0, import_react104.useReducer)(s61, { hovered: false, expanded: v8, mobile: false }), E3 = twMerge(i58.base({ className: S3, color: j9, shadow: x13, expanded: w12.expanded, hovered: w12.hovered, mobile: w12.mobile })), F2 = t17(t150.id), H3 = { color: j9, dispatch: O6, state: w12 };
  (0, import_react104.useEffect)(() => {
    N2.current ? "function" == typeof u29 && u29(w12) : N2.current = true;
  }, [w12, u29]);
  const L = (e130) => {
    O6({ type: e108.mobile });
  };
  return (0, import_react104.useEffect)(() => (document.addEventListener("sidebar:toggle-mobile", L), () => {
    document.removeEventListener("sidebar:toggle-mobile", L);
  })), (0, import_jsx_runtime76.jsx)("aside", Object.assign({ id: F2, ref: d44, className: E3, onMouseEnter: (e130) => {
    "sidebar-head-toggle" !== e130.target.dataset.role && (w12.expanded || O6({ type: e108.hover, payload: { hovered: true } }));
  }, onMouseLeave: () => {
    w12.expanded || O6({ type: e108.hover, payload: { hovered: false } });
  } }, y7, { children: (0, import_jsx_runtime76.jsx)(e109, Object.assign({ value: H3 }, { children: l50 })) }));
});
j7.displayName = "Sidebar";
var v6 = Object.assign(j7, { Head: n80, Nav: d38, Separator: c53, Footer: s62 });

// node_modules/@rewind-ui/core/dist/components/Sidebar/use-sidebar.hook.js
var e112 = () => ({ toggleMobile: () => {
  const e130 = new CustomEvent("sidebar:toggle-mobile", {});
  document.dispatchEvent(e130);
} });

// node_modules/@rewind-ui/core/dist/components/Switch/Switch.js
var import_jsx_runtime77 = __toESM(require_jsx_runtime());
var import_react105 = __toESM(require_react());
var m51 = { color: "dark", radius: "full", size: "md", withRing: true };
var f19 = (0, import_react105.forwardRef)((r123, f22) => {
  const h21 = H("Switch"), b12 = Object.assign(Object.assign({}, m51), r123), { className: u29 = "", checked: g18 = false, color: p35, disabled: N2, onChange: j9, radius: y7, size: C3, withRing: w12, label: z6, labelClassName: O6 = "", description: x13, descriptionClassName: k3 = "", error: v8, errorClassName: S3 = "" } = b12, R2 = __rest(b12, ["className", "checked", "color", "disabled", "onChange", "radius", "size", "withRing", "label", "labelClassName", "description", "descriptionClassName", "error", "errorClassName"]), X2 = t17(r123.id), [$2, E3] = (0, import_react105.useState)(g18), H3 = (0, import_react105.useRef)(null), W2 = (0, import_react105.useRef)(true), A2 = $2 ? "active" : "inactive", F2 = (0, import_react105.useMemo)(() => twMerge(h21.base({ className: u29, color: p35, radius: y7, size: C3, state: A2, withRing: w12 })), [h21, p35, C3, y7, A2, w12, u29]);
  return (0, import_react105.useEffect)(() => {
    const e130 = H3.current;
    if (!e130) return;
    if (W2.current) return e130.style.justifySelf = $2 ? "end" : "start", e130.style.transform = "", void (W2.current = false);
    const s74 = e130.getAnimations();
    s74.length > 0 && s74.forEach((e131) => {
      e131.cancel();
    });
    const a74 = e130.parentElement;
    if (!a74) return;
    const t150 = a74.scrollWidth - e130.offsetWidth - (a74.scrollHeight - e130.offsetHeight), i58 = $2 ? "translateX(0)" : `translateX(${t150}px)`, r124 = $2 ? `translateX(${t150}px)` : "translateX(0)";
    e130.style.justifySelf = "";
    e130.animate({ transform: [i58, r124] }, { duration: 50 }).onfinish = () => {
      e130.style.transform = "", e130.style.justifySelf = $2 ? "end" : "start";
    };
  }, [$2]), (0, import_react105.useEffect)(() => {
    j9 && !W2.current && j9($2);
  }, [$2]), (0, import_jsx_runtime77.jsxs)("div", Object.assign({ onClick: () => {
    N2 || E3(!$2);
  }, className: "flex items-center" }, { children: [(0, import_jsx_runtime77.jsx)("button", Object.assign({ ref: f22, className: F2, role: "switch", "aria-checked": $2, "aria-labelledby": `${X2}-label`, disabled: N2 }, R2, { children: (0, import_jsx_runtime77.jsx)("span", { ref: H3, className: h21.inner({ radius: y7, size: C3, state: A2 }) }) })), (0, import_jsx_runtime77.jsxs)("div", Object.assign({ className: "grid grid-cols-1 justify-items-start" }, { children: [(0, import_jsx_runtime77.jsx)("label", Object.assign({ id: `${X2}-label`, htmlFor: X2, className: twMerge(h21.label({ disabled: N2, size: C3, className: O6 })) }, { children: z6 })), x13 && (0, import_jsx_runtime77.jsx)("span", Object.assign({ className: twMerge(h21.description({ disabled: N2, size: C3, className: k3 })) }, { children: x13 })), v8 && (0, import_jsx_runtime77.jsx)("span", Object.assign({ className: twMerge(h21.error({ disabled: N2, size: C3, className: S3 })) }, { children: v8 }))] }))] }));
});
f19.displayName = "Switch";

// node_modules/@rewind-ui/core/dist/components/Table/Table.js
var import_jsx_runtime84 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Table/Table.context.js
var [e113, n84] = t("Table compound components cannot be rendered outside the Table component");

// node_modules/@rewind-ui/core/dist/components/Table/Tbody/Tbody.js
var import_jsx_runtime78 = __toESM(require_jsx_runtime());
var import_react106 = __toESM(require_react());
var m52 = {};
var a66 = (0, import_react106.forwardRef)((i58, a74) => {
  const c63 = Object.assign(Object.assign({}, m52), i58), { className: l50, children: d44 } = c63, n94 = __rest(c63, ["className", "children"]), { borderStyle: b12, horizontalBorders: p35, size: f22 } = n84(), h21 = H("Table"), j9 = t17(i58.id);
  return (0, import_jsx_runtime78.jsx)("tbody", Object.assign({ id: j9, ref: a74, className: h21.tbody({ borderStyle: b12, horizontalBorders: p35, size: f22 }) }, n94, { children: d44 }));
});
a66.displayName = "Tbody";

// node_modules/@rewind-ui/core/dist/components/Table/Td/Td.js
var import_jsx_runtime79 = __toESM(require_jsx_runtime());
var import_react107 = __toESM(require_react());
var o110 = {};
var a67 = (0, import_react107.forwardRef)((m62, a74) => {
  const c63 = Object.assign(Object.assign({}, o110), m62), { className: l50, children: n94 } = c63, d44 = __rest(c63, ["className", "children"]), p35 = H("Table"), f22 = t17(m62.id), { size: j9 } = n84();
  return (0, import_jsx_runtime79.jsx)("td", Object.assign({ id: f22, ref: a74, className: p35.td({ className: l50, size: j9 }) }, d44, { children: n94 }));
});
a67.displayName = "Td";

// node_modules/@rewind-ui/core/dist/components/Table/Tfoot/Tfoot.js
var import_jsx_runtime80 = __toESM(require_jsx_runtime());
var import_react108 = __toESM(require_react());
var m54 = {};
var a68 = (0, import_react108.forwardRef)((i58, a74) => {
  const c63 = Object.assign(Object.assign({}, m54), i58), { className: l50, children: f22 } = c63, n94 = __rest(c63, ["className", "children"]), { borderStyle: d44, footerBorders: p35, size: b12 } = n84(), j9 = H("Table"), h21 = t17(i58.id);
  return (0, import_jsx_runtime80.jsx)("tfoot", Object.assign({ id: h21, ref: a74, className: j9.tfoot({ borderStyle: d44, footerBorders: p35, size: b12 }) }, n94, { children: f22 }));
});
a68.displayName = "Tfoot";

// node_modules/@rewind-ui/core/dist/components/Table/Th/Th.js
var import_jsx_runtime81 = __toESM(require_jsx_runtime());
var import_react109 = __toESM(require_react());
var o111 = {};
var a69 = (0, import_react109.forwardRef)((m62, a74) => {
  const c63 = Object.assign(Object.assign({}, o111), m62), { className: l50, children: n94 } = c63, p35 = __rest(c63, ["className", "children"]), h21 = H("Table"), d44 = t17(m62.id), { size: f22 } = n84();
  return (0, import_jsx_runtime81.jsx)("th", Object.assign({ id: d44, ref: a74, className: h21.th({ className: l50, size: f22 }) }, p35, { children: n94 }));
});
a69.displayName = "Th";

// node_modules/@rewind-ui/core/dist/components/Table/Thead/Thead.js
var import_jsx_runtime82 = __toESM(require_jsx_runtime());
var import_react110 = __toESM(require_react());
var i54 = {};
var m56 = (0, import_react110.forwardRef)((a74, m62) => {
  const d44 = Object.assign(Object.assign({}, i54), a74), { className: c63, children: l50 } = d44, h21 = __rest(d44, ["className", "children"]), { borderStyle: n94, headerBorders: p35, headerColor: b12, size: f22 } = n84(), j9 = H("Table"), u29 = t17(a74.id);
  return (0, import_jsx_runtime82.jsx)("thead", Object.assign({ id: u29, ref: m62, className: j9.thead({ borderStyle: n94, headerBorders: p35, headerColor: b12, size: f22 }) }, h21, { children: l50 }));
});
m56.displayName = "Thead";

// node_modules/@rewind-ui/core/dist/components/Table/Tr/Tr.js
var import_jsx_runtime83 = __toESM(require_jsx_runtime());
var import_react112 = __toESM(require_react());
var m57 = { color: "none" };
var d39 = (0, import_react112.forwardRef)((s74, d44) => {
  const p35 = Object.assign(Object.assign({}, m57), s74), { className: b12, children: v8, color: u29 } = p35, f22 = __rest(p35, ["className", "children", "color"]), { borderStyle: h21, verticalBorders: j9, hoverable: N2, striped: g18, stripePosition: B2 } = n84(), O6 = H("Table"), T2 = (0, import_react112.useRef)(null), x13 = useMergeRefs([T2, d44 || null]), y7 = t17(s74.id), [P3, S3] = (0, import_react112.useState)(O6.tr({ borderStyle: h21, verticalBorders: j9, className: b12, color: u29, hoverable: N2, striped: g18 }));
  return (0, import_react112.useEffect)(() => {
    var r123, e130;
    const o123 = null === (e130 = null === (r123 = null == T2 ? void 0 : T2.current) || void 0 === r123 ? void 0 : r123.parentElement) || void 0 === e130 ? void 0 : e130.tagName;
    S3(O6.tr({ borderStyle: h21, verticalBorders: j9, className: b12, color: u29, hoverable: "TBODY" === o123 && N2, striped: "TBODY" === o123 && g18, stripePosition: B2 }));
  }, [h21, b12, u29, N2, g18, B2, O6, j9]), (0, import_jsx_runtime83.jsx)("tr", Object.assign({ id: y7, ref: x13, className: P3 }, f22, { children: v8 }));
});
d39.displayName = "Tr";

// node_modules/@rewind-ui/core/dist/components/Table/Table.js
var import_react113 = __toESM(require_react());
var n86 = { borderStyle: "solid", footerBorders: true, headerBorders: true, headerColor: "gray", horizontalBorders: true, hoverable: true, outerBorders: true, radius: "lg", size: "md", striped: true, stripePosition: "even", verticalBorders: false };
var p30 = (0, import_react113.forwardRef)((s74, t150) => {
  const d44 = Object.assign(Object.assign({}, n86), s74), { borderStyle: i58, children: a74, className: l50, color: h21, footerBorders: p35, headerBorders: b12, headerColor: f22, horizontalBorders: B2, hoverable: T2, outerBorders: j9, radius: u29, size: v8, striped: y7, stripePosition: z6, verticalBorders: g18 } = d44, N2 = __rest(d44, ["borderStyle", "children", "className", "color", "footerBorders", "headerBorders", "headerColor", "horizontalBorders", "hoverable", "outerBorders", "radius", "size", "striped", "stripePosition", "verticalBorders"]), O6 = H("Table"), P3 = t17(s74.id), S3 = { borderStyle: i58, footerBorders: p35, headerBorders: b12, headerColor: f22, horizontalBorders: B2, hoverable: T2, outerBorders: j9, size: v8, striped: y7, stripePosition: z6, verticalBorders: g18 };
  return (0, import_jsx_runtime84.jsx)(e113, Object.assign({ value: S3 }, { children: (0, import_jsx_runtime84.jsx)("div", Object.assign({ id: P3, ref: t150, className: O6.wrapper({ borderStyle: i58, className: l50, outerBorders: j9, radius: u29 }) }, N2, { children: (0, import_jsx_runtime84.jsx)("table", Object.assign({ className: O6.table({ radius: u29, size: v8 }) }, { children: a74 })) })) }));
});
p30.displayName = "Table";
var b9 = Object.assign(p30, { Thead: m56, Tbody: a66, Tfoot: a68, Tr: d39, Th: a69, Td: a67 });

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.js
var import_jsx_runtime88 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tabs/Tab/Tab.js
var import_jsx_runtime85 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.context.js
var [e116, n87] = t("Tabs compound components cannot be rendered outside the Tabs component");

// node_modules/@rewind-ui/core/dist/components/Tabs/Tab/Tab.js
var import_react114 = __toESM(require_react());
var c57 = (0, import_react114.forwardRef)((o123, c63) => {
  const n94 = H("Tabs"), { anchor: l50, children: m62, className: b12 } = o123, d44 = __rest(o123, ["anchor", "children", "className"]), { activeTabAnchor: h21, baseId: p35, color: f22, fullWidth: u29, radius: j9, setActiveTabAnchor: x13, size: N2, tone: T2 } = Object.assign({}, n87()), v8 = `tab-${p35}-${l50}`, $2 = `tabpanel-${p35}-${l50}`, g18 = l50 === h21, A2 = g18 ? "active" : "inactive", y7 = (0, import_react114.useMemo)(() => twMerge(n94.tab({ className: b12, color: f22, fullWidth: u29, radius: j9, size: N2, state: A2, tone: T2 })), [b12, f22, u29, j9, N2, A2, n94, T2]);
  return (0, import_jsx_runtime85.jsx)("button", Object.assign({ id: v8, ref: c63, type: "button", role: "tab", "aria-selected": g18, "aria-controls": $2, tabIndex: g18 ? 0 : -1, onClick: () => {
    x13(l50);
  }, className: y7 }, d44, { children: m62 }));
});
c57.displayName = "Tab";

// node_modules/@rewind-ui/core/dist/components/Tabs/TabContent/TabContent.js
var import_jsx_runtime86 = __toESM(require_jsx_runtime());
var r115 = (r123) => {
  const { activeTabAnchor: o123, baseId: i58, method: l50 } = n87(), { anchor: c63, children: b12 } = r123, d44 = __rest(r123, ["anchor", "children"]), s74 = `tabpanel-${i58}-${c63}`, m62 = `tab-${i58}-${c63}`, h21 = c63 === o123, p35 = (0, import_jsx_runtime86.jsx)("div", Object.assign({ id: s74, style: { display: h21 ? "block" : "none" }, role: "tabpanel", "aria-labelledby": m62, "aria-hidden": !h21 }, d44, { children: b12 }));
  return "unmount" === l50 ? h21 ? p35 : (0, import_jsx_runtime86.jsx)(import_jsx_runtime86.Fragment, {}) : p35;
};
r115.displayName = "TabContent";

// node_modules/@rewind-ui/core/dist/components/Tabs/TabList/TabList.js
var import_jsx_runtime87 = __toESM(require_jsx_runtime());
var import_react115 = __toESM(require_react());
var m58 = (m62) => {
  const { children: l50, className: n94 = "" } = m62, c63 = __rest(m62, ["children", "className"]), p35 = (0, import_react115.useRef)(null), d44 = H("Tabs"), h21 = t17(m62.id);
  return t140(p35), (0, import_jsx_runtime87.jsx)("div", Object.assign({ id: h21, ref: p35, role: "tablist", "aria-orientation": "horizontal", className: twMerge(d44.list({ className: n94 })) }, c63, { children: l50 }));
};
m58.displayName = "TabList";

// node_modules/@rewind-ui/core/dist/components/Tabs/Tabs.js
var import_react116 = __toESM(require_react());
var c58 = { color: "dark", method: "hide", radius: "none", size: "md", tone: "line" };
var l49 = (0, import_react116.forwardRef)((o123, i58) => {
  const r123 = Object.assign(Object.assign({}, c58), o123), { children: n94, color: l50, defaultTab: b12, fullWidth: f22, method: h21, radius: u29, size: p35, tone: T2 } = r123, j9 = __rest(r123, ["children", "color", "defaultTab", "fullWidth", "method", "radius", "size", "tone"]), g18 = H("Tabs"), O6 = t17(o123.id), [v8, x13] = (0, import_react116.useState)(b12), z6 = { activeTabAnchor: v8, baseId: O6, color: l50, fullWidth: f22, method: h21, radius: u29, setActiveTabAnchor: x13, size: p35, tone: T2 };
  return (0, import_jsx_runtime88.jsx)(e116, Object.assign({ value: z6 }, { children: (0, import_jsx_runtime88.jsx)("div", Object.assign({ id: O6, ref: i58, className: g18.wrapper({ fullWidth: f22 }) }, j9, { children: n94 })) }));
});
l49.displayName = "Tabs";
var b10 = Object.assign(l49, { Tab: c57, List: m58, Content: r115 });

// node_modules/@rewind-ui/core/dist/components/Text/Text.js
var import_jsx_runtime89 = __toESM(require_jsx_runtime());
var import_react117 = __toESM(require_react());
var o114 = { color: "dark", leading: "normal", size: "base", tracking: "normal", weight: "normal" };
var c59 = (0, import_react117.forwardRef)((s74, c63) => {
  const m62 = d6("Text", s74.variant), l50 = H("Text"), g18 = Object.assign(Object.assign(Object.assign({}, o114), m62), s74), { as: d44, children: h21, className: p35 = "", color: f22, leading: j9, size: x13, tracking: b12, variant: k3, weight: u29 } = g18, N2 = __rest(g18, ["as", "children", "className", "color", "leading", "size", "tracking", "variant", "weight"]), v8 = (0, import_react117.useMemo)(() => l50({ className: p35, color: f22, leading: j9, size: x13, tracking: b12, weight: u29 }), [p35, f22, j9, x13, l50, b12, u29]), w12 = d44 || "span", z6 = t17(s74.id);
  return (0, import_jsx_runtime89.jsx)(w12, Object.assign({ id: z6, ref: c63, className: v8 }, N2, { children: h21 }));
});
c59.displayName = "Text";

// node_modules/@rewind-ui/core/dist/components/Toast/Toast.js
var import_jsx_runtime90 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Toast/use-toast.hook.js
var t145 = () => ({ add: (t150) => {
  const e130 = new CustomEvent("toasts:add", { detail: t150 });
  document.dispatchEvent(e130);
}, update: (t150) => {
  const e130 = new CustomEvent("toasts:update", { detail: t150 });
  document.dispatchEvent(e130);
}, remove: (t150) => {
  const e130 = new CustomEvent("toasts:remove", { detail: { id: t150 } });
  document.dispatchEvent(e130);
}, clear: () => {
  const t150 = new CustomEvent("toasts:clear", {});
  document.dispatchEvent(t150);
} });

// node_modules/@rewind-ui/core/dist/components/Toast/Toast.js
var import_react118 = __toESM(require_react());
var v7 = { closeOnClick: true, color: "blue", pauseOnHover: true, radius: "lg", shadow: "base", shadowColor: "gray", showProgress: true, tone: "solid" };
var O5 = { error: (0, import_jsx_runtime90.jsx)(c3, {}), info: (0, import_jsx_runtime90.jsx)(s11, {}), question: (0, import_jsx_runtime90.jsx)(t19, {}), success: (0, import_jsx_runtime90.jsx)(e15, {}), warning: (0, import_jsx_runtime90.jsx)(s12, {}) };
var b11 = (0, import_react118.forwardRef)((t150, n94) => {
  const i58 = d6("Toast", t150.variant), a74 = H("Toast"), c63 = Object.assign(Object.assign(Object.assign({}, v7), i58), t150), { actions: u29 = [], className: b12 = "", closeOnClick: w12, color: N2, description: C3 = "", duration: k3 = 3e3, halted: y7 = false, iconType: T2, pauseOnHover: x13, radius: A2, shadow: F2, shadowColor: P3, showProgress: q3, title: H3 = "", tone: I, variant: W2 } = c63, E3 = __rest(c63, ["actions", "className", "closeOnClick", "color", "description", "duration", "halted", "iconType", "pauseOnHover", "radius", "shadow", "shadowColor", "showProgress", "title", "tone", "variant"]), [M3, $2] = (0, import_react118.useState)(y7), [D, L] = (0, import_react118.useState)(y7 ? 1e3 : 0), Q2 = t145(), S3 = t17(t150.id), z6 = (0, import_react118.useRef)(null), B2 = (0, import_react118.useRef)(null), G3 = !!H3, J2 = (0, import_react118.useMemo)(() => twMerge(a74.toast({ className: b12, color: N2, tone: I, radius: A2, shadow: F2, shadowColor: P3 })), [b12, N2, I, A2, F2, P3, a74]), K2 = (e130) => {
    B2.current || (B2.current = e130);
    e130 - (B2.current || 0) >= 50 && (L((e131) => e131 + 50), B2.current = e130), z6.current = requestAnimationFrame(K2);
  };
  return (0, import_react118.useEffect)(() => {
    if (M3 || (z6.current = requestAnimationFrame(K2)), x13) return () => {
      z6.current && cancelAnimationFrame(z6.current), B2.current && cancelAnimationFrame(B2.current);
    };
  }, [M3]), (0, import_react118.useEffect)(() => {
    k3 && D >= k3 && Q2.remove(S3);
  }, [D]), (0, import_jsx_runtime90.jsxs)("div", Object.assign({ id: S3, ref: n94, role: "alert", "aria-live": "assertive", onMouseEnter: () => $2(true), onMouseLeave: () => $2(false), className: J2 }, E3, { children: [k3 > 0 && q3 && (0, import_jsx_runtime90.jsx)("div", Object.assign({ className: a74.progress({ color: N2, tone: I }) }, { children: (0, import_jsx_runtime90.jsx)("div", { className: a74.progressInner({ color: N2, tone: I }), style: { width: 100 * D / k3 + "%", transitionDuration: "50ms" } }) })), (0, import_jsx_runtime90.jsxs)("div", Object.assign({ className: a74.contentWrapper({ closeOnClick: w12 }), onClick: () => {
    w12 && Q2.remove(S3);
  } }, { children: [T2 && O5[T2], (0, import_jsx_runtime90.jsxs)("div", Object.assign({ className: a74.content() }, { children: [H3 && (0, import_jsx_runtime90.jsx)("h4", Object.assign({ className: a74.title() }, { children: H3 })), C3 && (0, import_jsx_runtime90.jsx)("p", Object.assign({ className: a74.description({ hasTitle: G3 }) }, { children: C3 }))] }))] })), u29.length > 0 && (0, import_jsx_runtime90.jsx)("div", Object.assign({ className: a74.actionsWrapper({ tone: I, color: N2 }) }, { children: u29.map((e130, r123) => (0, import_jsx_runtime90.jsx)("button", Object.assign({ className: a74.action({ primary: e130.primary, tone: I, color: N2 }), onClick: e130.onClick }, { children: e130.label }), `action-${S3}-${r123}`)) }))] }));
});
b11.displayName = "Toast";

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var import_jsx_runtime91 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/toast.reducer.js
var a73;
!function(a74) {
  a74.add = "ADD", a74.update = "UPDATE", a74.remove = "REMOVE", a74.clear = "CLEAR";
}(a73 || (a73 = {}));
var e121 = (e130, t150) => {
  switch (t150.type) {
    case a73.add:
      if (e130.length >= (t150.max || 3)) return [...e130];
      if (e130.find((a74) => a74.id === t150.payload.id)) return [...e130];
      if (!t150.payload.id) {
        const a74 = Math.random().toString(36);
        t150.payload.id = `toast-${a74}`;
      }
      return [t150.payload, ...e130];
    case a73.update:
      return e130.map((a74) => a74.id === t150.payload.id ? Object.assign(Object.assign({}, a74), t150.payload) : a74);
    case a73.remove:
      return e130.filter((a74) => a74.id !== t150.payload.id);
    case a73.clear:
      return [];
    default:
      return e130;
  }
};

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var import_react126 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var e124 = __toESM(require_react());
var import_react124 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-force-update.js
var import_react120 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-is-mounted.js
var import_react119 = __toESM(require_react());
function o116() {
  const o123 = (0, import_react119.useRef)(false);
  return m15(() => (o123.current = true, () => {
    o123.current = false;
  }), []), o123;
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-force-update.js
function m59() {
  const m62 = o116(), [n94, f22] = (0, import_react120.useState)(0), p35 = (0, import_react120.useCallback)(() => {
    m62.current && f22(n94 + 1);
  }, [n94]);
  return [(0, import_react120.useCallback)(() => o58.postRender(p35), [p35]), n94];
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var e123 = __toESM(require_react());
var import_react122 = __toESM(require_react());

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PopChild.js
var t146 = __toESM(require_react());
var import_react121 = __toESM(require_react());
var o118 = class extends t146.Component {
  getSnapshotBeforeUpdate(t150) {
    const e130 = this.props.childRef.current;
    if (e130 && t150.isPresent && !this.props.isPresent) {
      const t151 = this.props.sizeRef.current;
      t151.height = e130.offsetHeight || 0, t151.width = e130.offsetWidth || 0, t151.top = e130.offsetTop, t151.left = e130.offsetLeft;
    }
    return null;
  }
  componentDidUpdate() {
  }
  render() {
    return this.props.children;
  }
};
function i56({ children: i58, isPresent: s74 }) {
  const p35 = (0, import_react121.useId)(), h21 = (0, import_react121.useRef)(null), d44 = (0, import_react121.useRef)({ width: 0, height: 0, top: 0, left: 0 });
  return (0, import_react121.useInsertionEffect)(() => {
    const { width: t150, height: e130, top: n94, left: r123 } = d44.current;
    if (s74 || !h21.current || !t150 || !e130) return;
    h21.current.dataset.motionPopId = p35;
    const o123 = document.createElement("style");
    return document.head.appendChild(o123), o123.sheet && o123.sheet.insertRule(`
          [data-motion-pop-id="${p35}"] {
            position: absolute !important;
            width: ${t150}px !important;
            height: ${e130}px !important;
            top: ${n94}px !important;
            left: ${r123}px !important;
          }
        `), () => {
      document.head.removeChild(o123);
    };
  }, [s74]), t146.createElement(o118, { isPresent: s74, childRef: h21, sizeRef: d44 }, t146.cloneElement(i58, { ref: h21 }));
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/PresenceChild.js
var n91 = ({ children: n94, initial: m62, isPresent: a74, onExitComplete: f22, custom: p35, presenceAffectsLayout: u29, mode: l50 }) => {
  const d44 = n31(c60), E3 = (0, import_react122.useId)(), P3 = (0, import_react122.useMemo)(() => ({ id: E3, initial: m62, isPresent: a74, custom: p35, onExitComplete: (e130) => {
    d44.set(e130, true);
    for (const e131 of d44.values()) if (!e131) return;
    f22 && f22();
  }, register: (e130) => (d44.set(e130, false), () => d44.delete(e130)) }), u29 ? void 0 : [a74]);
  return (0, import_react122.useMemo)(() => {
    d44.forEach((e130, t150) => d44.set(t150, false));
  }, [a74]), e123.useEffect(() => {
    !a74 && !d44.size && f22 && f22();
  }, [a74]), "popLayout" === l50 && (n94 = e123.createElement(i56, { isPresent: a74 }, n94)), e123.createElement(r32.Provider, { value: P3 }, n94);
};
function c60() {
  return /* @__PURE__ */ new Map();
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/utils/use-unmount-effect.js
var import_react123 = __toESM(require_react());
function t148(t150) {
  return (0, import_react123.useEffect)(() => () => t150(), []);
}

// node_modules/@rewind-ui/core/dist/node_modules/framer-motion/dist/es/components/AnimatePresence/index.js
var p32 = (e130) => e130.key || "";
var d41 = ({ children: d44, custom: h21, initial: E3 = true, onExitComplete: y7, exitBeforeEnter: x13, presenceAffectsLayout: w12 = true, mode: j9 = "sync" }) => {
  r58(!x13, "Replace exitBeforeEnter with mode='wait'");
  const g18 = (0, import_react124.useContext)(r38).forceRender || m59()[0], k3 = o116(), v8 = function(e130) {
    const t150 = [];
    return import_react124.Children.forEach(e130, (e131) => {
      (0, import_react124.isValidElement)(e131) && t150.push(e131);
    }), t150;
  }(d44);
  let A2 = v8;
  const L = (0, import_react124.useRef)(/* @__PURE__ */ new Map()).current, P3 = (0, import_react124.useRef)(A2), C3 = (0, import_react124.useRef)(/* @__PURE__ */ new Map()).current, O6 = (0, import_react124.useRef)(true);
  if (m15(() => {
    O6.current = false, function(e130, t150) {
      e130.forEach((e131) => {
        const r123 = p32(e131);
        t150.set(r123, e131);
      });
    }(v8, C3), P3.current = A2;
  }), t148(() => {
    O6.current = true, C3.clear(), L.clear();
  }), O6.current) return e124.createElement(e124.Fragment, null, A2.map((t150) => e124.createElement(n91, { key: p32(t150), isPresent: true, initial: !!E3 && void 0, presenceAffectsLayout: w12, mode: j9 }, t150)));
  A2 = [...A2];
  const z6 = P3.current.map(p32), b12 = v8.map(p32), B2 = z6.length;
  for (let e130 = 0; e130 < B2; e130++) {
    const t150 = z6[e130];
    -1 !== b12.indexOf(t150) || L.has(t150) || L.set(t150, void 0);
  }
  return "wait" === j9 && L.size && (A2 = []), L.forEach((t150, r123) => {
    if (-1 !== b12.indexOf(r123)) return;
    const n94 = C3.get(r123);
    if (!n94) return;
    const o123 = z6.indexOf(r123);
    let s74 = t150;
    if (!s74) {
      const t151 = () => {
        C3.delete(r123), L.delete(r123);
        const e130 = P3.current.findIndex((e131) => e131.key === r123);
        if (P3.current.splice(e130, 1), !L.size) {
          if (P3.current = v8, false === k3.current) return;
          g18(), y7 && y7();
        }
      };
      s74 = e124.createElement(n91, { key: p32(n94), isPresent: false, onExitComplete: t151, custom: h21, presenceAffectsLayout: w12, mode: j9 }, n94), L.set(r123, s74);
    }
    A2.splice(o123, 0, s74);
  }), A2 = A2.map((t150) => {
    const r123 = t150.key;
    return L.has(r123) ? t150 : e124.createElement(n91, { key: p32(t150), isPresent: true, presenceAffectsLayout: w12, mode: j9 }, t150);
  }), "wait" === j9 && A2.length > 1 && console.warn(`You're attempting to animate multiple children within AnimatePresence, but its mode is set to "wait". This will lead to odd visual behaviour.`), e124.createElement(e124.Fragment, null, L.size ? A2 : A2.map((e130) => (0, import_react124.cloneElement)(e130)));
};

// node_modules/@rewind-ui/core/dist/components/Toast/ToastContainer/ToastContainer.js
var f20 = { max: 5, position: "top-right" };
var g15 = (0, import_react126.forwardRef)((m62, g18) => {
  const j9 = H("Toast"), [y7, x13] = (0, import_react126.useReducer)(e121, []), h21 = Object.assign(Object.assign({}, f20), m62), { className: b12 = "", max: E3, position: L } = h21, O6 = __rest(h21, ["className", "max", "position"]), N2 = t17(m62.id), T2 = (t150) => {
    x13({ type: a73.add, payload: t150.detail, max: E3 });
  }, P3 = (t150) => {
    x13({ type: a73.update, payload: t150.detail });
  }, _2 = (t150) => {
    x13({ type: a73.remove, payload: t150.detail });
  }, w12 = () => {
    x13({ type: a73.clear, payload: {} });
  };
  (0, import_react126.useEffect)(() => (document.addEventListener("toasts:add", T2), document.addEventListener("toasts:update", P3), document.addEventListener("toasts:remove", _2), document.addEventListener("toasts:clear", w12), () => {
    document.removeEventListener("toasts:add", T2), document.removeEventListener("toasts:update", P3), document.removeEventListener("toasts:remove", _2), document.removeEventListener("toasts:clear", w12);
  }));
  const A2 = (0, import_react126.useMemo)(() => twMerge(j9.container({ className: b12, position: L })), [b12, L, j9]);
  return (0, import_jsx_runtime91.jsx)(FloatingPortal, { children: (0, import_jsx_runtime91.jsx)("div", Object.assign({ ref: g18, id: N2, className: A2 }, O6, { children: (0, import_jsx_runtime91.jsx)(d41, Object.assign({ initial: false }, { children: y7.map((t150) => (0, import_jsx_runtime91.jsx)(a44.div, Object.assign({ layout: true, initial: { opacity: 0, x: "top-right" === L || "bottom-right" === L ? "100%" : "-100%", scale: 0.85 }, animate: { opacity: 1, x: 0, scale: 1 }, exit: { opacity: 0, x: "top-right" === L || "bottom-right" === L ? "100%" : "-100%", scale: 0.85, transition: { duration: 0.2 } } }, { children: (0, import_jsx_runtime91.jsx)(b11, Object.assign({}, t150)) }), t150.id)) })) })) });
});
g15.displayName = "ToastContainer";

// node_modules/@rewind-ui/core/dist/components/Tooltip/Tooltip.js
var import_jsx_runtime92 = __toESM(require_jsx_runtime());

// node_modules/@rewind-ui/core/dist/components/Tooltip/use-tooltip.hook.js
var import_react128 = __toESM(require_react());
function y6({ initiallyOpen: y7 = false, offset: v8 = 5, placement: x13 = "top" }) {
  var P3, h21;
  const R2 = (0, import_react128.useRef)(null), [F2, C3] = (0, import_react128.useState)(y7), { x: D, y: O6, refs: j9, strategy: E3, context: M3 } = useFloating2({ open: F2, onOpenChange: C3, placement: x13, middleware: [offset3(v8), shift3(), inline3(), flip3(), arrow3({ element: R2 })], whileElementsMounted: autoUpdate }), { getReferenceProps: S3, getFloatingProps: X2 } = useInteractions([useHover(M3, { move: false, handleClose: safePolygon() }), useFocus(M3), useDismiss(M3, { referencePress: true }), useRole(M3, { role: "tooltip" })]), Y2 = (null === (P3 = M3.middlewareData.arrow) || void 0 === P3 ? void 0 : P3.x) || 0, b12 = (null === (h21 = M3.middlewareData.arrow) || void 0 === h21 ? void 0 : h21.y) || 0, k3 = o93({ side: M3.placement });
  return (0, import_react128.useMemo)(() => ({ arrowRef: R2, arrowSide: k3, arrowX: Y2, arrowY: b12, context: M3, floating: j9.setFloating, getFloatingProps: X2(), getReferenceProps: S3(), open: F2, reference: j9.setReference, strategy: E3, x: D, y: O6 }), [k3, Y2, b12, M3, j9, X2, S3, F2, E3, D, O6]);
}

// node_modules/@rewind-ui/core/dist/components/Tooltip/Tooltip.js
var import_react130 = __toESM(require_react());
var g17 = { color: "dark", initiallyOpen: false, offset: 6, placement: "top", radius: "lg", shadow: "none", size: "sm", tone: "solid", withinPortal: true };
var w11 = (0, import_react130.forwardRef)((c63, w12) => {
  const y7 = H("Tooltip"), { tone: b12, children: j9, className: N2 = "", color: O6, initiallyOpen: x13, label: P3, offset: T2, placement: v8, radius: z6, shadow: F2, size: k3, withinPortal: R2 } = Object.assign(Object.assign({}, g17), c63), S3 = t17(c63.id), [I, q3] = (0, import_react130.useState)(!x13), [A2, B2] = (0, import_react130.useState)(null), { arrowRef: C3, arrowSide: D, context: E3, floating: G3, getFloatingProps: H3, getReferenceProps: J2, open: K2, reference: L, strategy: M3, x: Q2, y: U } = y6({ initiallyOpen: x13, offset: T2, placement: v8 });
  (0, import_react130.useEffect)(() => {
    A2 && clearTimeout(A2), B2(setTimeout(() => q3(!K2), K2 ? 0 : 75));
  }, [K2]);
  const V = import_react130.Children.only(j9), W2 = useMergeRefs([G3, w12 || null]), X2 = (0, import_react130.useMemo)(() => twMerge(y7.base({ tone: b12, arrowSide: D, className: N2, color: O6, open: K2, radius: z6, shadow: F2, size: k3 })), [b12, D, N2, O6, K2, z6, F2, k3, y7]), Y2 = !I && (0, import_jsx_runtime92.jsxs)("div", Object.assign({ id: S3, ref: W2, className: X2, role: "dialog", "aria-modal": "true", "aria-hidden": !K2, style: { position: M3, top: U && U > 0 && !isNaN(U) && isFinite(U) ? U : 0, left: Q2 && Q2 > 0 && !isNaN(Q2) && isFinite(Q2) ? Q2 : 0, visibility: null == Q2 ? "hidden" : "visible" } }, { children: [E3.x && E3.y && (0, import_jsx_runtime92.jsx)(FloatingArrow, { className: y7.arrow({ tone: b12, color: O6 }), ref: C3, width: 8, height: 4, context: E3 }), P3] })), Z2 = (0, import_react130.cloneElement)(V, Object.assign(Object.assign({ ref: L }, V.props), J2));
  return (0, import_jsx_runtime92.jsxs)(import_jsx_runtime92.Fragment, { children: [R2 ? (0, import_jsx_runtime92.jsx)(FloatingPortal, { children: Y2 }) : Y2, Z2] });
});
w11.displayName = "Tooltip";

// node_modules/@rewind-ui/core/dist/utils/toSlug.js
function e127(e130) {
  let r123 = e130;
  return r123 ? (r123 = r123.toLowerCase().trim(), r123 = r123.replace(/ & /g, " and "), r123 = r123.replace(/[ ]+/g, "-"), r123 = r123.replace(/[-]+/g, "-"), r123 = r123.replace(/[^a-z0-9-]+/g, ""), r123) : "";
}

// node_modules/@rewind-ui/core/dist/utils/useIsomorphicLayoutEffect.js
var import_react131 = __toESM(require_react());
var n93 = "undefined" == typeof window || "undefined" == typeof document ? import_react131.useLayoutEffect : import_react131.useEffect;

// node_modules/@rewind-ui/core/dist/utils/usePrevious.js
var r122 = __toESM(require_react());
function e129(e130) {
  const t150 = r122.useRef(e130);
  return r122.useEffect(() => {
    t150.current = e130;
  }, [e130]), t150.current;
}
export {
  p3 as Accordion,
  z2 as Alert,
  c9 as Avatar,
  m6 as Badge,
  u3 as Breadcrumbs,
  u4 as Button,
  B as Calendar,
  f5 as Card,
  o87 as Checkbox,
  n4 as Collapse,
  S2 as Combobox,
  O3 as Drawer,
  w8 as Dropdown,
  x11 as FormControl,
  d11 as Image,
  g9 as Input,
  g10 as InputGroup,
  j6 as Modal,
  m33 as Overlay,
  g12 as Popover,
  c45 as Progress,
  c46 as Radio,
  d33 as RadioGroup,
  m43 as Ribbon,
  h12 as Select,
  g13 as Selector,
  v6 as Sidebar,
  o21 as Spinner,
  f19 as Switch,
  b9 as Table,
  b10 as Tabs,
  c59 as Text,
  m41 as Textarea,
  z as ThemeProvider,
  b11 as Toast,
  g15 as ToastContainer,
  w11 as Tooltip,
  p2 as VariantProvider,
  e127 as toSlug,
  H as useComponentTheme,
  d6 as useComponentVariant,
  e14 as useFade,
  n93 as useIsomorphicLayoutEffect,
  e129 as usePrevious,
  t17 as usePropId,
  e112 as useSidebar,
  E as useTheme,
  t145 as useToast,
  f2 as useVariant
};
/*! Bundled license information:

tabbable/dist/index.esm.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
//# sourceMappingURL=@rewind-ui_core.js.map
